[
  {
    "body" : "This is a development snapshot of the 0.50600.0 release of SwiftSyntax that vends the parser library (`_InternalSwiftSyntaxParser.dylib`) as a binary framework dependency on macOS.\r\n\r\nTo use this snapshot add the following dependency to your `Package.swift`:\r\n```swift\r\n.package(url: \"https://github.com/apple/swift-syntax\", branch: \"0.50600.0-SNAPSHOT-2022-01-24\")\r\n```\r\n\r\nOr, if using a swift-tools-version ≤ 5.4:\r\n\r\n```swift\r\n.package(url: \"https://github.com/apple/swift-syntax\", .branch(\"0.50600.0-SNAPSHOT-2022-01-24\"))\r\n```",
    "createdAt" : "2022-01-25T18:35:01+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "RE_kwDOCIc4qs4Dc41X",
    "owner" : "apple",
    "publishedAt" : "2022-01-25T18:54:29+09:00",
    "repository" : "swift-syntax",
    "title" : "0.50600.0-SNAPSHOT-2022-01-24",
    "url" : "https://github.com/apple/swift-syntax/releases/tag/0.50600.0-SNAPSHOT-2022-01-24",
    "version" : "0.50600.0-SNAPSHOT-2022-01-24"
  },
  {
    "body" : "This is the 0.50600.0 release of SwiftSyntax that vends the parser library (`_InternalSwiftSyntaxParser.dylib`) as a binary framework dependency on macOS.\r\n\r\nTo use this snapshot add the following dependency to your Package.swift:\r\n\r\n```swift\r\n.package(url: \"https://github.com/apple/swift-syntax\", branch: \"0.50600.0\")\r\n```\r\n\r\nOr, if using a swift-tools-version ≤ 5.4:\r\n\r\n```swift\r\n.package(url: \"https://github.com/apple/swift-syntax\", .branch(\"0.50600.0\"))\r\n```\r\n",
    "createdAt" : "2022-03-15T17:47:58+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "RE_kwDOCIc4qs4Dr--h",
    "owner" : "apple",
    "publishedAt" : "2022-03-15T18:22:36+09:00",
    "repository" : "swift-syntax",
    "title" : "0.50600.0",
    "url" : "https://github.com/apple/swift-syntax/releases/tag/0.50600.0",
    "version" : "0.50600.0"
  },
  {
    "body" : "This is the 0.50600.1 release of SwiftSyntax that vends the parser library (`_InternalSwiftSyntaxParser.dylib`) as a binary framework dependency on macOS.\r\n\r\nTo use this snapshot add the following dependency to your Package.swift:\r\n\r\n```swift\r\n.package(url: \"https://github.com/apple/swift-syntax\", branch: \"0.50600.1\")\r\n```\r\n\r\nOr, if using a swift-tools-version ≤ 5.4:\r\n\r\n```swift\r\n.package(url: \"https://github.com/apple/swift-syntax\", .branch(\"0.50600.1\"))\r\n```\r\n",
    "createdAt" : "2022-03-18T17:13:51+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "RE_kwDOCIc4qs4DtJvc",
    "owner" : "apple",
    "publishedAt" : "2022-03-18T17:22:47+09:00",
    "repository" : "swift-syntax",
    "title" : "0.50600.1",
    "url" : "https://github.com/apple/swift-syntax/releases/tag/0.50600.1",
    "version" : "0.50600.1"
  },
  {
    "body" : "This is the 0.50700.0 release of SwiftSyntax that vends the parser library (`_InternalSwiftSyntaxParser.dylib`) as a binary framework dependency on macOS.\r\n\r\nTo use this snapshot add the following dependency to your Package.swift:\r\n\r\n```swift\r\n.package(url: \"https://github.com/apple/swift-syntax\", branch: \"0.50700.0\")\r\n```\r\n\r\nOr, if using a swift-tools-version ≤ 5.4:\r\n\r\n```swift\r\n.package(url: \"https://github.com/apple/swift-syntax\", .branch(\"0.50700.0\"))\r\n```\r\n",
    "createdAt" : "2022-09-20T19:36:19+09:00",
    "fetchedFromAPIAt" : "2022-09-21T10:02:33+09:00",
    "id" : "RE_kwDOCIc4qs4EoLX-",
    "owner" : "apple",
    "publishedAt" : "2022-09-20T19:42:29+09:00",
    "repository" : "swift-syntax",
    "title" : "0.50700.0",
    "url" : "https://github.com/apple/swift-syntax/releases/tag/0.50700.0",
    "version" : "0.50700.0"
  },
  {
    "body" : "This is the 0.50700.1 release of SwiftSyntax that vends the parser library (`_InternalSwiftSyntaxParser.dylib`) as a binary framework dependency on macOS.\r\n\r\nTo use this snapshot add the following dependency to your Package.swift:\r\n\r\n```swift\r\n.package(url: \"https://github.com/apple/swift-syntax\", branch: \"0.50700.1\")\r\n```\r\n\r\nOr, if using a swift-tools-version ≤ 5.4:\r\n\r\n```swift\r\n.package(url: \"https://github.com/apple/swift-syntax\", .branch(\"0.50700.1\"))\r\n```\r\n\r\n⚠️ Important: This release of SwiftSyntax is incompatible with the parser library included in the swift-5.7-RELEASE toolchain. On Linux, download a recent [swift-5.7-DEVELOPMENT-SNAPSHOT](https://www.swift.org/download/#swift-57-development) toolchain to use this SwiftSyntax version. On macOS, this version of SwiftSyntax is compatible with any recent Swift or Xcode toolchain because it includes the parser library as a binary dependency. ",
    "createdAt" : "2022-10-05T19:24:15+09:00",
    "fetchedFromAPIAt" : "2022-10-06T10:03:41+09:00",
    "id" : "RE_kwDOCIc4qs4Ethqe",
    "owner" : "apple",
    "publishedAt" : "2022-10-05T19:32:58+09:00",
    "repository" : "swift-syntax",
    "title" : "0.50700.1",
    "url" : "https://github.com/apple/swift-syntax/releases/tag/0.50700.1",
    "version" : "0.50700.1"
  },
  {
    "body" : "This is the 508.0.0 release of SwiftSyntax, aligned with the release of Swift 5.8.\r\n\r\nTo use this snapshot add the following dependency to your Package.swift:\r\n\r\n```swift\r\n.package(url: \"https://github.com/apple/swift-syntax\", from: \"508.0.0\")\r\n```",
    "createdAt" : "2023-02-20T16:18:37+09:00",
    "fetchedFromAPIAt" : "2023-04-04T09:41:16+09:00",
    "id" : "RE_kwDOCIc4qs4F1bpx",
    "owner" : "apple",
    "publishedAt" : "2023-04-04T03:25:34+09:00",
    "repository" : "swift-syntax",
    "title" : "508.0.0",
    "url" : "https://github.com/apple/swift-syntax/releases/tag/508.0.0",
    "version" : "508.0.0"
  },
  {
    "body" : "This is a development snapshot of the 0.50800.0 release of SwiftSyntax.\r\n\r\nTo use this snapshot add the following dependency to your `Package.swift`:\r\n```swift\r\n.package(url: \"https://github.com/apple/swift-syntax\", exact: \"0.50800.0-SNAPSHOT-2022-12-20-a\")\r\n```",
    "createdAt" : "2022-12-20T07:01:17+09:00",
    "fetchedFromAPIAt" : "2022-12-28T09:41:38+09:00",
    "id" : "RE_kwDOCIc4qs4FNADj",
    "owner" : "apple",
    "publishedAt" : "2022-12-27T20:12:35+09:00",
    "repository" : "swift-syntax",
    "title" : "0.50800.0-SNAPSHOT-2022-12-20-a",
    "url" : "https://github.com/apple/swift-syntax/releases/tag/0.50800.0-SNAPSHOT-2022-12-20-a",
    "version" : "0.50800.0-SNAPSHOT-2022-12-20-a"
  },
  {
    "body" : "This is a development snapshot of the 0.50800.0 release of SwiftSyntax.\r\n\r\nTo use this snapshot add the following dependency to your `Package.swift`:\r\n```swift\r\n.package(url: \"https://github.com/apple/swift-syntax\", exact: \"0.50800.0-SNAPSHOT-2022-12-29-a\")\r\n```",
    "createdAt" : "2022-12-20T07:01:17+09:00",
    "fetchedFromAPIAt" : "2023-01-06T09:43:51+09:00",
    "id" : "RE_kwDOCIc4qs4FP6tE",
    "owner" : "apple",
    "publishedAt" : "2023-01-06T05:31:52+09:00",
    "repository" : "swift-syntax",
    "title" : "0.50800.0-SNAPSHOT-2022-12-29-a",
    "url" : "https://github.com/apple/swift-syntax/releases/tag/0.50800.0-SNAPSHOT-2022-12-29-a",
    "version" : "0.50800.0-SNAPSHOT-2022-12-29-a"
  },
  {
    "body" : "This release of SwiftSyntax is aligned with the release of Swift 5.8.\r\n\r\nCompared to 508.0.0, this release relaxes the version requirement for `swift-argument-parser`, resulting in fewer version conflicts for users of SwiftSyntax.",
    "createdAt" : "2023-05-16T04:05:18+09:00",
    "fetchedFromAPIAt" : "2023-05-17T09:45:50+09:00",
    "id" : "RE_kwDOCIc4qs4GJHPn",
    "owner" : "apple",
    "publishedAt" : "2023-05-16T04:13:03+09:00",
    "repository" : "swift-syntax",
    "title" : "508.0.1",
    "url" : "https://github.com/apple/swift-syntax/releases/tag/508.0.1",
    "version" : "508.0.1"
  },
  {
    "body" : "This is the 509.0.0 release of SwiftSyntax, aligned with Swift 5.9.\r\n\r\nTo use this snapshot add the following dependency to your Package.swift:\r\n\r\n```swift\r\n.package(url: \"https://github.com/apple/swift-syntax\", from: \"509.0.0\")\r\n```",
    "createdAt" : "2023-09-14T08:36:53+09:00",
    "fetchedFromAPIAt" : "2023-10-18T13:22:51+09:00",
    "id" : "RE_kwDOCIc4qs4HNxyQ",
    "owner" : "apple",
    "publishedAt" : "2023-09-14T09:02:31+09:00",
    "repository" : "swift-syntax",
    "title" : "509.0.0",
    "url" : "https://github.com/apple/swift-syntax/releases/tag/509.0.0",
    "version" : "509.0.0"
  },
  {
    "body" : "Fixes the following issues:\r\n- `Foo<T>.bar` should not have whitespace added between `>` and `.` (https://github.com/apple/swift-syntax/pull/2224)\r\n- Missing dependency declaration between `SwiftSyntaxMacroExpansion` and `SwiftOperators` (https://github.com/apple/swift-syntax/pull/2224)",
    "createdAt" : "2023-10-17T09:22:54+09:00",
    "fetchedFromAPIAt" : "2023-12-06T22:38:35+09:00",
    "id" : "RE_kwDOCIc4qs4Hg9Vm",
    "owner" : "apple",
    "publishedAt" : "2023-10-21T07:05:16+09:00",
    "repository" : "swift-syntax",
    "title" : "509.0.1",
    "url" : "https://github.com/apple/swift-syntax/releases/tag/509.0.1",
    "version" : "509.0.1"
  },
  {
    "body" : "Fixes a possible misaligned memory access",
    "createdAt" : "2023-11-01T08:07:18+09:00",
    "fetchedFromAPIAt" : "2023-12-06T22:38:35+09:00",
    "id" : "RE_kwDOCIc4qs4HmL_1",
    "owner" : "apple",
    "publishedAt" : "2023-11-01T09:05:00+09:00",
    "repository" : "swift-syntax",
    "title" : "509.0.2",
    "url" : "https://github.com/apple/swift-syntax/releases/tag/509.0.2",
    "version" : "509.0.2"
  },
  {
    "body" : "- Supports [SE-0407 Member Macro Conformances](https://github.com/apple/swift-evolution/blob/main/proposals/0407-member-macro-conformances.md) by adding a new defaulted version of the `expansion` function in `MemberMacro` that receives the `conformingTo` parameter\r\n- Fixes a formatting bug not adding a space between a string/regex literal and a period (https://github.com/apple/swift-syntax/issues/2344)",
    "createdAt" : "2024-01-09T09:18:49+09:00",
    "fetchedFromAPIAt" : "2024-01-23T13:39:16+09:00",
    "id" : "RE_kwDOCIc4qs4IHzPn",
    "owner" : "apple",
    "publishedAt" : "2024-01-09T10:55:46+09:00",
    "repository" : "swift-syntax",
    "title" : "509.1.0",
    "url" : "https://github.com/apple/swift-syntax/releases/tag/509.1.0",
    "version" : "509.1.0"
  },
  {
    "body" : "Fixes an issue that caused the `swift-parser-cli` target to not build on visionOS.",
    "createdAt" : "2024-01-23T10:16:23+09:00",
    "fetchedFromAPIAt" : "2024-01-23T13:39:16+09:00",
    "id" : "RE_kwDOCIc4qs4IOtbM",
    "owner" : "apple",
    "publishedAt" : "2024-01-23T10:41:45+09:00",
    "repository" : "swift-syntax",
    "title" : "509.1.1",
    "url" : "https://github.com/apple/swift-syntax/releases/tag/509.1.1",
    "version" : "509.1.1"
  },
  {
    "body" : "## New APIs\r\n\r\n- `SyntaxStringInterpolation.appendInterpolation(_: (some SyntaxProtocol)?)`\r\n  - Description: Allows optional syntax nodes to be used inside string interpolation of syntax nodes. If the node is `nil`, nothing will get added to the string interpolation.\r\n  - Pull Request: https://github.com/apple/swift-syntax/pull/2085\r\n- `SyntaxCollection.index(at:)`\r\n  - Description: Returns the index of the n-th element in a `SyntaxCollection`. This computation is in O(n) and `SyntaxCollection` is not subscriptable by an integer.\r\n  - Pull Request: https://github.com/apple/swift-syntax/pull/2014\r\n- Convenience initializer `ClosureCaptureSyntax.init()`\r\n  - Description: Provides a convenience initializer for `ClosureCaptureSyntax` that takes a concrete `name` argument and automatically adds `equal = TokenSyntax.equalToken()` to it.\r\n  - Issue: https://github.com/apple/swift-syntax/issues/1984\r\n  - Pull Request: https://github.com/apple/swift-syntax/pull/2127\r\n- Convenience initializer `EnumCaseParameterSyntax.init()`\r\n  - Description: Provides a convenience initializer for `EnumCaseParameterSyntax` that takes a concrete `firstName` value and adds `colon = TokenSyntax.colonToken()` automatically to it.\r\n  - Issue: https://github.com/apple/swift-syntax/issues/1984\r\n  - Pull Request: https://github.com/apple/swift-syntax/pull/2112\r\n\r\n- `DiagnosticSeverity` and `PluginMessage.Diagnostic.Severity` now have new case named `remark`\r\n  - Description: Remarks are used by the Swift compiler and other tools to describe some aspect of translation that doesn't reflect correctness, but may be useful for the user. Remarks have been added to the diagnostic severity enums to align with the Swift compiler.\r\n  - Pull Request: https://github.com/apple/swift-syntax/pull/2143\r\n\r\n## Deprecations\r\n\r\n- Leaf Node Casts\r\n  - Description: Syntax nodes that do not act as base nodes for other syntax types have the casting methods marked as deprecated. This prevents unsafe type-casting by issuing deprecation warnings for methods that will always result in failed casts.\r\n  - Issue: https://github.com/apple/swift-syntax/issues/2092\r\n  - Pull Request: https://github.com/apple/swift-syntax/pull/2108\r\n\r\n- Same-Type Casts \r\n  - Description: `is`, `as`, and `cast` overloads on `SyntaxProtocol` with same-type conversions are marked as deprecated. The deprecated methods emit a warning indicating the cast will always succeed.\r\n  - Issue: https://github.com/apple/swift-syntax/issues/2092\r\n  - Pull Request: https://github.com/apple/swift-syntax/pull/2108\r\n\r\n- Base Node Casts\r\n  - Description: `is`, `as`, and `cast` methods on base node protocols with base-type conversions are marked as deprecated. The deprecated methods emit a warning that informs the developer that the cast will always succeed and should be done using the base node's initializer.\r\n  - Issue: https://github.com/apple/swift-syntax/issues/2092\r\n  - Pull Request: https://github.com/apple/swift-syntax/pull/2108\r\n\r\n- `WildcardPatternSyntax.typeAnnotation`\r\n  - Description: `typeAnnotation` on `WildcardPatternSyntax` was a mistake. Use `typeAnnotation` properties on the outer constructs instead. E.g. `PatternBindingListSyntax.typeAnnotation`\r\n  - Pull Request: https://github.com/apple/swift-syntax/pull/2393\r\n\r\n## API-Incompatible Changes\r\n\r\n- `NoteMessage.fixItID` renamed to `noteID`\r\n  - Description: This was an error that it was named `fixItID` and should have been named `noteID` instead. Accesses to `fixItID` are deprecated and forward to `noteID`. Any types that conform `NoteMessage` it will need to be updated to provide a `noteID` instead of a `fixItID`.\r\n  - Issue: https://github.com/apple/swift-syntax/issues/2261\r\n  - Pull Request: https://github.com/apple/swift-syntax/pull/2264\r\n\r\n- `DiagnosticSpec.highlight` replaced by `highlights`\r\n  - Description: The use of a single string `highlight` prevented users from asserting that a macro highlighted exactly the expected set of syntax nodes. Use of `DiagnosticSpec.init(...highlight:...)` is deprecated and forwards to `DiagnosticSpec.init(...highlights:...)`. Migrating from `highlight` to `highlights` is straightforward; any uses of `DiagnosticSpec.init` which do not specify a `highlight` do not need to change, otherwise:\r\n    - If the diagnostic highlights a single node, the `highlight` string should be replaced with a single element array containing the same string without any trailing trivia, e.g., `highlight: \"let \"` -> `highlights: [\"let\"]`.\r\n    - If the diagnostic highlights multiple nodes, the `highlight` string should be replaced with an array containing an element for each highlighted node, e.g., `highlight: \"struct {}\"` -> `highlights: [\"struct\", \"{}\"]`.\r\n  - Pull Request: https://github.com/apple/swift-syntax/pull/2213\r\n",
    "createdAt" : "2024-02-14T12:53:48+09:00",
    "fetchedFromAPIAt" : "2024-03-04T22:15:33+09:00",
    "id" : "RE_kwDOCIc4qs4InDcQ",
    "owner" : "apple",
    "publishedAt" : "2024-03-02T05:21:16+09:00",
    "repository" : "swift-syntax",
    "title" : "510.0.0",
    "url" : "https://github.com/apple/swift-syntax/releases/tag/510.0.0",
    "version" : "510.0.0"
  },
  {
    "body" : "",
    "createdAt" : "2024-03-03T07:57:40+09:00",
    "fetchedFromAPIAt" : "2024-04-23T22:42:10+09:00",
    "id" : "RE_kwDOCIc4qs4IpfbD",
    "owner" : "apple",
    "publishedAt" : "2024-03-07T01:15:51+09:00",
    "repository" : "swift-syntax",
    "title" : "",
    "url" : "https://github.com/apple/swift-syntax/releases/tag/swift-5.10-RELEASE",
    "version" : "swift-5.10-RELEASE"
  },
  {
    "body" : "Compared to 510.0.0 this fixes a possible misaligned memory access.\r\n\r\nIt also contains the following changes from [510.0.0](https://github.com/apple/swift-syntax/releases/tag/510.0.0).\r\n\r\n## New APIs\r\n\r\n- `SyntaxStringInterpolation.appendInterpolation(_: (some SyntaxProtocol)?)`\r\n  - Description: Allows optional syntax nodes to be used inside string interpolation of syntax nodes. If the node is `nil`, nothing will get added to the string interpolation.\r\n  - Pull Request: https://github.com/apple/swift-syntax/pull/2085\r\n- `SyntaxCollection.index(at:)`\r\n  - Description: Returns the index of the n-th element in a `SyntaxCollection`. This computation is in O(n) and `SyntaxCollection` is not subscriptable by an integer.\r\n  - Pull Request: https://github.com/apple/swift-syntax/pull/2014\r\n- Convenience initializer `ClosureCaptureSyntax.init()`\r\n  - Description: Provides a convenience initializer for `ClosureCaptureSyntax` that takes a concrete `name` argument and automatically adds `equal = TokenSyntax.equalToken()` to it.\r\n  - Issue: https://github.com/apple/swift-syntax/issues/1984\r\n  - Pull Request: https://github.com/apple/swift-syntax/pull/2127\r\n- Convenience initializer `EnumCaseParameterSyntax.init()`\r\n  - Description: Provides a convenience initializer for `EnumCaseParameterSyntax` that takes a concrete `firstName` value and adds `colon = TokenSyntax.colonToken()` automatically to it.\r\n  - Issue: https://github.com/apple/swift-syntax/issues/1984\r\n  - Pull Request: https://github.com/apple/swift-syntax/pull/2112\r\n\r\n- `DiagnosticSeverity` and `PluginMessage.Diagnostic.Severity` now have new case named `remark`\r\n  - Description: Remarks are used by the Swift compiler and other tools to describe some aspect of translation that doesn't reflect correctness, but may be useful for the user. Remarks have been added to the diagnostic severity enums to align with the Swift compiler.\r\n  - Pull Request: https://github.com/apple/swift-syntax/pull/2143\r\n\r\n## Deprecations\r\n\r\n- Leaf Node Casts\r\n  - Description: Syntax nodes that do not act as base nodes for other syntax types have the casting methods marked as deprecated. This prevents unsafe type-casting by issuing deprecation warnings for methods that will always result in failed casts.\r\n  - Issue: https://github.com/apple/swift-syntax/issues/2092\r\n  - Pull Request: https://github.com/apple/swift-syntax/pull/2108\r\n\r\n- Same-Type Casts \r\n  - Description: `is`, `as`, and `cast` overloads on `SyntaxProtocol` with same-type conversions are marked as deprecated. The deprecated methods emit a warning indicating the cast will always succeed.\r\n  - Issue: https://github.com/apple/swift-syntax/issues/2092\r\n  - Pull Request: https://github.com/apple/swift-syntax/pull/2108\r\n\r\n- Base Node Casts\r\n  - Description: `is`, `as`, and `cast` methods on base node protocols with base-type conversions are marked as deprecated. The deprecated methods emit a warning that informs the developer that the cast will always succeed and should be done using the base node's initializer.\r\n  - Issue: https://github.com/apple/swift-syntax/issues/2092\r\n  - Pull Request: https://github.com/apple/swift-syntax/pull/2108\r\n\r\n- `WildcardPatternSyntax.typeAnnotation`\r\n  - Description: `typeAnnotation` on `WildcardPatternSyntax` was a mistake. Use `typeAnnotation` properties on the outer constructs instead. E.g. `PatternBindingListSyntax.typeAnnotation`\r\n  - Pull Request: https://github.com/apple/swift-syntax/pull/2393\r\n\r\n## API-Incompatible Changes\r\n\r\n- `NoteMessage.fixItID` renamed to `noteID`\r\n  - Description: This was an error that it was named `fixItID` and should have been named `noteID` instead. Accesses to `fixItID` are deprecated and forward to `noteID`. Any types that conform `NoteMessage` it will need to be updated to provide a `noteID` instead of a `fixItID`.\r\n  - Issue: https://github.com/apple/swift-syntax/issues/2261\r\n  - Pull Request: https://github.com/apple/swift-syntax/pull/2264\r\n\r\n- `DiagnosticSpec.highlight` replaced by `highlights`\r\n  - Description: The use of a single string `highlight` prevented users from asserting that a macro highlighted exactly the expected set of syntax nodes. Use of `DiagnosticSpec.init(...highlight:...)` is deprecated and forwards to `DiagnosticSpec.init(...highlights:...)`. Migrating from `highlight` to `highlights` is straightforward; any uses of `DiagnosticSpec.init` which do not specify a `highlight` do not need to change, otherwise:\r\n    - If the diagnostic highlights a single node, the `highlight` string should be replaced with a single element array containing the same string without any trailing trivia, e.g., `highlight: \"let \"` -> `highlights: [\"let\"]`.\r\n    - If the diagnostic highlights multiple nodes, the `highlight` string should be replaced with an array containing an element for each highlighted node, e.g., `highlight: \"struct {}\"` -> `highlights: [\"struct\", \"{}\"]`.\r\n  - Pull Request: https://github.com/apple/swift-syntax/pull/2213\r\n",
    "createdAt" : "2024-03-09T08:45:17+09:00",
    "fetchedFromAPIAt" : "2024-04-23T22:42:10+09:00",
    "id" : "RE_kwDOCIc4qs4IrVTm",
    "owner" : "apple",
    "publishedAt" : "2024-03-09T09:15:33+09:00",
    "repository" : "swift-syntax",
    "title" : "510.0.1",
    "url" : "https://github.com/apple/swift-syntax/releases/tag/510.0.1",
    "version" : "510.0.1"
  },
  {
    "body" : "Compared to 510.0.1 this release fixes compilation warnings about retroactive conformances when building swift-syntax with a Swift 6 compiler.\r\n\r\nIt also contains the following changes from [510.0.0](https://github.com/apple/swift-syntax/releases/tag/510.0.0).\r\n\r\n## New APIs\r\n\r\n- `SyntaxStringInterpolation.appendInterpolation(_: (some SyntaxProtocol)?)`\r\n  - Description: Allows optional syntax nodes to be used inside string interpolation of syntax nodes. If the node is `nil`, nothing will get added to the string interpolation.\r\n  - Pull Request: https://github.com/apple/swift-syntax/pull/2085\r\n- `SyntaxCollection.index(at:)`\r\n  - Description: Returns the index of the n-th element in a `SyntaxCollection`. This computation is in O(n) and `SyntaxCollection` is not subscriptable by an integer.\r\n  - Pull Request: https://github.com/apple/swift-syntax/pull/2014\r\n- Convenience initializer `ClosureCaptureSyntax.init()`\r\n  - Description: Provides a convenience initializer for `ClosureCaptureSyntax` that takes a concrete `name` argument and automatically adds `equal = TokenSyntax.equalToken()` to it.\r\n  - Issue: https://github.com/apple/swift-syntax/issues/1984\r\n  - Pull Request: https://github.com/apple/swift-syntax/pull/2127\r\n- Convenience initializer `EnumCaseParameterSyntax.init()`\r\n  - Description: Provides a convenience initializer for `EnumCaseParameterSyntax` that takes a concrete `firstName` value and adds `colon = TokenSyntax.colonToken()` automatically to it.\r\n  - Issue: https://github.com/apple/swift-syntax/issues/1984\r\n  - Pull Request: https://github.com/apple/swift-syntax/pull/2112\r\n\r\n- `DiagnosticSeverity` and `PluginMessage.Diagnostic.Severity` now have new case named `remark`\r\n  - Description: Remarks are used by the Swift compiler and other tools to describe some aspect of translation that doesn't reflect correctness, but may be useful for the user. Remarks have been added to the diagnostic severity enums to align with the Swift compiler.\r\n  - Pull Request: https://github.com/apple/swift-syntax/pull/2143\r\n\r\n## Deprecations\r\n\r\n- Leaf Node Casts\r\n  - Description: Syntax nodes that do not act as base nodes for other syntax types have the casting methods marked as deprecated. This prevents unsafe type-casting by issuing deprecation warnings for methods that will always result in failed casts.\r\n  - Issue: https://github.com/apple/swift-syntax/issues/2092\r\n  - Pull Request: https://github.com/apple/swift-syntax/pull/2108\r\n\r\n- Same-Type Casts \r\n  - Description: `is`, `as`, and `cast` overloads on `SyntaxProtocol` with same-type conversions are marked as deprecated. The deprecated methods emit a warning indicating the cast will always succeed.\r\n  - Issue: https://github.com/apple/swift-syntax/issues/2092\r\n  - Pull Request: https://github.com/apple/swift-syntax/pull/2108\r\n\r\n- Base Node Casts\r\n  - Description: `is`, `as`, and `cast` methods on base node protocols with base-type conversions are marked as deprecated. The deprecated methods emit a warning that informs the developer that the cast will always succeed and should be done using the base node's initializer.\r\n  - Issue: https://github.com/apple/swift-syntax/issues/2092\r\n  - Pull Request: https://github.com/apple/swift-syntax/pull/2108\r\n\r\n- `WildcardPatternSyntax.typeAnnotation`\r\n  - Description: `typeAnnotation` on `WildcardPatternSyntax` was a mistake. Use `typeAnnotation` properties on the outer constructs instead. E.g. `PatternBindingListSyntax.typeAnnotation`\r\n  - Pull Request: https://github.com/apple/swift-syntax/pull/2393\r\n\r\n## API-Incompatible Changes\r\n\r\n- `NoteMessage.fixItID` renamed to `noteID`\r\n  - Description: This was an error that it was named `fixItID` and should have been named `noteID` instead. Accesses to `fixItID` are deprecated and forward to `noteID`. Any types that conform `NoteMessage` it will need to be updated to provide a `noteID` instead of a `fixItID`.\r\n  - Issue: https://github.com/apple/swift-syntax/issues/2261\r\n  - Pull Request: https://github.com/apple/swift-syntax/pull/2264\r\n\r\n- `DiagnosticSpec.highlight` replaced by `highlights`\r\n  - Description: The use of a single string `highlight` prevented users from asserting that a macro highlighted exactly the expected set of syntax nodes. Use of `DiagnosticSpec.init(...highlight:...)` is deprecated and forwards to `DiagnosticSpec.init(...highlights:...)`. Migrating from `highlight` to `highlights` is straightforward; any uses of `DiagnosticSpec.init` which do not specify a `highlight` do not need to change, otherwise:\r\n    - If the diagnostic highlights a single node, the `highlight` string should be replaced with a single element array containing the same string without any trailing trivia, e.g., `highlight: \"let \"` -> `highlights: [\"let\"]`.\r\n    - If the diagnostic highlights multiple nodes, the `highlight` string should be replaced with an array containing an element for each highlighted node, e.g., `highlight: \"struct {}\"` -> `highlights: [\"struct\", \"{}\"]`.\r\n  - Pull Request: https://github.com/apple/swift-syntax/pull/2213\r\n",
    "createdAt" : "2024-05-08T01:02:05+09:00",
    "fetchedFromAPIAt" : "2024-06-11T05:13:53+09:00",
    "id" : "RE_kwDOCIc4qs4JN03P",
    "owner" : "apple",
    "publishedAt" : "2024-05-08T01:24:18+09:00",
    "repository" : "swift-syntax",
    "title" : "510.0.2",
    "url" : "https://github.com/apple/swift-syntax/releases/tag/510.0.2",
    "version" : "510.0.2"
  }
]