[
  {
    "body" : "- Added: `WithViewStore` now conforms to `Scene` and can be used in `App.body` content.\r\n- Changed: `Store.scope`'s less commonly used overload that transforms _publishers_ of `Store`s has been deprecated and renamed to `publisherScope`.\r\n- Fixed: a few Test Store failure messages were reporting the wrong debug information. They have been fixed.\r\n- Fixed: view store-derived bindings that do not have `animation` modifiers applied will not properly animated when mutated explicitly in `withAnimation`.\r\n- Fixed: documentation improvements (thanks @nspavlo, @SteinerHannes, @mluisbrown).x\r\n- Infrastructure: better support dark mode in the Voice Memos demo (thanks @willisplummer).\r\n- Infrastructure: use serial queue in Tic Tac Toe demo.",
    "createdAt" : "2021-01-12T23:48:36+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTM2Mjg1NzA1",
    "owner" : "pointfreeco",
    "publishedAt" : "2021-01-13T00:20:13+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.10.0",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.10.0",
    "version" : "0.10.0"
  },
  {
    "body" : "- Added: `TextState`, a testable, equatable description of SwiftUI `Text`. Useful for when you want to store dynamic, stylized text in your app's state.\r\n- Changed: `AlertState` and `ActionSheetState` now use `TextState` under the hood.\r\n- Fixed: worked around a bug affecting iOS 13.0-13.2 that prevented state changes from being reflected in the view (thanks @nsillik).\r\n- Fixed: `AlertState` and `ActionSheetState` can once again be used with verbatim strings (thanks @ohitsdaniel).\r\n- Deprecated: `AlertState` and `ActionSheetState` initializers that take `LocalizedStringKey`. Migration path: use the initializers that take explicit `TextState` instead (which can be initialized with both `LocalizedStringKey` and verbatim `String`s).",
    "createdAt" : "2021-01-22T08:12:17+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTM2NzQxNDUz",
    "owner" : "pointfreeco",
    "publishedAt" : "2021-01-22T08:13:05+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.11.0",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.11.0",
    "version" : "0.11.0"
  },
  {
    "body" : "- Added: First-class forms support via `FormAction` and `Reducer.form()`.\r\n- Fixed: Re-publicized `AlertState.Button.type`.",
    "createdAt" : "2021-02-02T03:34:55+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTM3MTk0NDcw",
    "owner" : "pointfreeco",
    "publishedAt" : "2021-02-02T03:43:16+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.12.0",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.12.0",
    "version" : "0.12.0"
  },
  {
    "body" : "Quick turnaround for this release. Should have waited for Xcode 12.5 to download 😅\r\n\r\n- Changed: replacing an identified array's element with one that has a mismatched id will now fatal error in debug builds.\r\n- Fixed: worked around a Xcode 12.5 beta compilation error.\r\n- Infrastructure: fleshed out `Store.scope` documentation.",
    "createdAt" : "2021-02-02T04:55:29+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTM3MTk4MDA0",
    "owner" : "pointfreeco",
    "publishedAt" : "2021-02-02T05:01:10+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.13.0",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.13.0",
    "version" : "0.13.0"
  },
  {
    "body" : "- Changed: `FormAction` and `Reducer.form` have been renamed to `BindingAction` and `Reducer.binding` based on community feedback and the more general, non-form-based use cases. Migration path: `FormAction` and `Reducer.form` have been deprecated and Xcode can automatically migrate them to their newer names.\r\n\r\n    ```swift\r\n    // before:\r\n\r\n    enum SettingsAction {\r\n      case form(FormAction<SettingsState>)\r\n    }\r\n\r\n    let settingsReducer = Reducer<\r\n      SettingsState, SettingsAction, SettingsEnvironment\r\n    > { state, action, environment in\r\n      switch action {\r\n      ...\r\n      case .form:\r\n        return .none\r\n      }\r\n    }\r\n    . form(action: /SettingsAction.form)\r\n\r\n    TextField(\r\n      \"Display name\",\r\n      text: viewStore.binding(keyPath: \\.displayName, send: SettingsAction.form)\r\n    )\r\n\r\n    // after:\r\n\r\n    enum SettingsAction {\r\n      case binding(BindingAction<SettingsState>)\r\n    }\r\n\r\n    let settingsReducer = Reducer<\r\n      SettingsState, SettingsAction, SettingsEnvironment\r\n    > { state, action, environment in\r\n      switch action {\r\n      ...\r\n      case .binding:\r\n        return .none\r\n      }\r\n    }\r\n    .binding(action: /SettingsAction.binding)\r\n\r\n    TextField(\r\n      \"Display name\",\r\n      text: viewStore.binding(keyPath: \\.displayName, send: SettingsAction.binding)\r\n    )\r\n    ```",
    "createdAt" : "2021-02-02T07:21:03+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTM3NDI1Nzc2",
    "owner" : "pointfreeco",
    "publishedAt" : "2021-02-06T04:09:45+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.14.0",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.14.0",
    "version" : "0.14.0"
  },
  {
    "body" : "- Added: A new `ViewStore.send(_:animation:)` helper for SwiftUI, which wraps an action in a `withAnimation` block.\r\n- Added: TestStore steps can now group a series of steps together into a single `.sequence` step.",
    "createdAt" : "2021-02-23T05:34:37+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTM4NDQ4NzU0",
    "owner" : "pointfreeco",
    "publishedAt" : "2021-02-23T05:39:38+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.15.0",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.15.0",
    "version" : "0.15.0"
  },
  {
    "body" : "- Changed: `Reducer.optional` reducers no longer trigger `assertionFailure`s. Instead, by default they set a _breakpoint_ that can be resumed in `DEBUG` mode. This breakpoint can be disabled with an argument. `RELEASE` builds remain unaffected. (#296)\r\n- Changed: Test Stores now collocate unfinished effect failures with the originating action that kicked each effect off. These failures were previously aggregated to the unrelated line in which `store.assert` was called. (#413)\r\n- Infrastructure: Improved documentation (thanks @Steven0351).",
    "createdAt" : "2021-03-07T02:16:32+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTM5NDUwNjgw",
    "owner" : "pointfreeco",
    "publishedAt" : "2021-03-09T01:12:39+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.16.0",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.16.0",
    "version" : "0.16.0"
  },
  {
    "body" : "- Improved: test stores can now call throwing code in assert step closures.\r\n- Fixed: stores now buffer actions that are sent recursively.\r\n- Infrastructure: fixed Tic Tac Toe demo bug.\r\n- Infrastructure: fixed LocalizedStringKey test (thanks @mluisbrown).\r\n- Removed ComposableCoreLocation and ComposableCoreMotion. They now live at https://github.com/pointfreeco/composable-core-location and https://github.com/pointfreeco/composable-core-motion",
    "createdAt" : "2020-10-30T05:12:45+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTMzMjQwMDI4",
    "owner" : "pointfreeco",
    "publishedAt" : "2020-10-30T05:18:05+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.9.0",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.9.0",
    "version" : "0.9.0"
  },
  {
    "body" : "- Added: a new overload of `Reducer.pullback` for working with enum-based state. It uses a case path instead of a writable key path for extracting and embedding state for a particular enum case.\r\n- Added: a new `SwitchStore` view for converting stores on enum state into stores on individual enum cases (thanks @LukeRedpath for sketching out the original implementation).\r\n- Changed: `Effect.timer` now calls `cancelInFlight: true` under the hood to automatically cancel any in-flight timers with the same cancellable id (thanks @dannyhertz). If you rely on the existing behavior, which allows for timers to interleave and stack on one another, this is a breaking change and you must manually create your timers using `Publishers.Timer` instead before upgrading.\r\n- Fixed: `ForEachStore` has been optimized and a crash related to removing rows has been fixed.\r\n- Fixed: documentation cleanup.\r\n- Infrastructure: modernized example/demo code, along with assorted fixes (thanks @yimajo, @filblue).",
    "createdAt" : "2021-06-14T23:53:01+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTQ0NTc4OTUx",
    "owner" : "pointfreeco",
    "publishedAt" : "2021-06-14T23:57:17+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.19.0",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.19.0",
    "version" : "0.19.0"
  },
  {
    "body" : "- Added: `Effect.deferred()`, for delaying the execution of an effect by a given time (compare to `Publisher.delay()`, which delays merely the _delivery_ of some work that has already been performed). Thanks, @wendyliga.\r\n- Updated: `SwitchStore` now supports up to 9 `CaseLet` views.\r\n- Performance improvement/fix: the number of times `Store.scope`'s state transform function has been minimized. Previously it was evaluated an extra time, multiplied by downstream scopes.\r\n- Performance improvement/fix: the number of times `ViewStore`'s duplicate check has been reduced.\r\n- Performance improvement/fix: a store publisher will only emit a single state change per synchronous `Store.send` and asynchronous effect received. This means synchronous effects (returned immediately from a reducer via `Effect.init(value:)`) will no longer result in extra publisher emissions. This is a breaking change if your application previously depended on each of these emissions. Workaround: use `Publisher.receive(on:)` to schedule these effects on the next run loop tick.\r\n- Infrastructure: cleaned up demo apps and documentation; added an Indonesian translation of the README (thanks @wendyliga).",
    "createdAt" : "2021-06-28T20:49:37+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTQ1MzUxNjUz",
    "owner" : "pointfreeco",
    "publishedAt" : "2021-06-28T20:58:39+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.20.0",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.20.0",
    "version" : "0.20.0"
  },
  {
    "body" : "- Changed: the Composable Architecture now depends on [Identified Collections](https://github.com/pointfreeco/swift-identified-collections) for `IdentifiedArray`, which has been rewritten for correctness and performance. There are some breaking changes, which are documented in [its release](https://github.com/pointfreeco/swift-identified-collections/releases/0.1.0).\r\n- Changed: support for Swift 5.1 and 5.2 has been dropped. Please use Swift 5.3 (Xcode 12) or later, or this is of course a breaking change, and you must lock your application to swift-composable-architecture [0.20.0](https://github.com/pointfreeco/swift-composable-architecture/releases/0.20.0) or earlier.\r\n- Changed: `Reducer.binding` now takes an extract function, not a case path. Case path expressions can still be used, meaning existing uses should generally continue to compile. If you were passing a concrete `CasePath` value, this is a breaking change, and you can pass along the `CasePath.extract(from:)` method, instead.\r\n- Changed: `TestStore` has relaxed its `Equatable` constraint on `Action`. It is only required for when `TestStore.receive`s actions from effects.\r\n- Performance improved: view stores now perform the minimum number of equality checks necessary (thanks @iampatbrown).\r\n- Fixed: `ViewStore.publisher` now emits the current store state, and not the previous state (thanks @maximkrouk, @iampatbrown).\r\n- Infrastructure: cleaned up recursive case study, web socket case study; added benchmarking target.",
    "createdAt" : "2021-07-12T11:58:12+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTQ2MDMyMjA0",
    "owner" : "pointfreeco",
    "publishedAt" : "2021-07-12T12:10:29+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.21.0",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.21.0",
    "version" : "0.21.0"
  },
  {
    "body" : "- Added: `Effect.throttle` can throttle how often its associated action is fed back into the reducer (thanks @kerryknight).\r\n- Regression fixed: A change in 0.21.0 that prevented store publishers from emitting actions if their view stores were deinitialized. This mainly affected UIKit apps.\r\n- Regression fixed: A change in 0.20.0 that could leave an action buffered in the store and emit late (thanks @heyltsjay).",
    "createdAt" : "2021-07-17T04:20:11+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTQ2MzQwMzAz",
    "owner" : "pointfreeco",
    "publishedAt" : "2021-07-17T04:26:42+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.22.0",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.22.0",
    "version" : "0.22.0"
  },
  {
    "body" : "- Added: support for concurrency-powered APIs like SwiftUI's `View.refreshable()` via `ViewStore.send(_:while:)` and `ViewStore.suspend(while:)`, which will suspend the current task while a predicate is true.\r\n- Bug fixed: `IfLetStore` should never re-render its initial state when its state goes `nil` (thanks @ollitapa).\r\n- Bug fixed: `Effect.throttle` is now synchronized, eliminating potential data races (thanks @p4checo).\r\n- Infrastructure: documentation cleanup (thanks @konomae). ",
    "createdAt" : "2021-07-27T04:16:30+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTQ2NzkwMjUz",
    "owner" : "pointfreeco",
    "publishedAt" : "2021-07-27T04:27:53+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.23.0",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.23.0",
    "version" : "0.23.0"
  },
  {
    "body" : "- Added: `Effect.task`, for wrapping async/await work in an effect.\r\n\r\n    ```swift\r\n    Effect.task {\r\n      guard\r\n        case let .some((data, _)) = try? await URLSession.shared\r\n          .data(from: .init(string: \"http://numbersapi.com/42\")!)\r\n      else { return \"Could not load\" }\r\n\r\n      return String(decoding: data, as: UTF8.self)\r\n    }\r\n    ```\r\n\r\n- Added: an `Effect.catchToEffect` overload that takes a transform function, avoiding the need for an extra `map` (thanks @eimantas).\r\n    ```swift\r\n    // before:\r\n    return environment.apiClient.fetch()\r\n      .catchToEffect()\r\n      .map(MyAction.apiResponse)\r\n\r\n    // after:\r\n    return environment.apiClient.fetch()\r\n      .catchToEffect(MyAction.apiResponse)\r\n    ```\r\n\r\n- Added: `Effect.cancel(ids:)`, which can cancel multiple effects at once by taking multiple cancel identifiers.\r\n    ```swift\r\n    return .cancel(ids: OnAppearId(), ApiRequestId())\r\n    ```\r\n\r\n- Added: Alert and action sheet helpers (`AlertState` and `ActionSheetState`) can now be configured with _animated_ button actions (thanks @fonkadelic).\r\n\r\n    Support comes with a slightly new API and a deprecation (read: breaking change) of the old API:\r\n\r\n    ```swift\r\n    // before:\r\n    primaryButton: .destructive(TextState(\"Delete\"), send: .deleteButtonTapped),\r\n\r\n    // after:\r\n    primaryButton: .destructive(TextState(\"Delete\"), action: .send(.deleteButtonTapped)),\r\n    ```\r\n\r\n    The newer API comes with an overloaded `animation` parameter, for specifying an animation for the action when sent back to the reducer:\r\n\r\n    ```swift\r\n    primaryButton: .destructive(\r\n      TextState(\"Delete\"),\r\n      action: .send(.deleteButtonTapped, animation: .default)\r\n    ),\r\n    ```\r\n\r\n- Added: Alert and action sheet helpers for UIKit (thanks @andreyz).\r\n\r\n    ```swift\r\n    class MyViewController: UIViewController {\r\n      let store: Store<MyState, MyAction>\r\n      let viewStore: ViewStore<MyState, MyAction>\r\n      private var cancellables: Set<AnyCancellable> = []\r\n      private weak var alertController: UIAlertController?\r\n      ...\r\n      func viewDidLoad() {\r\n        ...\r\n        self.viewStore.publisher\r\n          .alert\r\n          .sink { [weak self] alert in\r\n            guard let self = self else { return }\r\n            if let alert = alert {\r\n              let alertController = UIAlertController(state: alert, send: {\r\n                self.viewStore.send(.settings($0))\r\n              })\r\n              self.present(alertController, animated: true, completion: nil)\r\n              self.alertController = alertController\r\n            } else {\r\n              self.alertController?.dismiss(animated: true, completion: nil)\r\n              self.alertController = nil\r\n            }\r\n          }\r\n          .store(in: &cancellables)\r\n      }\r\n    }\r\n    ```\r\n\r\n- Updated: `WithViewStore.debug()` now prints a diff of view state whenever its body is evaluated. This can be used to determine what change to what portion of sub-state was responsible for the evaluation.\r\n\r\n- Updated: code that prints file debug information uses `#fileID` now instead of `#file` to reduce debug noise.\r\n\r\n- Fixed: `Effect.throttle` should now clean up old values being debounced in its `latest: false` strategy, preventing the occasional old value from emitting (thanks @p4checo).\r\n\r\n- Fixed: `Effect.debounce` should now always deliver on the scheduler it is provided.\r\n\r\n- Fixed: A minimum deployment target of macOS 11 should now compile without error (thanks @aroben).\r\n\r\n- Infrastructure: Improved `ViewStore.publisher` documentation.\r\n\r\n- Infrastructure: Added an Italian translation of the README (thanks @Bellaposa).\r\n\r\n- Infrastructure: Added a SwiftUI case study for focus state.\r\n\r\n- Infrastructure: The Tic-Tac-Toe demo has been modernized. It now uses SPM for modularization instead of frameworks.\r\n\r\n- Infrastructure: Some cleanup and modernization of demo code.",
    "createdAt" : "2021-08-16T22:32:58+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTQ3OTExODc2",
    "owner" : "pointfreeco",
    "publishedAt" : "2021-08-16T22:56:50+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.24.0",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.24.0",
    "version" : "0.24.0"
  },
  {
    "body" : "- Added: the Composable Architecture now uses [Custom Dump](https://github.com/pointfreeco/swift-custom-dump) for its debugging and testing tools. This library improves upon the original debugging/diffing tools that came with earlier versions of the Composable Architecture by collapsing unchanged parts of the diff, and more.\r\n- Added: a French translation of the README (thanks @nikitamounier).\r\n- Changed: `ViewStore.suspend(while:)` now uses Combine's async/await tools under the hood (thanks @iampatbrown for further cleanup).\r\n- Changed: `Reducer.optional` and other methods that took `file` and `line` parameters previously took them as unnamed arguments. They have been updated to take `file` and `line` as named arguments.\r\n- Infrastructure: refactored Tic-Tac-Toe to better model the board's domain with a nested `Three` data type.",
    "createdAt" : "2021-08-23T11:45:27+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTQ4MjUzMjc2",
    "owner" : "pointfreeco",
    "publishedAt" : "2021-08-23T11:50:53+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.25.0",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.25.0",
    "version" : "0.25.0"
  },
  {
    "body" : "- Fixed: a regression introduced in [0.25.0](https://github.com/pointfreeco/swift-composable-architecture/releases/0.25.0), where `TestStore` failures were no longer printed in a proportional diff format, has been addressed.\r\n- Fixed: removed a redundant conformance (thanks @aroben).\r\n- Infrastructure: the Composable Architecture's test suite now uses `XCTAssertNoDifference` instead of `XCTAssertEqual`.",
    "createdAt" : "2021-08-25T06:18:09+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTQ4Mzg0NDYx",
    "owner" : "pointfreeco",
    "publishedAt" : "2021-08-25T06:24:10+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.25.1",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.25.1",
    "version" : "0.25.1"
  },
  {
    "body" : "- Added: form binding helpers have been made safer and more concise with the introduction of `BindableState` and `BindableAction` (thanks @junebash for first bringing up the idea of `BindableAction`). The existing binding helpers have been deprecated. Note: this feature depends on Xcode 12.5 or greater to avoid a crash produced by earlier versions of the compiler, which was fixed in 5.4. For more information, see the documentation for `BindableState`.\r\n- Fixed: `Store` documentation had some typos (thanks @kgrigsby59).\r\n- Cleanup: `Effect.future`'s has implementation has been simplified (thanks @iampatbrown).\r\n- Infrastructure: cleaned up how dependencies are handled in the reusable download component case study.\r\n- Infrastructure: added cancellation to the \"loadable\" case studies (thanks @filblue).",
    "createdAt" : "2021-09-07T00:19:19+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTQ5MDc5Nzg0",
    "owner" : "pointfreeco",
    "publishedAt" : "2021-09-07T00:20:02+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.26.0",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.26.0",
    "version" : "0.26.0"
  },
  {
    "body" : "- Added: `Store` threading issues are now surfaced with new debug code: if you send an action or an effect is received on the wrong thread, a breakpoint will be caught and message will be printed to the console (thanks @IanKeen).\r\n- Added: `BindingAction` now conditionally conforms to `CustomDebugStringConvertible` (thanks @lukeredpath).\r\n- Fixed: deprecation messages for older binding helpers have been made more descriptive.\r\n- Infrastructure: added documentation for `BindingAction.pullback`.",
    "createdAt" : "2021-09-08T01:15:23+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTQ5MTQyNDk0",
    "owner" : "pointfreeco",
    "publishedAt" : "2021-09-08T01:30:13+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.27.0",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.27.0",
    "version" : "0.27.0"
  },
  {
    "body" : "- Added: `Effect.failing`, an effect that will cause an XCTest assertion failure if it is subscribed to.\r\n- Added: A new `ViewStore` convenience initializer for `Void` state (thanks @siejkowski).\r\n- Changed: The `fireAndForget()` method is now more permissive. It will now ignore all output and failure for you before upcasting the output and failure types to any type.\r\n- Changed: `TextState` now has a custom debug output format for easier debugging.\r\n- Infrastructure: various documentation improvements and fixes for TicTacToe.",
    "createdAt" : "2021-03-23T02:54:52+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTQwMTc5MDA5",
    "owner" : "pointfreeco",
    "publishedAt" : "2021-03-23T03:01:33+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.17.0",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.17.0",
    "version" : "0.17.0"
  },
  {
    "body" : "- Updated: `IfLetStore` and `ForEachStore` closures are now view builders.\r\n- Changed: `IfLetStore`'s optional `else` branch now takes a view builder closure. The overload that takes an `else` view directly has been deprecated.\r\n- Fixed: A bug in iOS 13's Combine can cause uses of the `Fail` publisher to crash. We have updated `Effect.init(error:)` to not use `Fail` under the hood and avoid this crash.\r\n- Fixed: A crash related to behavior in SwiftUI's `ForEach` has been fixed, where the `IdentifiedArray` version of `ForEachStore` would unsafely unwrap elements after removal.\r\n- Improved: documentation for `Store.ifLet` (thanks @mluisbrown).\r\n- Infrastructure: improve UIKit demo support of dark mode (thanks @hungtruong).",
    "createdAt" : "2021-04-21T00:36:14+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTQxNzI4MTUy",
    "owner" : "pointfreeco",
    "publishedAt" : "2021-04-21T02:08:41+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.18.0",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.18.0",
    "version" : "0.18.0"
  },
  {
    "body" : "  - Added: `Store.unchecked` creates a store that opts out of main thread checks. Use this function to create background stores that are not intended to drive UI.\r\n  - Changed: Dynamic member lookup on view stores to bindable state has been deprecated in favor of a new `ViewStore.binding` overload that takes a key path to bindable state. _I.e._, `viewStore.$field` changes to `viewStore.binding(\\.$field)`.\r\n\r\n    The dynamic member lookup syntax introduced in [0.26.0](https://github.com/pointfreeco/swift-composable-architecture/releases/0.26.0) unfortunately broke support for reducers layering logic onto mutations of nested fields of bindable state via pattern matching, _e.g._:\r\n\r\n    ```swift\r\n    switch action {\r\n      case .binding(\\.$userSettings.displayName):\r\n    ```\r\n\r\n    To restore this functionality, we must work directly with the equivalent nested key path in the view, instead.\r\n\r\n    ```swift\r\n    // before:\r\n    TextField(\"Display name\", text: viewStore.$userSettings.displayName)\r\n\r\n    // after:\r\n    TextField(\"Display name\", text: viewStore.binding(\\.$userSettings.displayName))\r\n    ```\r\n\r\n    For more information on this change, see https://github.com/pointfreeco/swift-composable-architecture/pull/810.\r\n\r\n  - Changed: The `Store` now comes with a main thread check by default. If a store is created or interacted with off the main thread, including sending actions, scoping, or receiving/completing effects off the main thread, a breakpoint will catch in debug builds. If you are using a store on a non-main thread, use the new `Store.unchecked` static function to construct a store instead.\r\n  - Changed: Alert APIs have been updated to call the new SwiftUI APIs under the hood when available. As such, the following changes have been made:\r\n      - `AlertState` has introduced a new initializer that takes any number of buttons.\r\n      - `ActionSheetState` has been renamed to `ConfirmationDialogState`.\r\n      - `ConfirmationDialogState` has introduced a new initializer that exposes `titleVisibility`.\r\n      - `View.actionSheet` has been renamed to `View.confirmationDialog`.\r\n  - Changed: Animated view store bindings now match the behavior of vanilla SwiftUI (thanks @iampatbrown).\r\n  - Changed: store publisher subscriptions are now deterministic (thanks @iampatbrown).\r\n\r\n     This change mainly affects UIKit-based apps that call `viewStore.publisher.sink`. The vanilla Combine behavior of the store's current value subject is non-deterministic. That is multiple subscriptions to a single subject do not receive output in a deterministic order. Stores are now driven by a custom publisher, instead, that emits values to subscribers in a deterministic way.\r\n\r\n    In previous versions of the Composable Architecture, view store binding animations could not be overridden with `withAnimation` blocks, which is the opposite behavior of bindings derived from `@State`, `@ObservedObject`, etc.\r\n  - Cleaned up: The `Store.ifLet` UIKit helper has been simplified (thanks @iampatbrown).\r\n  - Fixed: Xcode 12.4 support.\r\n  - Deprecated: The `Store.publisherScope` method has been deprecated, as it was only used to drive the previous implementation of `Store.ifLet`. If you depend on this method, please [let us know how](https://github.com/pointfreeco/swift-composable-architecture/discussions/new).\r\n  - Removed: Deprecations introduced before swift-composable-architecture [0.17.0](https://github.com/pointfreeco/swift-composable-architecture/releases/0.17.0) have been removed. If you are upgrading from an earlier version, do so incrementally to see these notices and fix-its.\r\n  - Infrastructure: cleaned up speech recognition case study.",
    "createdAt" : "2021-09-21T00:19:03+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "RE_kwDOD48kk84C-djN",
    "owner" : "pointfreeco",
    "publishedAt" : "2021-09-21T02:32:11+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.28.0",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.28.0",
    "version" : "0.28.0"
  },
  {
    "body" : "- Changed: `Effect.failing` is now available outside of debug builds (thanks @andreyz).\r\n- Fixed: `BindableState`'s codable conformances should now use any coding strategies for single values, _e.g._ `JSONEncoder`'s data and date-decoding strategies.\r\n- Fixed: Xcode 13 RC will now build for macOS <12.\r\n- Improved: documentation around `BindingAction.pullback`.\r\n- Improved: breakpoint messaging for when `Store` detects `send` was called on a thread other than the thread the store was created on.\r\n- Infrastructure: alert and action sheet case study cleanup (thanks @filblue).",
    "createdAt" : "2021-09-15T10:11:30+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "RE_kwDOD48kk84C9Fe7",
    "owner" : "pointfreeco",
    "publishedAt" : "2021-09-15T10:18:53+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.27.1",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.27.1",
    "version" : "0.27.1"
  },
  {
    "body" : "- Fixed: The store's main thread checker now uses `Thread.isMainThread` instead of dispatch specific keys for its thread checking mechanism. This should reduce the chance of the thread checker getting caught when a non-main queue runs on the main thread.",
    "createdAt" : "2021-09-23T23:25:08+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "RE_kwDOD48kk84C_RB4",
    "owner" : "pointfreeco",
    "publishedAt" : "2021-09-23T23:27:44+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.28.1",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.28.1",
    "version" : "0.28.1"
  },
  {
    "body" : "- Added: Accessibility attribute support for `TextState` (thanks @ferologics).\r\n- Added: An overload of `CaseLet` without an `action` transformation has been added (thanks @ferologics).\r\n- Fixed: `WithViewStore.debug` no longer emits console output in the wrong order.\r\n- Fixed: `AlertState.ButtonAction.type` is public again (thanks @Thomvis).\r\n- Infrastructure: demo app modernization and cleanup (thanks @iampatbrown, @kgrigsby59).\r\n- Infrastructure: documentation fixes (thanks @malonehedges).\r\n- Infrastructure: CI now runs on Xcode 13.1 (thanks @ferologics).",
    "createdAt" : "2021-12-04T06:04:01+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "RE_kwDOD48kk84DQULI",
    "owner" : "pointfreeco",
    "publishedAt" : "2021-12-04T06:10:41+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.29.0",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.29.0",
    "version" : "0.29.0"
  },
  {
    "body" : "- Added: support for concurrency back-deployment!\r\n- Deprecated: `TestStore.assert` methods have been deprecated (use `TestStore.send` and `TestStore.receive` directly, instead).\r\n- Infrastructure: fixed binding SwiftUI case study (thanks @onevcat), modernize demos.",
    "createdAt" : "2021-12-14T04:03:15+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "RE_kwDOD48kk84DSn1u",
    "owner" : "pointfreeco",
    "publishedAt" : "2021-12-14T04:08:10+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.30.0",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.30.0",
    "version" : "0.30.0"
  },
  {
    "body" : "- Changed: Upstream dependency requirements have been bumped to bring in bug fixes.\r\n- Changed: Concurrency tools now require Xcode 13.2 or greater.\r\n- Fixed: Worked around an iOS 14 SwiftUI availability check crash affecting the `.alert` and `.confirmationDialog` view modifiers.\r\n- Infrastructure: Simplified test store internals, fixed demo deprecation warnings",
    "createdAt" : "2021-12-21T06:38:09+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "RE_kwDOD48kk84DUflo",
    "owner" : "pointfreeco",
    "publishedAt" : "2021-12-21T06:42:09+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.31.0",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.31.0",
    "version" : "0.31.0"
  },
  {
    "body" : "- Changed: operators like `Reducer.optional()` and `Reducer.forEach()` no longer halt with a breakpoint. Instead, issues are logged via Xcode's runtime warning system.",
    "createdAt" : "2022-01-04T01:55:13+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "RE_kwDOD48kk84DW2qP",
    "owner" : "pointfreeco",
    "publishedAt" : "2022-01-04T01:57:45+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.32.0",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.32.0",
    "version" : "0.32.0"
  },
  {
    "body" : "- Bug fixed: the new runtime warning system no longer crash iOS 13 debug builds (thanks @mcfans).\r\n- Infrastructure: modernized demo apps by removing scene delegates and unneeded Info.plists.",
    "createdAt" : "2022-01-12T00:04:27+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "RE_kwDOD48kk84DY1CG",
    "owner" : "pointfreeco",
    "publishedAt" : "2022-01-12T00:35:42+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.33.1",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.33.1",
    "version" : "0.33.1"
  },
  {
    "body" : "- Bug fixed: nested calls to `Effect.cancellable` no longer prevent certain outputs from being emitted (thanks @iampatbrown).\r\n\r\n    Breaking change: a consequence of this fix is that `Effect.timer`s running on an immediate scheduler will now immediately emit its first output in tests. If a test fails after upgrading to this version, you may need to assert against the output of such an effect.",
    "createdAt" : "2022-01-08T06:10:42+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "RE_kwDOD48kk84DYEOB",
    "owner" : "pointfreeco",
    "publishedAt" : "2022-01-08T06:13:09+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.33.0",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.33.0",
    "version" : "0.33.0"
  },
  {
    "body" : "- Breaking change: test stores will now catch assertions that do not change state (thanks @rcarver).\r\n\r\n    ```swift\r\n    // Before:\r\n    store.send(.actionThatDoesntChangeState) { $0.state = .sameStateAsBefore }\r\n    // ✅\r\n\r\n    // After:\r\n    store.send(.actionThatDoesntChangeState) { $0.state = .sameStateAsBefore }\r\n    // ❌ Expected to modify the expected state, but no change occurred.\r\n    ```\r\n\r\n    To fix, remove the trailing closure assertion to let the test store know you don't expect its state to change:\r\n\r\n    ```swift\r\n    store.send(.actionThatDoesntChangeState)\r\n    // ✅\r\n    ```\r\n\r\n- Added: Effect cancellation endpoints can now take types as identifiers, a slightly simpler alternative to safely defining and instantiating a hashable type:\r\n\r\n    ```swift\r\n    // Before:\r\n    struct CancelId: Hashable {}\r\n    return .cancel(id: CancelId())\r\n\r\n    // After:\r\n    enum CancelId {}\r\n    return .cancel(id: CancelId.self)\r\n    ```\r\n- Added: A new overload of `eraseToEffect` that takes a transform function. This provides symmetry to `catchToEffect` and can help streamline effect work in the reducer (thanks @klundberg).\r\n    ```swift\r\n    // Before:\r\n    return environment.doSomething()\r\n      .map(Action.case)\r\n      .eraseToEffect()\r\n\r\n    // After:\r\n    return environment.doSomething()\r\n      .eraseToEffect(Action.case)\r\n    ```\r\n- Added: A new overload of `Effect.fireAndForget` that takes an async, throwing function.\r\n    ```swift\r\n    return .fireAndForget {\r\n      try await environment.analytics(event: .tappedProfile)\r\n    }\r\n    ```\r\n- Changed: The synchronous version of `Effect.fireAndForget` can now `throw`, which will simply terminate the effect's execution early if an error is thrown.\r\n- Changed: Runtime warnings should now show up closer to the source of the warning (thanks @iampatbrown).\r\n- Changed: When multiple `TestStore` failure messages stack, they should print in a better, more readable order.\r\n- Changed: Case Paths has been pinned to a newer version (thanks @nsillik).\r\n- Fixed: A bug in which the array-based overload of `Effect.cancel(ids:)` was not being favored over the variadic overload would treat the entire array as the cancel token and not each individual item has been fixed (thanks @iampatbrown).\r\n- Fixed: A few small warnings that show up in Swift 5.7 have been fixed.\r\n- Performance: Effect cancellation lookup has been improved for type-safe identifiers.\r\n- Infrastructure: Fixed SPI's config file (thanks @finestructure).\r\n- Infrastructure: The long-living effect SwiftUI case study has been modernized and simplified.",
    "createdAt" : "2022-05-17T01:40:28+09:00",
    "fetchedFromAPIAt" : "2022-05-17T09:46:29+09:00",
    "id" : "RE_kwDOD48kk84D_jO0",
    "owner" : "pointfreeco",
    "publishedAt" : "2022-05-17T01:41:17+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.35.0",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.35.0",
    "version" : "0.35.0"
  },
  {
    "body" : "- Changed: An effect is now not considered \"in-flight\" till it is kicked off. This fixes a potential behavior where marking a timer effect cancellable (which is already cancellable by default) could prevent the effect from running.\r\n- Changed: Runtime warnings now emit XCTest failures, as well, making it easier to catch common issues in your tests.\r\n- Optimized: In-flight effects are now cancelled inline (thanks @iampatbrown).\r\n- Fixed: `Effect.cancel(ids:)` now properly routes to the sequence overload (thanks @iampatbrown).\r\n- Fixed: `WithViewStore` no longer breaks in certain contexts, _e.g._ when placed inside a `GeometryReader` (thanks @tgrapperon).\r\n- Infrastructure: Added Arabic translation to README (thanks @NorhanBoghdadi).\r\n- Infrastructure: Added Simplified Chinese translation to README (thanks @sh3l6orrr).\r\n- Infrastructure: Cleaned up case studies (thanks @rono23).\r\n- Infrastructure: Fixed and added unit tests to UIKit list case study (thanks @bjford).\r\n- Infrastructure: Fixed a few missing asset warnings in demo applications (thanks @tgrapperon).",
    "createdAt" : "2022-03-16T05:21:13+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "RE_kwDOD48kk84DsPVO",
    "owner" : "pointfreeco",
    "publishedAt" : "2022-03-16T05:32:15+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.34.0",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.34.0",
    "version" : "0.34.0"
  },
  {
    "body" : "- Added: `Effect.throttle` overloads that take `Any.Type` (thanks @elkraneo).\r\n- Added: `TestStore.state`, which reflects the state of the store between assertions. This property can be used to further probe test store state over time and make additional assertions.\r\n- Updated: `WithViewStore` can be in more places, like `@CommandsBuilder` (thanks @tgrapperon).\r\n- Fixed: `Effect.task` modifiers now deliver output and completion on the main actor, avoiding potential data races.\r\n- Documentation: Added support for [SPI documentation](https://blog.swiftpackageindex.com/posts/auto-generating-auto-hosting-and-auto-updating-docc-documentation/) (thanks @finestructure).\r\n- Infrastructure: typo fixes (thanks @konomae) and demo app cleanup.",
    "createdAt" : "2022-06-04T07:40:51+09:00",
    "fetchedFromAPIAt" : "2022-06-05T09:52:00+09:00",
    "id" : "RE_kwDOD48kk84EFuY_",
    "owner" : "pointfreeco",
    "publishedAt" : "2022-06-04T10:49:50+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.36.0",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.36.0",
    "version" : "0.36.0"
  },
  {
    "body" : "- Added: `Effect.animation()`, which adds animation to an effect without the need of a scheduler.\r\n- Changed: `TestStore` state modification failures are less noisy.\r\n- Renamed: `ViewStore.suspend(while:)` has been renamed to `ViewStore.yield(while:)`.\r\n- Bug fixed: A bug was introduced to the deprecated `TestStore.assert` APIs in 0.36.0, which caused test failures when a sent/received test action left state unchanged. This has been fixed.\r\n- Infrastructure: Worked around a SwiftUI bug/warning in the Case Studies demo; cleaned up some of the library's generic signatures.",
    "createdAt" : "2022-06-20T22:36:47+09:00",
    "fetchedFromAPIAt" : "2022-06-21T09:49:46+09:00",
    "id" : "RE_kwDOD48kk84EKiHo",
    "owner" : "pointfreeco",
    "publishedAt" : "2022-06-21T02:56:27+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.37.0",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.37.0",
    "version" : "0.37.0"
  },
  {
    "body" : "- Added: A new runtime warning for when a `BindingAction` is sent to the store but `Reducer.binding()` wasn't applied to the reducer. This should help diagnose missing integrations faster.\r\n- Fixed: A regression for `TestStore.send` and `receive` was introduced in 0.37.0 that failed to perform assertions against state when the trailing closure was omitted. This has been fixed (thanks @umbertovolta).",
    "createdAt" : "2022-06-24T23:06:50+09:00",
    "fetchedFromAPIAt" : "2022-06-25T09:49:30+09:00",
    "id" : "RE_kwDOD48kk84EM6IA",
    "owner" : "pointfreeco",
    "publishedAt" : "2022-06-24T23:12:39+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.38.0",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.38.0",
    "version" : "0.38.0"
  },
  {
    "body" : "- Fixed: 0.38.0 introduced a regression that could cause test stores that receive `BindingAction`s from effects to cause test failures. This has been fixed.",
    "createdAt" : "2022-06-25T06:43:50+09:00",
    "fetchedFromAPIAt" : "2022-06-25T09:49:30+09:00",
    "id" : "RE_kwDOD48kk84ENE5J",
    "owner" : "pointfreeco",
    "publishedAt" : "2022-06-25T06:46:42+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.38.1",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.38.1",
    "version" : "0.38.1"
  },
  {
    "body" : "- Changed: Bumped dependencies to include Combine Schedulers 0.6.0 and XCTest Dynamic Overlay 0.3.0, which includes the renamed `UnimplementedScheduler`, and `XCTUnimplemented`, respectively.\r\n- Infrastructure: Cleaned up and simplified some demo apps and case studies.",
    "createdAt" : "2022-06-30T22:03:34+09:00",
    "fetchedFromAPIAt" : "2022-07-01T09:55:47+09:00",
    "id" : "RE_kwDOD48kk84EOxh1",
    "owner" : "pointfreeco",
    "publishedAt" : "2022-06-30T23:05:29+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.38.2",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.38.2",
    "version" : "0.38.2"
  },
  {
    "body" : "  * Deprecated: `Store.unchecked` has been deprecated. As the Composable Architecture migrates to modern Swift concurrency tools, its async endpoints must run on a consistent actor to ensure safety from data races. Because the primary use case of the Composable Architecture is driving UIs, we have chosen the `@MainActor` for these endpoints, which makes them unsafe to call from unchecked stores. We believe the number of unchecked stores out in the wild is small, but in the meantime are soliciting feedback from the community with this deprecation warning.\r\n\r\n    See #1206 for more information and migration paths.",
    "createdAt" : "2022-07-13T23:17:27+09:00",
    "fetchedFromAPIAt" : "2022-07-16T09:53:57+09:00",
    "id" : "RE_kwDOD48kk84ETEbR",
    "owner" : "pointfreeco",
    "publishedAt" : "2022-07-16T01:24:19+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.38.3",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.38.3",
    "version" : "0.38.3"
  },
  {
    "body" : "- Added: This release includes many new tools to better support Swift concurrency. See [this discussion](https://github.com/pointfreeco/swift-composable-architecture/discussions/1186) and [this pull request](https://github.com/pointfreeco/swift-composable-architecture/pull/1189) for more information.\r\n\r\n    > **Note**: Many of the old Combine-centric interfaces have been [soft-deprecated](https://pointfreeco.github.io/swift-composable-architecture/0.39.0/documentation/composablearchitecture/effectdeprecations). Prefer using `Effect.task`, `Effect.run`, and `Effect.fireAndForget` as described in [the documentation](https://pointfreeco.github.io/swift-composable-architecture/0.39.0/documentation/composablearchitecture/effect).\r\n\r\n- Infrastructure: README, documentation, and demo app fixes (thanks @filblue, @Jager-yoo, @konomae, @yimajo).",
    "createdAt" : "2022-08-08T14:04:16+09:00",
    "fetchedFromAPIAt" : "2022-08-10T09:56:36+09:00",
    "id" : "RE_kwDOD48kk84EZuw4",
    "owner" : "pointfreeco",
    "publishedAt" : "2022-08-08T14:04:27+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.39.0",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.39.0",
    "version" : "0.39.0"
  },
  {
    "body" : "- Fixed: Pinned combine-schedulers to [0.7.3](https://github.com/pointfreeco/combine-schedulers/releases/0.7.3), which removes an errant `@_exported import Foundation`. This change _may_ be breaking and require you to add `import Foundation` in your code.\r\n- Changed: Updated `Global`/`Local` generics to more relative `Parent`/`Child`, or more domain-specific names.\r\n- Infrastructure: Added Spanish language translation of the README (thanks @pitt500).\r\n- Infrastructure: README and documentation improvements (thanks @ole, @SevioCorrea, @kalupas226)\r\n- Infrastructure: Demo cleanup.\r\n- Infrastructure: Made test classes `final` (thanks @Jager-yoo).",
    "createdAt" : "2022-08-26T00:58:49+09:00",
    "fetchedFromAPIAt" : "2022-08-26T09:57:20+09:00",
    "id" : "RE_kwDOD48kk84EffVB",
    "owner" : "pointfreeco",
    "publishedAt" : "2022-08-26T01:05:36+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.39.1",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.39.1",
    "version" : "0.39.1"
  },
  {
    "body" : "This release brings many performance improvements to the library. See our [blog post](https://www.pointfree.co/blog/posts/80-improving-composable-architecture-performance) for information about those changes.\r\n\r\n- Added: `WithViewStore(_:observe:…)`, a new initializer that makes state observation explicit. We hope these initializers will help users avoid performance pitfalls and identify areas of their application where performance can be improved. The existing initializers have been soft-deprecated and will surface warnings in a future release.\r\n- Performance: `Effect` performance has been improved, especially with regard to merging effects (a common operation that occurs when reducers are combined), and async effects (which previously often incurred overhead from Combine).\r\n- Performance: `Store.scope` performance has been improved for nested scopes, which no longer incur a penalty for each layer of scoping (thanks @iampatbrown).\r\n- Performance: `WithViewStore` now uses a state object under the hood, which should tie the lifecycle of a view store to a view (thanks @tgrapperon).\r\n- Performance: `ForEachStore` performance has been improved for state updates in which element state has changed but no elements were added, removed, or moved (thanks @tgrapperon).\r\n- Fix: `Effect.run`'s `Send` closure is now explicitly `@MainActor`.\r\n- Fix: Long-living effects no longer accumulate `Task` values in memory for each action sent back into the store, saving memory over time.\r\n- Fix: macOS 11 compilation with the Xcode 14 release candidate.\r\n- Fix: Actions that re-enter the store at the end of processing are now processed immediately.\r\n- Infrastructure: README fixes (thanks @Jager-yoo).\r\n- Infrastructure: Added benchmarks for effects, store scoping.\r\n- Infrastructure: Fixed Todos demo's incrementing UUID helper (thanks @pitt500).\r\n- Infrastructure: Fixed Voice Memos AV settings (thanks @entaku0818).",
    "createdAt" : "2022-09-09T00:47:28+09:00",
    "fetchedFromAPIAt" : "2022-09-09T10:00:46+09:00",
    "id" : "RE_kwDOD48kk84EkQP2",
    "owner" : "pointfreeco",
    "publishedAt" : "2022-09-09T00:50:45+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.40.0",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.40.0",
    "version" : "0.40.0"
  },
  {
    "body" : "- Fixed: Removed the `@StateObject` shim added in 0.40.0 to avoid a release build regression in some applications. We'll investigate on bringing it back in the future!",
    "createdAt" : "2022-09-09T08:20:13+09:00",
    "fetchedFromAPIAt" : "2022-09-09T10:00:46+09:00",
    "id" : "RE_kwDOD48kk84EkabH",
    "owner" : "pointfreeco",
    "publishedAt" : "2022-09-09T08:21:25+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.40.1",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.40.1",
    "version" : "0.40.1"
  },
  {
    "body" : "## What's Changed\r\n\r\n* Fixed: Re-entrant actions from store publisher subscriptions no longer run with the previous state (thanks @diederich, #1360).\r\n* Fixed: The test store is now slightly more forgiving when it comes to Swift's async runtime. If you are having issues with async effects and the test store, let us know and we'll do our best to accommodate!\r\n* Fixed: The SPM package no longer publicly vends its internal schemes.",
    "createdAt" : "2022-09-13T13:37:33+09:00",
    "fetchedFromAPIAt" : "2022-09-14T09:58:36+09:00",
    "id" : "RE_kwDOD48kk84EllE3",
    "owner" : "pointfreeco",
    "publishedAt" : "2022-09-13T13:42:42+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.40.2",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.40.2",
    "version" : "0.40.2"
  },
  {
    "body" : "## What's Changed\r\n* Update example to set badge to the unread count by @hyperspacemark in https://github.com/pointfreeco/swift-composable-architecture/pull/1391\r\n* Fix the CaseStudies (UIKit) by @Czajnikowski in https://github.com/pointfreeco/swift-composable-architecture/pull/1392\r\n* Fix warnings introduced in Xcode 14.1 by @stephencelis in https://github.com/pointfreeco/swift-composable-architecture/pull/1388\r\n* Clean up the recursive case study. by @mbrandonw in https://github.com/pointfreeco/swift-composable-architecture/pull/1403\r\n* Todos demo: fix sorting filtered todos by @stephencelis in https://github.com/pointfreeco/swift-composable-architecture/pull/1404\r\n* Fix task cancellation leak by @mbrandonw in https://github.com/pointfreeco/swift-composable-architecture/pull/1418\r\n* Check in `Package.resolved` by @stephencelis in https://github.com/pointfreeco/swift-composable-architecture/pull/1427\r\n* Fix Performance.md brackets by @ddanilyuk in https://github.com/pointfreeco/swift-composable-architecture/pull/1446\r\n* ReducerProtocol by @mbrandonw in https://github.com/pointfreeco/swift-composable-architecture/pull/1283\r\n\r\n## New Contributors\r\n* @hyperspacemark made their first contribution in https://github.com/pointfreeco/swift-composable-architecture/pull/1391\r\n* @Czajnikowski made their first contribution in https://github.com/pointfreeco/swift-composable-architecture/pull/1392\r\n* @ddanilyuk made their first contribution in https://github.com/pointfreeco/swift-composable-architecture/pull/1446\r\n\r\n**Full Changelog**: https://github.com/pointfreeco/swift-composable-architecture/compare/0.40.2...0.41.0",
    "createdAt" : "2022-10-11T00:37:50+09:00",
    "fetchedFromAPIAt" : "2022-10-11T09:59:43+09:00",
    "id" : "RE_kwDOD48kk84EvEG7",
    "owner" : "pointfreeco",
    "publishedAt" : "2022-10-11T00:42:34+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.41.0",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.41.0",
    "version" : "0.41.0"
  },
  {
    "body" : "- Fixed: Xcode's SPM integration does not allow for unsafe build flags to be configured, even when empty, for version-based releases. We've removed the empty build flag settings to fix this.",
    "createdAt" : "2022-10-11T01:05:46+09:00",
    "fetchedFromAPIAt" : "2022-10-11T09:59:43+09:00",
    "id" : "RE_kwDOD48kk84EvEwi",
    "owner" : "pointfreeco",
    "publishedAt" : "2022-10-11T01:09:08+09:00",
    "repository" : "swift-composable-architecture",
    "title" : "0.41.2",
    "url" : "https://github.com/pointfreeco/swift-composable-architecture/releases/tag/0.41.2",
    "version" : "0.41.2"
  }
]