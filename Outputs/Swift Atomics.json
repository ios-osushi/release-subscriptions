[
  {
    "body" : "### Fixes\r\n\r\n- Adds basic support for building with the Swift 5.2 toolchains.\r\n- Resolves a warning about the `arm64_32` architecture emitted by swift.org compiler builds.",
    "createdAt" : "2021-01-28T06:32:19+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTM5NzMzOTA0",
    "owner" : "apple",
    "publishedAt" : "2021-03-13T04:14:54+09:00",
    "repository" : "swift-atomics",
    "title" : "Atomics 0.0.3",
    "url" : "https://github.com/apple/swift-atomics/releases/tag/0.0.3",
    "version" : "0.0.3"
  },
  {
    "body" : "Initial release.",
    "createdAt" : "2020-10-02T08:57:36+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTMyMDcyNjE4",
    "owner" : "apple",
    "publishedAt" : "2020-10-02T09:01:31+09:00",
    "repository" : "swift-atomics",
    "title" : "Atomics 0.0.1",
    "url" : "https://github.com/apple/swift-atomics/releases/tag/0.0.1",
    "version" : "0.0.1"
  },
  {
    "body" : "## Changes\r\n\r\n- On Linux only, support for double-wide atomics is unavailable by default on x86_64 CPUs. To enable double-wide atomic functionality, you have to manually switch on support for the `cmpxchg16b` instruction:\r\n\r\n    ```\r\n    $ swift build -Xcc -mcx16 -Xswiftc -DENABLE_DOUBLEWIDE_ATOMICS -c release\r\n    ```\r\n\r\n   Code containing `cmpxchg16b` will run on all but the earliest AMD x86_64 CPUs. (You can verify your target CPU supports it by checking that the `cx16` flag is present in /proc/cpuinfo.)\r\n \r\n- The Swift Atomics test suite now requires `--enable-test-discovery` on non-Apple platforms.\r\n",
    "createdAt" : "2020-10-13T04:26:59+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTMyNjQyNjQw",
    "owner" : "apple",
    "publishedAt" : "2020-10-16T05:49:25+09:00",
    "repository" : "swift-atomics",
    "title" : "Atomics 0.0.2",
    "url" : "https://github.com/apple/swift-atomics/releases/tag/0.0.2",
    "version" : "0.0.2"
  },
  {
    "body" : "This release marks an important milestone for this package -- the advent of source stability!\r\n\r\n#### Changes\r\n\r\n- The public API of Swift Atomics is now considered source stable. The README defines what we consider public API.\r\n- Swift Atomics now requires a Swift 5.3 or later toolchain.\r\n- The low-level (pointer-based) atomic boolean operations are now public. (They were accidentally omitted from previous releases.)\r\n- The package now includes a CMake-based build method for bootstrapping purposes. This isn't considered stable; it may be removed or arbitrarily changed in any new release, including patch releases.\r\n\r\n#### Pull requests\r\n\r\n- #20 DoubleWord._readersBitWidth: Switch to using Int.bitWidth (by @lorentey)\r\n- #24 Mark the additional Bool methods as public (by @dfunckt)\r\n- #25 build: add a CMake based build for Atomics (by @compnerd)\r\n- #26 _AtomicShims: simplify double word setup (by @compnerd)\r\n- #28 gitignore: ignore vim swap files (by @compnerd)\r\n- #29 Tests: add XCTest manifest for non-SPM based builds (by @compnerd)\r\n- #30 Bump required toolchain version to 5.3 (by @lorentey)\r\n- #31 Declare Atomics source stable and describe what we consider public API (by @lorentey)\r\n- #32 [NFC] Update copyright notices (by @lorentey)\r\n\r\nThank you to everyone who contributed to this release!\r\n",
    "createdAt" : "2021-08-28T10:33:04+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTQ4NjAwMDE3",
    "owner" : "apple",
    "publishedAt" : "2021-08-28T10:34:19+09:00",
    "repository" : "swift-atomics",
    "title" : "Atomics 1.0.0",
    "url" : "https://github.com/apple/swift-atomics/releases/tag/1.0.0",
    "version" : "1.0.0"
  },
  {
    "body" : "This is a patch release containing several bug fixes.\r\n\r\n#### Fixes\r\n\r\n- The package now builds successfully on 32-bit architectures (i386, armv7) (#33)\r\n- The package manifest was adjusted to prevent SwiftPM warnings about unknown files in source directories.\r\n- Several types are now `@frozen` to match their `@inlinable` initializers. (This package isn't ABI stable, so this change is a no-op in all supported configurations.)\r\n\r\n### Pull Requests\r\n\r\n- #34 [shims] Fix i386/armv7 regression introduced in #26 (by @lorentey) \r\n- #35 [manifest] Fix warnings in 5.3 toolchains (by @lorentey)\r\n- #36 Fix build errors with library evolution enabled (by @lorentey)\r\n\r\nThank you to everyone who contributed to this release!\r\n",
    "createdAt" : "2021-08-31T06:16:24+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTQ4NzAzMTA0",
    "owner" : "apple",
    "publishedAt" : "2021-09-09T05:20:43+09:00",
    "repository" : "swift-atomics",
    "title" : "Atomics 1.0.1",
    "url" : "https://github.com/apple/swift-atomics/releases/tag/1.0.1",
    "version" : "1.0.1"
  },
  {
    "body" : "This is a patch release that introduces initial support for building this package with the Swift 5.5 compiler. \r\n\r\n(More fully-featured support with additional `Sendable` conformances will come in a future minor release.)\r\n\r\n#### Fixes\r\n\r\n- The package now has a workaround for an arm64 code generation issue for double wide atomics in the version of LLVM that ships in Swift 5.5. (#41)\r\n- When building with Swift 5.5, `UnsafeAtomic` and `UnsafeAtomicLazyReference` now only conform to `Sendable` when their value is. Swift 5.5 implicitly adds unconditional conformances to these types in 1.0.1, which isn't right. (#47) \r\n- The package now has better support for building with CMake. (#39) (Note that the CMake build configuration is intended only to enable the use of this package within Swift toolchain builds. It isn't part of the package's public API, so it is subject to change in any release.)\r\n\r\n### Pull Requests\r\n\r\n- #38 [shims] Only define atomic shims in Swift's Clang Importer (by @lorentey)\r\n- #39 [cmake] Fix building with CMake (by @lorentey)\r\n- #40 Add support test script (by @lorentey)\r\n- #43 Implement double-wide loads with compare-exchange on arm64 in debug builds with the Swift 5.5 compiler (by @lorentey)\r\n- #44 Update utility scripts (by @lorentey)\r\n- #48 Fix `UnsafeAtomic`'s `Sendable` conformance (by @lorentey)\r\n\r\nThank you to everyone who contributed to this release!\r\n",
    "createdAt" : "2021-09-25T08:35:28+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "RE_kwDOEeiD3M4C_Y4w",
    "owner" : "apple",
    "publishedAt" : "2021-09-25T08:43:21+09:00",
    "repository" : "swift-atomics",
    "title" : "Atomics 1.0.2",
    "url" : "https://github.com/apple/swift-atomics/releases/tag/1.0.2",
    "version" : "1.0.2"
  },
  {
    "body" : "This minor release improves support for recent Swift releases, adds new functionality and resolves some known issues. \r\n\r\n### Changes\r\n\r\n- This release requires Swift 5.6 or better. (Clients on older toolchains will automatically remain on the 1.0 releases.) (#67)\r\n\r\n- `AtomicReference` is now unconditionally available on all supported platforms. (#65 by @kelvin13)\r\n\r\n- `ManagedAtomic` now conforms to `Sendable` when its `Value` is `Sendable`. (#45)\r\n\r\n- `RawRepresentable` types can now opt into support for atomic operations on their optional values as long as their underlying `RawValue` also supports it. (#42 by @glessard)\r\n\r\n    ```swift\r\n    struct SomeValue: RawRepresentable, AtomicOptionalWrappable {\r\n      var rawValue: UnsafeRawPointer\r\n\r\n      init(rawValue: UnsafeRawPointer) {\r\n        self.rawValue = rawValue\r\n      }\r\n    }\r\n\r\n    let atomic: ManagedAtomic<SomeValue> // OK\r\n    let atomic2: ManagedAtomic<SomeValue?> // Also OK!\r\n    ```\r\n\r\n- The `weakCompareExchange` operation now comes with a variant that takes a single ordering (#75). This makes it less verbose to use it in the common case where the same ordering is needed on both the success and the failure paths. \r\n\r\n    ```swift\r\n    let atomic = ManagedAtomic<Int>(42)\r\n\r\n    var original = 0\r\n    var exchanged = false\r\n    repeat {\r\n      (exchanged, original) = atomic.weakCompareExchange(\r\n        expected: original,\r\n        desired: 23,\r\n        ordering: .relaxed) // no need to specify a separate failureOrdering!\r\n    } while !exchanged\r\n    ```\r\n\r\n- `DoubleWord.low` and `DoubleWord.high` are now deprecated (#70). Use `first` and `second` instead.\r\n\r\n- This release lays the groundwork for replacing the use of C atomics with native Swift compiler intrinsics (#74). When it eventually becomes stable, this change will allow swift-atomics to support Windows (#56), and it will resolve a multitude of build problems on other platforms (e.g., #54, #55, #62, #8). Version 1.1 ships with experimental support for building the package in this mode; however, this mode is not enabled by default, and it is subject to arbitrarily change in any future release.\r\n\r\n### Fixes\r\n\r\n- `ManagedAtomicLazyReference` no longer leaks its value when it is deinitialized (#66).\r\n\r\n- `AtomicReference` conformances on non-final classes no longer emit a compiler warning in Swift 5.7 and later (#53). Atomic references now fully support class hierarchies, but only the superclass that introduced the `AtomicReference` conformance can be used as the type argument to `ManagedAtomic` or `UnsafeAtomic`. This turns a previously undiagnosed type safety violation into an unconditional compile-time error:\r\n\r\n    ```swift\r\n    class Base: AtomicReference {}\r\n    // 1.0: warning: Non-final class 'Base' cannot safely conform to protocol\r\n    //    'AtomicValue', which requires that 'Self.AtomicRepresentation.Value'\r\n    //    is exactly equal to 'Self'; this is an error in Swift 6\r\n    // 1.1: OK\r\n\r\n    class Derived: Base {} \r\n\r\n    let ref1: ManagedAtomic<Base> = .init(Derived()) // OK\r\n    let ref2: ManagedAtomic<Derived> = .init(Derived())\r\n    // 1.0:\r\n    //    no error, silent type safety violation\r\n    // 1.1+: \r\n    //    error: 'ManagedAtomic' requires the types 'Derived' \r\n    //    and 'Base' be equivalent\r\n    ```\r\n\r\n- All atomic operations are now implemented in terms of `Int8`, `Int16`, `Int32`, `Int64`, `Int`, or `DoubleWord`. The package no longer uses non-standard C to implement atomic operations on `Bool` (#37).\r\n\r\n- Building the package tests is now far less resource-intensive, considerably speeding up builds on some memory-constrained systems (#71).\r\n\r\n### Pull Requests\r\n\r\n- #42 Implement AtomicStorage for Optionals of RawRepresentable types (by @glessard)\r\n- #58 Fix support for non-final classes in AtomicReference (by @lorentey)\r\n- #65 enable AtomicReference everywhere (by @kelvin13)\r\n- #67 Bump minimum required toolchain to Swift 5.6 (by @lorentey)\r\n- #68 Remove obsolete workarounds for older toolchains (by @lorentey)\r\n- #69 ManagedAtomicLazyReference: Properly dispose object on deinit (by @lorentey)\r\n- #70 Simplify shims (by @lorentey)\r\n- #71 Resolve some test issues (by @lorentey)\r\n- #72 [test] Fix basic tests to to actually cover weakCompareExchange (by @lorentey)\r\n- #73 Update AtomicOptionalWrappable support for RawRepresentable types (by @lorentey)\r\n- #74 Add support for using LLVM intrinsics instead of C atomics (by @lorentey)\r\n- #76 Add a weakCompareExchange variant that only takes a single ordering (by @lorentey)\r\n- #77 Add an Xcode project exercising native builtins in a monomodule configuration (by @lorentey)\r\n- #78 Fix compatibility with Swift 5.6 (by @lorentey)\r\n- #80 Update file headers (by @lorentey)\r\n- #81 Fix some edge cases under 5.6 (by @lorentey)\r\n- #82 1.1 release preparations (by @lorentey)\r\n- #83 Utilities/run-full-tests.sh: Use a different derived data path when building the Xcode project (by @lorentey)\r\n\r\n**Full diffs**: https://github.com/apple/swift-atomics/compare/1.0.3...1.1.0\r\n\r\nThank you very much to everyone who contributed to this release!\r\n",
    "createdAt" : "2023-04-02T07:38:59+09:00",
    "fetchedFromAPIAt" : "2023-04-04T09:41:16+09:00",
    "id" : "RE_kwDOEeiD3M4F03A9",
    "owner" : "apple",
    "publishedAt" : "2023-04-04T06:50:27+09:00",
    "repository" : "swift-atomics",
    "title" : "Swift Atomics 1.1.0",
    "url" : "https://github.com/apple/swift-atomics/releases/tag/1.1.0",
    "version" : "1.1.0"
  },
  {
    "body" : "This is a documentation update, including the addition of basic DocC documentation bundles.\r\nThe only other change is a fix to the CMake build configuration.\r\n\r\n## Changes\r\n\r\nThe package now contains documentation bundles, enabling nicer presentation of API documentation in DocC.\r\n\r\n## Pull Requests\r\n\r\n* Update README for autogenerated subdirectories by @chornge in https://github.com/apple/swift-atomics/pull/49\r\n* [Documentation] Add a note that TSan does not support fences. by @karwa in https://github.com/apple/swift-atomics/pull/50\r\n* fix cmake build when Atomics is built as dependency by @michaelknoch in https://github.com/apple/swift-atomics/pull/52\r\n\r\n## New Contributors\r\n* @chornge made their first contribution in https://github.com/apple/swift-atomics/pull/49\r\n* @karwa made their first contribution in https://github.com/apple/swift-atomics/pull/50\r\n* @michaelknoch made their first contribution in https://github.com/apple/swift-atomics/pull/52\r\n\r\n**Full Changelog**: https://github.com/apple/swift-atomics/compare/1.0.2...1.0.3\r\n",
    "createdAt" : "2022-12-09T10:44:03+09:00",
    "fetchedFromAPIAt" : "2022-12-10T09:40:50+09:00",
    "id" : "RE_kwDOEeiD3M4FGK9j",
    "owner" : "apple",
    "publishedAt" : "2022-12-09T12:35:41+09:00",
    "repository" : "swift-atomics",
    "title" : "Swift Atomics 1.0.3",
    "url" : "https://github.com/apple/swift-atomics/releases/tag/1.0.3",
    "version" : "1.0.3"
  },
  {
    "body" : "This minor release adds support for Swift 5.9.\r\n\r\nThis release contains no API-level additions nor any other visible changes to stable interfaces; the version number bump is simply acknowledging that this release ships a full rewrite of package internals -- it isn't just a regular bug fix release.\r\n\r\n### Changes\r\n\r\n- This release requires Swift 5.7 or later. (Clients on older toolchains will automatically remain on the 1.0 or 1.1 releases.)\r\n- The package now supports being used as a dependency in projects that have C++ interoperability enabled in Swift 5.9.\r\n- On Swift 5.9+, atomic operations are now implemented using native Swift compiler builtins. The package no longer forwards to C atomics when built on newer toolchains.\r\n\r\n### Fixes\r\n\r\n- Minor documentation fixes.\r\n\r\n### Pull Requests\r\n\r\n* [Xcode] Set a code sign identity by @lorentey in https://github.com/apple/swift-atomics/pull/85\r\n* [Xcode] Don’t use a bridging header in a framework target by @lorentey in https://github.com/apple/swift-atomics/pull/87\r\n* Fix reference doc variable references by @rolson in https://github.com/apple/swift-atomics/pull/89\r\n* Avoid C atomic operations in Swift 5.9+ by @lorentey in https://github.com/apple/swift-atomics/pull/90\r\n* Regenerate sources by @lorentey in https://github.com/apple/swift-atomics/pull/91\r\n* Fix version-specific manifest for 5.6..<5.9 by @lorentey in https://github.com/apple/swift-atomics/pull/93\r\n* [_AtomicShims] On Darwin, ensure we link against libswiftCore using assembly shenanigans by @lorentey in https://github.com/apple/swift-atomics/pull/97\r\n* Avoid using symlinks for package files by @ktoso in https://github.com/apple/swift-atomics/pull/100\r\n* Reorganize sources for future work by @lorentey in https://github.com/apple/swift-atomics/pull/101\r\n* Fix alignment issues with double-wide atomics on i386 by @lorentey in https://github.com/apple/swift-atomics/pull/102\r\n* [CMake] Do not list .gyb files as sources by @lorentey in https://github.com/apple/swift-atomics/pull/105\r\n* Drop support for Swift 5.6 by @lorentey in https://github.com/apple/swift-atomics/pull/103\r\n* Not so minor prerelease fixups/changes by @lorentey in https://github.com/apple/swift-atomics/pull/106\r\n\r\n## New Contributors\r\n* @rolson made their first contribution in https://github.com/apple/swift-atomics/pull/89\r\n* @ktoso made their first contribution in https://github.com/apple/swift-atomics/pull/100\r\n\r\n**Full Changelog**: https://github.com/apple/swift-atomics/compare/1.1.0...1.2.0\r\n\r\nThank you very much to everyone who contributed to this release!",
    "createdAt" : "2023-09-28T10:26:29+09:00",
    "fetchedFromAPIAt" : "2023-10-18T13:22:51+09:00",
    "id" : "RE_kwDOEeiD3M4HWy1i",
    "owner" : "apple",
    "publishedAt" : "2023-10-03T10:36:05+09:00",
    "repository" : "swift-atomics",
    "title" : "Swift Atomics 1.2.0",
    "url" : "https://github.com/apple/swift-atomics/releases/tag/1.2.0",
    "version" : "1.2.0"
  }
]