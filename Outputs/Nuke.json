[
  {
    "body" : "- Enable progressive decoding by default â€“ it can now be done without sacrificing performance in any meaningful way. To disable it, set `isProgressiveDecodingEnabled` to `false`.\r\n- Enable storing progressively decoding previews in the memory cache by default (`isStoringPreviewsInMemoryCache`)\r\n- Add `isAsynchronous` property to `ImageDecoding` that allows slow decoders (such as custom WebP decoder) to be executed on a dedicated operation queue (the existing `imageDecodingQueue`), while allowing fast decoders to be executed synchronously\r\n- Add `entryCostLimit` property to `ImageCache` that specifies the maximum cost of a cache entry in proportion to the `costLimit`. `0.1`, by default.",
    "createdAt" : "2021-06-04T10:05:18+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTQ0MDc4OTkz",
    "owner" : "kean",
    "publishedAt" : "2021-06-04T10:05:31+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 10.1",
    "url" : "https://github.com/kean/Nuke/releases/tag/10.1.0",
    "version" : "10.1.0"
  },
  {
    "body" : "> See also [Nuke 10.0 Release Notes](https://github.com/kean/Nuke/releases/tag/10.0.0)\r\n\r\n- `ImageDecoders.Default` now generates previews for GIF\r\n- Add `onSuccess`, `onFailure`, and other callbacks to `FetchImage` \r\n- Add progressive previews in memory cache support to `FetchImage`\r\n- Add a convenience property with an `ImageContainer` to `FechImage`\r\n- Update `FetchImage` `loadImage()` method that takes publisher to no longer require error to match `ImagePipeline.Error`   \r\n- Add an option to set default processors via `FetchImage`",
    "createdAt" : "2021-06-07T02:06:57+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTQ0MTY5MzE2",
    "owner" : "kean",
    "publishedAt" : "2021-06-07T02:07:40+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 10.2",
    "url" : "https://github.com/kean/Nuke/releases/tag/10.2.0",
    "version" : "10.2.0"
  },
  {
    "body" : "> See also [Nuke 10.0 Release Notes](https://github.com/kean/Nuke/releases/tag/10.0.0)\r\n\r\n- Add `animation` propery to `FetchImage` that significantly simplifies how to animate image appearence\r\n- Add `imageType` parameter to `ImageDecoders.Empty`\r\n- Add an option to override image scale (`ImageRequest.UserInfoKey.scaleKey`)",
    "createdAt" : "2021-06-11T06:38:48+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTQ0NDQ0NjI3",
    "owner" : "kean",
    "publishedAt" : "2021-06-11T06:39:12+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 10.3",
    "url" : "https://github.com/kean/Nuke/releases/tag/10.3.0",
    "version" : "10.3.0"
  },
  {
    "body" : "- Fix `ImagePublisher` crash with some Combine operators combinations - [#494](https://github.com/kean/Nuke/pull/494), thanks to [Tyler Nickerson](https://github.com/Nickersoft)",
    "createdAt" : "2021-07-09T07:04:30+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTQ1OTM1Nzg3",
    "owner" : "kean",
    "publishedAt" : "2021-07-09T07:04:51+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 10.3.1",
    "url" : "https://github.com/kean/Nuke/releases/tag/10.3.1",
    "version" : "10.3.1"
  },
  {
    "body" : "- Fix an issue with disk cache images being overwritten in some scenarios (with disk cache policies that enable encoding and storage of the processed images) - [#500](https://github.com/kean/Nuke/pull/500) ",
    "createdAt" : "2021-08-19T04:21:18+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTQ4MDY3ODYw",
    "owner" : "kean",
    "publishedAt" : "2021-08-19T04:21:33+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 10.3.3",
    "url" : "https://github.com/kean/Nuke/releases/tag/10.3.3",
    "version" : "10.3.3"
  },
  {
    "body" : "- Fix an issue where if you pass incorect strings (`String`) in the request, the pipeline eventually start failing silently - [#502](https://github.com/kean/Nuke/pull/502) ",
    "createdAt" : "2021-08-26T23:09:10+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTQ4NTA0Nzg5",
    "owner" : "kean",
    "publishedAt" : "2021-08-26T23:09:28+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 10.3.4",
    "url" : "https://github.com/kean/Nuke/releases/tag/10.3.4",
    "version" : "10.3.4"
  },
  {
    "body" : "- Add podspec",
    "createdAt" : "2021-07-30T22:58:19+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTQ4NTA1MzA4",
    "owner" : "kean",
    "publishedAt" : "2021-08-26T23:15:46+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 10.3.2",
    "url" : "https://github.com/kean/Nuke/releases/tag/10.3.2",
    "version" : "10.3.2"
  },
  {
    "body" : "- Add an API for efficiently generating thumbnails or extracting the existing ones from the image data. It can reduce peak memory usage by up to x4 times depending on the original image size - [#503](https://github.com/kean/Nuke/pull/503)\r\n- Fix an issue with scale (`ImageRequest.UserInfoKey.scaleKey`) not being applied to progressively decoded images",
    "createdAt" : "2021-08-29T06:07:55+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTQ4NjIwMjIw",
    "owner" : "kean",
    "publishedAt" : "2021-08-29T06:08:15+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 10.4",
    "url" : "https://github.com/kean/Nuke/releases/tag/10.4.0",
    "version" : "10.4.0"
  },
  {
    "body" : "- Fix build on watchOS (needs investigation why xcodebuild returns 0 for failed watchOS builds) - [#505](https://github.com/kean/Nuke/pull/505), thanks fo [David Harris](https://github.com/thedavidharris)",
    "createdAt" : "2021-08-31T05:35:55+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTQ4NzAwNjc5",
    "owner" : "kean",
    "publishedAt" : "2021-08-31T05:47:45+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 10.4.1",
    "url" : "https://github.com/kean/Nuke/releases/tag/10.4.1",
    "version" : "10.4.1"
  },
  {
    "body" : "- Fix `DataCache` trim ratio, previously was applying size limit too aggressively.\r\n- Deprecate `DataCache.countLimit`. The default limit is now `Int.max`.\r\n- Move demo project to a [separate repo](https://github.com/kean/NukeDemo). Fixes [#442](https://github.com/kean/Nuke/issues/442). Should also improve checkout speed for other package managers.\r\n",
    "createdAt" : "2021-03-22T02:39:48+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTQwMTI1MTM4",
    "owner" : "kean",
    "publishedAt" : "2021-03-22T02:49:38+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 9.3.1",
    "url" : "https://github.com/kean/Nuke/releases/tag/9.3.1",
    "version" : "9.3.1"
  },
  {
    "body" : "- Reduce the number of context switches in `ImagePrefetcher` and `DataLoader`\r\n- Atomics are back, improves direct `ImagePipeline` usage performance\r\n- Fast-track default decoding operations\r\n- Reduce the number of allocations per task\r\n- Deprecate typealiases for progress and completion closures to improve auto-completion\r\n- You can now toggle `ImagePipeline.Configuration.isSignpostLoggingEnabled` while the app is running and without re-creating the pipeline, [#443](https://github.com/kean/Nuke/issues/443)\r\n- Add `isPaused` property to `ImagePrefetcher`\r\n- Add convenience `subscript` that takes `URL` to `ImageCaching` protocol as extension",
    "createdAt" : "2021-03-27T11:53:52+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTQwNTcxODMw",
    "owner" : "kean",
    "publishedAt" : "2021-03-27T12:16:47+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 9.4.0",
    "url" : "https://github.com/kean/Nuke/releases/tag/9.4.0",
    "version" : "9.4.0"
  },
  {
    "body" : "- Shorter names for parameters in `loadImage()` and `loadData()` methods to improve ImagePipeline APIs ergonomics\r\n- Rename `ImagePreheater` to `ImagePrefetcher` (via deprecation) \r\n- Rewrite `ImagePrefetcher` documentation",
    "createdAt" : "2021-03-28T00:05:15+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTQwNTgwMzAw",
    "owner" : "kean",
    "publishedAt" : "2021-03-28T00:06:11+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 9.4.1",
    "url" : "https://github.com/kean/Nuke/releases/tag/9.4.1",
    "version" : "9.4.1"
  },
  {
    "body" : "- Add `priority` property to `ImagePrefetcher` which changes the priority of both new and outstanding tasks. By default, `.low`. Use-case: reducing the priority to `.veryLow` when moving to a new screen.\r\n- Further `ImagePrefetcher` performance improvements: one less allocation per request, `ImageRequest` instances are now created in background, reduce closure capture lists, optimize cancellation\r\n- `ImagePrefetcher` now automatically sets the proper request priority even when you start prefetching with`ImageRequest`",
    "createdAt" : "2021-04-04T23:06:58+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTQwOTE2MzQy",
    "owner" : "kean",
    "publishedAt" : "2021-04-04T23:07:40+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 9.5.0",
    "url" : "https://github.com/kean/Nuke/releases/tag/9.5.0",
    "version" : "9.5.0"
  },
  {
    "body" : "- Update to Xcode 12.5. Fixes [#454](https://github.com/kean/Nuke/issues/454).\r\n\r\n**CocoaPods support deprecated, the last CocoaPods release was 9.5.0.**",
    "createdAt" : "2021-04-29T10:38:22+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTQyMTczODkz",
    "owner" : "kean",
    "publishedAt" : "2021-04-29T10:39:40+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 9.5.1",
    "url" : "https://github.com/kean/Nuke/releases/tag/9.5.1",
    "version" : "9.5.1"
  },
  {
    "body" : "- Add `ImageRequest.CachePolicy.returnCacheDataDontLoad`, [#456](https://github.com/kean/Nuke/pull/456)\r\n- Add `ImagePublisher` (Combine extensions)\r\n- Add a convenience `dataLoadingError` property to `ImagePipeline.Error`\r\n- Remove APIs deprecated in versions 9.0-9.1\r\n- Add a note on [`waitsForConnectivity`](https://developer.apple.com/documentation/foundation/urlsessionconfiguration/2908812-waitsforconnectivity) in [Nuke Docs](https://kean.blog/nuke/guides/performance#auto-retry)\r\n- Add [\"Low Data Mode\"](https://kean.blog/nuke/guides/combine#low-data-mode) in Nuke Docs",
    "createdAt" : "2021-05-03T02:41:42+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTQyMzMxMzIy",
    "owner" : "kean",
    "publishedAt" : "2021-05-03T02:42:11+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 9.6.0",
    "url" : "https://github.com/kean/Nuke/releases/tag/9.6.0",
    "version" : "9.6.0"
  },
  {
    "body" : "See https://github.com/kean/Nuke/pull/461 for release notes",
    "createdAt" : "2021-05-17T02:32:39+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTQzMDE3NzI1",
    "owner" : "kean",
    "publishedAt" : "2021-05-17T02:33:06+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 10.0 (Beta 1)",
    "url" : "https://github.com/kean/Nuke/releases/tag/10.0.0-beta.1",
    "version" : "10.0.0-beta.1"
  },
  {
    "body" : "- `FetchImage` to work with a generic `Publisher` instead of `AnyPublisher`\r\n- Fix an issue where `ImagePublisher` was performing sync disk cache lookup",
    "createdAt" : "2021-05-18T06:14:05+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTQzMDg3NjI1",
    "owner" : "kean",
    "publishedAt" : "2021-05-18T06:15:07+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 10.0 (Beta 2)",
    "url" : "https://github.com/kean/Nuke/releases/tag/10.0.0-beta.2",
    "version" : "10.0.0-beta.2"
  },
  {
    "body" : "See https://github.com/kean/Nuke/pull/461 for release notes.\r\n\r\nThis is the final Beta. The RC will be available this weekend and the final testing cycle will take 10 days.",
    "createdAt" : "2021-05-21T07:21:42+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTQzMzE5OTI5",
    "owner" : "kean",
    "publishedAt" : "2021-05-21T07:31:15+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 10.0 (Beta 3)",
    "url" : "https://github.com/kean/Nuke/releases/tag/10.0.0-beta.3",
    "version" : "10.0.0-beta.3"
  },
  {
    "body" : "See https://github.com/kean/Nuke/pull/461 for release notes.\r\n\r\nThe final testing cycle will take ~10 days.",
    "createdAt" : "2021-05-23T04:26:02+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTQzNDE1NDE3",
    "owner" : "kean",
    "publishedAt" : "2021-05-23T04:26:34+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 10.0 (RC1)",
    "url" : "https://github.com/kean/Nuke/releases/tag/10.0.0-rc.1",
    "version" : "10.0.0-rc.1"
  },
  {
    "body" : "- Remove some risky `DataLoader` optimizations",
    "createdAt" : "2021-05-25T05:18:21+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTQzNDg1MjQw",
    "owner" : "kean",
    "publishedAt" : "2021-05-25T05:24:02+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 9.6.1",
    "url" : "https://github.com/kean/Nuke/releases/tag/9.6.1",
    "version" : "9.6.1"
  },
  {
    "body" : "The final testing cycle will take ~7 days.\r\nReleases notes https://github.com/kean/Nuke/pull/461 (WIP)",
    "createdAt" : "2021-05-25T10:58:52+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTQzNDk2NTc2",
    "owner" : "kean",
    "publishedAt" : "2021-05-25T10:59:07+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 10.0 (RC2)",
    "url" : "https://github.com/kean/Nuke/releases/tag/10.0.0-rc.2",
    "version" : "10.0.0-rc.2"
  },
  {
    "body" : "Nuke 10 is extreme in every way. It is faster than the previous version (up to 30% improvement to some operations), more powerful, more ergonomic, and is even easier to learn and use. It brings big additions to the caching infrastructure, great SwiftUI and Combine support, and more ways to adjust the system to fit your needs.\r\n\r\nThis release is also a massive step-up in the general quality of the framework. It has many improvements to the docs (for example, a complete rewrite of the [caching guide](https://kean.blog/nuke/guides/caching)), more inline comments, more unit tests (Nuke now has ~100% test coverage with 2x number of lines of code in the test target compared to the main target). It's as reliable as it gets.\r\n\r\n> **Migration.** The compiler will assist you with the migration, but if something isn't clear, there is a comprehensive [migration guide](https://github.com/kean/Nuke/blob/master/Documentation/Migrations/Nuke%2010%20Migration%20Guide.md) available.\r\n>\r\n> **Switching.** Switching from Kingfisher? There is now a [dedicated guide](https://github.com/kean/Nuke/blob/master/Documentation/Switch/switch-from-kingfisher.md) available to assist you. There is also one for [migrating from SDWebImage](https://github.com/kean/Nuke/blob/master/Documentation/Switch/switch-from-sdwebimage.md).\r\n\r\n## Caching\r\n\r\n- Add [`DataCachePolicy`](https://kean-org.github.io/docs/nuke/reference/10.0.0/ImagePipeline_Configuration_DataCachePolicy/) to replace deprecated `DataCacheOptions.storedItems`. The new policy fixes some of the inefficiencies of the previous model and provides more control. For example, one of the additions is an [`.automatic`](https://kean-org.github.io/docs/nuke/reference/10.0.0/ImagePipeline_Configuration_DataCachePolicy/#imagepipeline.configuration.datacachepolicy.automatic) policy: for requests with processors, encode and store processed images; for requests with no processors, store original image data. You can learn more about the policies and other caching changes in [\"Caching: Cache Policy.\"](https://kean.blog/nuke/guides/caching#cache-policy)\r\n-  Add [`ImagePipeline.Cache`](https://kean-org.github.io/docs/nuke/reference/10.0.0/ImagePipeline_Cache/) with a whole range of convenience APIs for managing cached images: read, write, remove images from all cache layers.\r\n- Add [`ImagePipeline.Configuration.withDataCache`](https://kean-org.github.io/docs/nuke/reference/10.0.0/ImagePipeline_Configuration/#imagepipeline.configuration.withdatacache) (aggressive disk cache enabled) and [`withURLCache`](https://kean-org.github.io/docs/nuke/reference/10.0.0/ImagePipeline_Configuration/#imagepipeline.configuration.withurlcache) (HTTP disk cache enabled) to make it easier to set up a pipeline with a configuration you want. Learn more in [\"Caching: Configuration.\"](https://kean.blog/nuke/guides/caching#configuration)\r\n- Add `removeAll()` method to `ImageCaching` and `DataCaching` protocols\r\n- Add `containsData(for:)` method to `DataCaching` and `DataCache` which checks if the data exists without bringing it to memory\r\n- Add [`ImageResponse.CacheType`](https://kean-org.github.io/docs/nuke/reference/10.0.0/ImageResponse_CacheType/) to address [#361](https://github.com/kean/Nuke/issues/361) and [#435](https://github.com/kean/Nuke/issues/435). It defines the source of the retrieved image.\r\n- The pipeline no longer stores images fetched using file:// and data:// schemes in the disk cache\r\n- `ImageCaching` protocols now works with a new [`ImageCacheKey`](https://kean-org.github.io/docs/nuke/reference/10.0.0/ImageCacheKey/) type (an opaque container) instead of `ImageRequest`. If you are providing a custom implementation of the `ImageCaching` protocol, it needs to be updated. It is now easier because there is no need to come up with a key.\r\n\r\n## NukeUI (Beta)\r\n\r\n[NukeUI](https://github.com/kean/NukeUI) is a new Swift package. It is a comprehensive solution for displaying lazily loaded images on Apple platforms. The library contains two types:\r\n\r\n- `LazyImage` for SwiftUI\r\n- `LazyImageView` for UIKit and AppKit\r\n\r\nBoth views have an equivalent sets of APIs.\r\n\r\nThe library uses [Nuke](https://github.com/kean/Nuke) for loading images and has many customization options. It also supports GIF rendering thanks to [Gifu](https://github.com/kaishin/Gifu). GIF is [not the most](https://web.dev/replace-gifs-with-videos/) efficient format, so NukeUI also supports playing short videos out of the box.\r\n\r\n```swift\r\nstruct ContainerView: View {\r\n    var body: some View {\r\n        LazyImage(source: \"https://example.com/image.jpeg\")\r\n            .placeholder { Image(\"placeholder\") }\r\n            .transition(.fadeIn(duration: 0.33))\r\n    }\r\n}\r\n```\r\n\r\n## SwiftUI\r\n\r\nNuke now has first-class SwiftUI support with [FetchImage](https://kean.blog/nuke/guides/swiftui) which is now part of the main repo, no need to install it separately. It also has a couple of new additions:\r\n\r\n- Add `result` property (previously you could only access the loaded image)\r\n- Add `AnyPublisher` support via a new `func load<P: Publisher>(_ publisher: P) where P.Output == ImageResponse, P.Failure == ImagePipeline.Error` method. You can use it with a custom publisher created by combining publishers introduced in [Nuke 9.6](https://github.com/kean/Nuke/releases/tag/9.6.0).\r\n- Add `ImageRequestConvertible` support\r\n\r\n## Combine\r\n\r\nNuke 10 goes all-in on Combine. [`ImagePublisher`](https://kean-org.github.io/docs/nuke/reference/10.0.0/ImagePublisher/) was initially introduced in the previous release, [Nuke 9.6](https://github.com/kean/Nuke/releases/tag/9.6.0), and now Combine is supported across the framework.\r\n\r\n- `ImageRequest` now supports Combine Publisher via a new initializer `ImageRequest(id:data:)` where `data` is a `Publisher`. It can be used in a variety of scenarios, for example, loading data using `PhotosKit.\r\n- As mentioned earlier, [`FetchImage`](https://kean-org.github.io/docs/nuke/reference/10.0.0/FetchImage/) now also supports publishers. So when you create a publisher chain, there is now an easy way to display it.\r\n\r\n## ImageRequest.Options\r\n\r\nNuke 10 has a reworked [`ImageRequest.Options`](https://kean-org.github.io/docs/nuke/reference/10.0.0/ImageRequest_Options/) option set replacing removed `ImageRequestOptions`. The name is similar, but the options are slightly different. The new approach has more options while being optimized for performance. `ImageRequest` size in memory reduced from 176 bytes to just 48 bytes (3.7x smaller).\r\n\r\n- Deprecate [`ImageRequest.CachePolicy`](https://kean-org.github.io/docs/nuke/reference/10.0.0/ImageRequest_CachePolicy/) which is now part of the new [`ImageRequest.Options`](https://kean-org.github.io/docs/nuke/reference/10.0.0/ImageRequest_Options/) option set\r\n- Remove `filteredURL`, you can now pass it using `userInfo` and [`.imageIdKey`](https://kean-org.github.io/docs/nuke/reference/10.0.0/ImageRequest_UserInfoKey/#imagerequest.userinfokey.imageidkey) key instead. It's a rarely used option, and this is why it is now less visible.\r\n- Remove `cacheKey` and `loadKey` (hopefully, nobody is using it because these weren't really designed properly). You can now use the new methods of [`ImagePipeline.Delegate`](https://kean-org.github.io/docs/nuke/reference/10.0.0/ImagePipelineDelegate/) that allows customizing the keys.\r\n- Add more options for granular control over caching and loading. For example, [`ImageRequest.Options`](https://kean-org.github.io/docs/nuke/reference/10.0.0/ImageRequest_Options/) has a new [`.disableDiskCache`](https://kean-org.github.io/docs/nuke/reference/10.0.0/ImageRequest_Options/#imagerequest.options.disablediskcache) option.\r\n- Move `userInfo` directly to `ImageRequest`. It's now easier to pass and it allows the framework to perform some additional optimizations.\r\n- `userInfo` now uses [`ImageRequest.UserInfoKey`](https://kean-org.github.io/docs/nuke/reference/10.0.0/ImageRequest_UserInfoKey/) wrapper for keys replacing `AnyHashable`. The new approach is faster and adds type-safety.\r\n\r\n## ImagePipeline.Delegate\r\n\r\n- Add [`ImagePipeline.Delegate`](https://kean-org.github.io/docs/nuke/reference/10.0.0/ImagePipelineDelegate/) with a variety of advanced per-request customization options that were previously not possible. For example, with [`dataCache(for:pipeline:)`](https://kean-org.github.io/docs/nuke/reference/10.0.0/ImagePipelineDelegate/) method you can specify a disk cache for each request. With [`willâ€‹Cache(data:â€‹image:â€‹for:â€‹pipeline:â€‹completion:â€‹)`](https://kean-org.github.io/docs/nuke/reference/10.0.0/ImagePipelineDelegate/#imagepipelinedelegate.willcache(data:image:for:pipeline:completion:)) you can disable caching per-request or modify the cached data. And there are more.\r\n- Deprecated `ImagePipelineObserving` protocol is now fully covered by `ImagePipeline.Delegate`\r\n\r\n## Performance\r\n\r\n- `ImageRequest` size in memory reduced from 176 bytes to just 48 bytes (3.7x smaller), which is due to the OptionSet usage and also reordering of properties to take advantage of gaps in memory stride. The size of other types was also reduced, but not as dramatically. For example, `ImageTask` and `ImagePipeline.Configuration` now also take a bit less memory\r\n- Coalescing now supports even more scenarios. For example, setting `ImageRequest` `options` with a cache policy no longer prevents coalescing of data tasks.\r\n- The pipeline now performs memory cache lookup of intermediate (not all processors are applied) progressive image previews and apply the remaining processors on demand\r\n- Extend fast track decoding to the disk cache lookup\r\n- For cache policies that require image encoding, encode decompressed images instead of uncompressed ones\r\n\r\n## Nuke Builder\r\n\r\n[NukeBuilder](https://github.com/kean/NukeBuilder/) is a package that adds a convenience API for creating image requests inspired by SwiftUI. It was updated with support Nuke 10 and some quality-of-life improvements.\r\n\r\n- Rename package to NukeBuilder\r\n- Update to Nuke 10.0\r\n- Add [`ImageRequestConvertible`](https://kean-org.github.io/docs/nuke/reference/10.0.0/ImageRequestConvertible/) support which means it now supports more types: `URLRequest` and `String`\r\n- Add Combine support\r\n- Add `ImagePipeline` typealias for convenience â€“ you only need to import `NukeBuilder` in many cases\r\n\r\n## Other\r\n\r\n- Increase minimum required Xcode version to 12; no changes to the supported platforms\r\n- `Nuke.loadImage()` methods now work with optional image requests. If the request is `nil`, it handles the scenario the same way as failure.\r\n- `ImageRequest` now also works with optional `URL`\r\n- `String` now also conforms to `ImageRequestConvertible`, closes [#421](https://github.com/kean/Nuke/issues/421)\r\n- Optional `URL` now also conforms to `ImageRequestConvertible`\r\n- Streamline pipeline callback closures\r\n- Pass failing processor to `ImagePipeline.Error.processingFailed`\r\n- Add type-safe `ImageContainer.UserInfoKey` and `ImageRequest.UserInfoKey`\r\n- Pass additional parameter `Data?` to `nuke_display` (ImageView extensions)\r\n- `ImagePrefetcher` now always sets the priority of the requests to its priority\r\n- `ImagePrefetcher` now works with `ImageRequestConvertible`, adding support for `URLRequest` and `String`\r\n- `ImagePipeline` can now be invalidated with `invalidate()` method\r\n\r\n## Deprecations\r\n\r\nThere are deprecation warnings in place to help guide you through the migration process.\r\n\r\n- Deprecate `ImageRequestOptions`, use `ImageRequest.Options` instead (it's not just the name change)\r\n- Deprecate `ImagePipelineObserving`, use `imageTask(_:,didReceiveEvent)` from `ImagePipeline.Delegate` instead\r\n- Rename `isDeduplicationEnabled` to `isTaskCoalescingEnabled`\r\n- Deprecate `animatedImageData` associated object for platform images. Use `data` property of `ImageContainer` instead. `animatedImageData` was initially soft-deprecated in Nuke 9.0.\r\n- Deprecate the default `processors` in `ImagePipeline`; use the new `processors` options in `ImageLoadingOptions` instead\r\n- Deprecate `ImageEncoder` and `ImageDecoder` typealiases.\r\n",
    "createdAt" : "2021-06-01T00:42:56+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTQzODYzNDIy",
    "owner" : "kean",
    "publishedAt" : "2021-06-01T00:48:21+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 10.0",
    "url" : "https://github.com/kean/Nuke/releases/tag/10.0.0",
    "version" : "10.0.0"
  },
  {
    "body" : "- Fix watchOS target",
    "createdAt" : "2021-06-02T10:10:50+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTQzOTQ0NzAz",
    "owner" : "kean",
    "publishedAt" : "2021-06-02T10:11:10+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 10.0.1",
    "url" : "https://github.com/kean/Nuke/releases/tag/10.0.1",
    "version" : "10.0.1"
  },
  {
    "body" : "- Remove code deprecated in Nuke 9.4.1",
    "createdAt" : "2022-04-24T08:12:34+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "RE_kwDOAeh5z84D4jFo",
    "owner" : "kean",
    "publishedAt" : "2022-04-24T08:13:00+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 10.7.2",
    "url" : "https://github.com/kean/Nuke/releases/tag/10.7.2",
    "version" : "10.7.2"
  },
  {
    "body" : "- Add async/await support (requires Xcode 13.3) â€“ [#532](https://github.com/kean/Nuke/pull/532)\r\n\r\n```swift\r\nextension ImagePipeline {\r\n    public func loadImage(with request: ImageRequestConvertible) async throws -> ImageResponse\r\n    public func loadData(with request: ImageRequestConvertible) async throws -> (Data, URLResponse?)\r\n}\r\n\r\nextension FetchImage {\r\n    public func load(_ action: @escaping () async throws -> ImageResponse)\r\n}\r\n```",
    "createdAt" : "2022-04-24T23:55:45+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "RE_kwDOAeh5z84D4nAs",
    "owner" : "kean",
    "publishedAt" : "2022-04-24T23:58:31+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 10.8.0",
    "url" : "https://github.com/kean/Nuke/releases/tag/10.8.0",
    "version" : "10.8.0"
  },
  {
    "body" : "- Rename recently added async/await `loadImage(with:)` method to `image(for:)`, and `loadData(with:)` to `data(for:)` (to match Apple naming convention)\r\n- Add `Sendable` conformance to some of the types",
    "createdAt" : "2022-05-02T00:42:44+09:00",
    "fetchedFromAPIAt" : "2022-05-02T09:46:01+09:00",
    "id" : "RE_kwDOAeh5z84D63K9",
    "owner" : "kean",
    "publishedAt" : "2022-05-02T00:43:26+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 10.9.0",
    "url" : "https://github.com/kean/Nuke/releases/tag/10.9.0",
    "version" : "10.9.0"
  },
  {
    "body" : "\r\n- Improve image decompressiong performance on iOS 15 and tvOS 15 by using [preparingForDispaly()](https://developer.apple.com/documentation/uikit/uiimage/3750834-preparingfordisplay?language=o_5) (requires Xcode 13) - [#512](https://github.com/kean/Nuke/pull/512)\r\n- On iOS 15, tvOS 15, image decompressiong now preserves 8 bits per pixel for grayscale images - [#512](https://github.com/kean/Nuke/pull/512)\r\n- Adopt extended static member lookup ([SE-0299](https://github.com/apple/swift-evolution/blob/main/proposals/0299-extend-generic-static-member-lookup.md)) (requires Xcode 13) - [#513](https://github.com/kean/Nuke/pull/513)\r\n\r\n```swift\r\n// Before\r\nImageRequest(url: url, processors: [ImageProcessors.Resize(width: 320)])\r\n\r\n// After\r\nImageRequest(url: url, processors: [.resize(width: 320)])\r\n```\r\n\r\n- `ImageRequest` now takes a *non-optional* array of image processors in its initializers. This change is required to mitigate an Xcode issue where it won't suggest code-completion for [SE-0299](https://github.com/apple/swift-evolution/blob/main/proposals/0299-extend-generic-static-member-lookup.md) - [#513](https://github.com/kean/Nuke/pull/513)\r\n- Add `ImageDecoders.Video` (registered by default)",
    "createdAt" : "2021-10-24T03:22:48+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "RE_kwDOAeh5z84DGCtJ",
    "owner" : "kean",
    "publishedAt" : "2021-10-24T03:29:43+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 10.5.0",
    "url" : "https://github.com/kean/Nuke/releases/tag/10.5.0",
    "version" : "10.5.0"
  },
  {
    "body" : "- Fix build for Catalyst",
    "createdAt" : "2021-10-24T06:03:59+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "RE_kwDOAeh5z84DGDS-",
    "owner" : "kean",
    "publishedAt" : "2021-10-24T06:04:31+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 10.5.1",
    "url" : "https://github.com/kean/Nuke/releases/tag/10.5.1",
    "version" : "10.5.1"
  },
  {
    "body" : "- Revert `preparingForDisplay` changes made in [#512](https://github.com/kean/Nuke/pull/512)\r\n- Add URLSession & URLSessionDataTask descriptions - [#517](https://github.com/kean/Nuke/pull/517), thanks to [Stavros Schizas](https://github.com/sschizas)",
    "createdAt" : "2021-12-02T21:53:23+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "RE_kwDOAeh5z84DP303",
    "owner" : "kean",
    "publishedAt" : "2021-12-02T21:53:42+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 10.5.2",
    "url" : "https://github.com/kean/Nuke/releases/tag/10.5.2",
    "version" : "10.5.2"
  },
  {
    "body" : "- Fix M4V support â€“ [#523](https://github.com/kean/Nuke/pull/523), thanks to [Son Changwoo](https://github.com/kor45cw)\r\n- Make `ImagePrefetcher` `didComplete` closure public â€“ [#528](https://github.com/kean/Nuke/pull/515), thanks to [Winston Du](https://github.com/winstondu)\r\n- Rename internal `didEnterBackground` selector - [#531](https://github.com/kean/Nuke/issues/531)",
    "createdAt" : "2022-01-24T23:48:43+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "RE_kwDOAeh5z84Dcox4",
    "owner" : "kean",
    "publishedAt" : "2022-01-25T00:01:50+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 10.7.0",
    "url" : "https://github.com/kean/Nuke/releases/tag/10.7.0",
    "version" : "10.7.0"
  },
  {
    "body" : "- Fix intermittent SwiftUI crash in NukeUI/FetchImage on onDisappear called during dealloc",
    "createdAt" : "2022-01-28T06:47:58+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "RE_kwDOAeh5z84Ddy2V",
    "owner" : "kean",
    "publishedAt" : "2022-01-28T06:48:30+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 10.7.1",
    "url" : "https://github.com/kean/Nuke/releases/tag/10.7.1",
    "version" : "10.7.1"
  },
  {
    "body" : "- Remove APIs deprecated in Nuke 10.0\r\n- Increase minimum deployment targets to iOS 12.0, watchOS 5.0, macOS 10.14, tvOS 12.0",
    "createdAt" : "2022-05-22T02:06:50+09:00",
    "fetchedFromAPIAt" : "2022-05-22T09:45:39+09:00",
    "id" : "RE_kwDOAeh5z84EBVkx",
    "owner" : "kean",
    "publishedAt" : "2022-05-22T02:18:53+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 10.10.0",
    "url" : "https://github.com/kean/Nuke/releases/tag/10.10.0",
    "version" : "10.10.0"
  },
  {
    "body" : "- Add associated `Data` to `ImagePipeline.Error.decodingFailed` - [#545](https://github.com/kean/Nuke/pull/545), thanks to [Shai Mishali](https://github.com/freak4pc)\r\n\r\n> There are other major improvements to error reporting coming in [Nuke 11](https://github.com/kean/Nuke/pull/547)",
    "createdAt" : "2022-06-09T06:13:25+09:00",
    "fetchedFromAPIAt" : "2022-06-09T09:49:15+09:00",
    "id" : "RE_kwDOAeh5z84EHN9A",
    "owner" : "kean",
    "publishedAt" : "2022-06-09T06:14:07+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 10.11.0",
    "url" : "https://github.com/kean/Nuke/releases/tag/10.11.0",
    "version" : "10.11.0"
  },
  {
    "body" : "- Fix an issue with data not always being attached to an error when decoding fails",
    "createdAt" : "2022-06-10T09:54:26+09:00",
    "fetchedFromAPIAt" : "2022-06-11T09:45:11+09:00",
    "id" : "RE_kwDOAeh5z84EHpN4",
    "owner" : "kean",
    "publishedAt" : "2022-06-10T10:00:34+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 10.11.1",
    "url" : "https://github.com/kean/Nuke/releases/tag/10.11.1",
    "version" : "10.11.1"
  },
  {
    "body" : "- Revert changes to the deployment targets introduced in 10.10 release\r\n\r\n> The minimum deployment targets will be increased in the upcoming major release",
    "createdAt" : "2022-06-10T11:21:48+09:00",
    "fetchedFromAPIAt" : "2022-06-11T09:45:11+09:00",
    "id" : "RE_kwDOAeh5z84EHqCb",
    "owner" : "kean",
    "publishedAt" : "2022-06-10T11:29:26+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 10.11.2",
    "url" : "https://github.com/kean/Nuke/releases/tag/10.11.2",
    "version" : "10.11.2"
  },
  {
    "body" : "**Nuke 11** embraces **Swift Structured Concurrency** with full feature parity with completion-based APIs. With **NukeUI** now being part of the main repo, adding async image loading into your apps is easier than ever. There are no major source-breaking changes, but tens of API refinements to make the framework more ergonomic.\r\n\r\n> For feedback, please use [Nuke 11 Discussion Channel](https://github.com/kean/Nuke/discussions/562)\r\n\r\n## Structured Concurrency\r\n\r\nExtend Async/Await APIs to have complete feature parity with the existing completion-based APIs paving the road for its eventual deprecation and removal in the future major versions.\r\n\r\n- Make `@MainActor` the following types: `FetchImage`, `LazyImage`, `LazyImageView`, Nuke `loadImage(into:)` method\r\n- Make most types `Sendable`, including `ImagePipeline`, `ImageRequest`,` ImageResponse`, `ImageContainer`, `ImageTask`, and many more\r\n- Add `ImageTaskDelegate` to achieve complete feature-parity with completion-based APIs - [#559](https://github.com/kean/Nuke/pull/559)\r\n\r\nLoading an image and monitoring download progress:\r\n\r\n```swift\r\nfunc loadImage() async throws {\r\n    let response = try await pipeline.image(for: \"https://example.com/image.jpeg\", delegate: self)\r\n}\r\n\r\nfunc imageTaskWillStart(_ task: ImageTask) {\r\n    // You can capture a task instance here to change priority later, etc\r\n}\r\n\r\nfunc imageTask(_ task: ImageTask, didUpdateProgress progress: (completed: Int64, total: Int64)) {\r\n    print(\"Image task did update progress: \\(progress)\")\r\n}\r\n```\r\n\r\n- Add `images(for:)` method that returns an AsyncThrowingStream to represent progressive decoding - [#558](https://github.com/kean/Nuke/pull/558)\r\n\r\nProgressively loading an image using an async sequence:\r\n\r\n```swift\r\nfor try await response in pipeline.images(for: \"https://example.com/image.jpeg\") {\r\n   print(\"Decoded a new image: \\(response)\")\r\n}\r\n```\r\n\r\n- `ImageRequest` now accepts async/await function to fetch data as a resource\r\n\r\n\r\n## NukeUI and Nuke Extensions\r\n\r\n- Move [NukeUI](https://github.com/kean/NukeUI) to the main Nuke repo\r\n- Remove deprecated APIs from NukeUI\r\n- NukeUI no longer exposes public Gifu dependency or its APIs\r\n- Move `UIImageView` / `NSImageView` extensions to a separate target `NukeExtensions` and soft-deprecated them - [#555](https://github.com/kean/Nuke/pull/555)\r\n\r\n## Error Reporting Improvements\r\n\r\n- Make an \"advanced\" version of `ImageProcessing` APIs throwing\r\n- Make `ImageDecoding` throwing\r\n- Add support for throwing processing in `ImageProcessors.CoreImageFilter`\r\n- Add `ImageDecoding` instance, `ImageDecodingContext`, and underlying error to `.decodingFailed` error case\r\n- Add `ImageProcessingContext` and underlying error to `.processingFailed` error case\r\n- Add `.dataMissingInCache` error case for a scenario where data is missing in cache and download is disabled using `.returnCacheDataDontLoad`.\r\n- Add `.dataIsEmpty` error case for a scenario where the data loader doesn't report an error, but the response is empty.\r\n- Add `.decoderNotRegistered(context:)` error case for a scenario where no decoders are registered for the downloaded data. This should never happen unless you remove the default decoder from the registry.\r\n- Add `.imageRequestMissing` error case for a scenario when the load image method is called with no image request.\r\n- Add `cacheType` to `ImageDecodingContext`\r\n\r\n## Other Changes\r\n\r\n- Increase the minimum supported Xcode version to 13.3\r\n- Increase minimum supported platforms: iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15\r\n- Use [`preparingForDisplay`](https://developer.apple.com/documentation/uikit/uiimage/3750834-preparingfordisplay) on iOS 15 and tvOS 15\r\n- Add `ImageRequest` to `ImageResponse`\r\n- Automatically discover typos on CI - [#549](https://github.com/kean/Nuke/pull/549)\r\n- Add an option to skip load data immediately by skipping the data loading queue  - [#552](https://github.com/kean/Nuke/pull/552)\r\n- Implement custom disk caching for requests backed by data publishers - [#553](https://github.com/kean/Nuke/pull/553)\r\n- Deprecate `ImageDecoderRegistering`\r\n- Make `ImageDecoderRegistry` initializer private\r\n- Make `ImageDecodingContext`,  `ImageProcessingContext`, `ImageResponse` properties publicly writable\r\n- Rename `isFinal` in `ImageProcessingContext` to `isCompleted` to match the renaming APIs\r\n- `DataLoader` now collects metrics `URLSessionTaskMetrics` and reports them using an existing `DataLoaderObserving` protocol\r\n- Add static `default` and `imageIO` functions to `ImageEncoding` protocol for easy creating of encoders\r\n- Make `ImageCache` `ttl` optional instead of using `0` as a \"never expires\" indicator\r\n- Add `sizeLimit` to `withDataCache` `ImagePipeline.Configuration` initializer\r\n- Remove `WKInterfaceObject` support (in favor of SwiftUI)\r\n- Remove `ImageType` typealias (deprecated in 10.5)\r\n- Remove `Cancellable` conformance from `URLSessionTask`",
    "createdAt" : "2022-06-15T10:20:31+09:00",
    "fetchedFromAPIAt" : "2022-06-16T09:52:27+09:00",
    "id" : "RE_kwDOAeh5z84EJBgq",
    "owner" : "kean",
    "publishedAt" : "2022-06-15T10:21:47+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 11.0 (Beta 1)",
    "url" : "https://github.com/kean/Nuke/releases/tag/11.0.0-beta.1",
    "version" : "11.0.0-beta.1"
  },
  {
    "body" : "In addition to changes made in [Nuke 11.0 (Beta 1)](https://github.com/kean/Nuke/releases/tag/11.0.0-beta.1):\r\n\r\n- Add DocC support. For the latest documentation, use the docs from the project repo.\r\n- Add `imageCache(for:pipeline:)` method to `ImagePipelineDelegate`\r\n- Remove public `ImagePublisher` class (make it internal)\r\n- `ImageProcessing` types that implement `Hashable` protocol now get default `hashableIdentifier` implementation - [#563](https://github.com/kean/Nuke/pull/563)\r\n- Add a way to customize decompression using `ImagePipelineDelegate`\r\n- Remove `CocoaPods` support\r\n- Remove `ImageTaskEvent` and consolidate it with the new `ImageTaskDelegate` API - [#564](https://github.com/kean/Nuke/pull/564)\r\n- Add `ImageTask.Progress` to simplify progress reporting APIs\r\n- Add `ImageRequest.Options.skipDecompression`\r\n- Remove progress monitoring using `Foundation.Progress`\r\n- Remove `ImageRequestConvertible` conformance from `String`\r\n\r\n> For feedback, please use [Nuke 11 Discussion Channel](https://github.com/kean/Nuke/discussions/562)",
    "createdAt" : "2022-06-18T10:41:59+09:00",
    "fetchedFromAPIAt" : "2022-06-19T09:49:35+09:00",
    "id" : "RE_kwDOAeh5z84EKGYW",
    "owner" : "kean",
    "publishedAt" : "2022-06-18T10:43:32+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 11.0 (Beta 2)",
    "url" : "https://github.com/kean/Nuke/releases/tag/11.0.0-beta.2",
    "version" : "11.0.0-beta.2"
  },
  {
    "body" : "- Docs completely rewriting using DocC and hosted on GitHub: [Nuke](https://kean-docs.github.io/nuke/documentation/nuke/), [NukeUI](https://kean-docs.github.io/nukeui/documentation/nukeui/), [NukeExtensions](https://kean-docs.github.io/nukeextensions/documentation/nukeextensions/)\r\n- Deprecate `ImageCaching` extension that works with `ImageRequest` \r\n- Make `ImageCacheKey` initializer with ``ImageRequest`` public\r\n- Add static method `ImageProcessing.custom(id:closure:)` for creating custom processors\r\n- Make `ImagePipeline.Cache` `Sendable`\r\n- Add `ImageResponse` typealias to NukeUI\r\n- Use new `ImageTask.Progress` in NukeUI\r\n- When pipeline is invalidated, it now throws a new `.pipelineInvalidated` error for new requests",
    "createdAt" : "2022-06-25T03:14:15+09:00",
    "fetchedFromAPIAt" : "2022-06-25T09:49:30+09:00",
    "id" : "RE_kwDOAeh5z84EM_gA",
    "owner" : "kean",
    "publishedAt" : "2022-06-25T03:14:51+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 11.0 (Beta 3)",
    "url" : "https://github.com/kean/Nuke/releases/tag/11.0.0-beta.3",
    "version" : "11.0.0-beta.3"
  },
  {
    "body" : "- Soft-deprecate `ImageRequestConvertible` and use `ImageRequest` and `URL` directly in all news APIs for better discoverability and performance  - [#567](https://github.com/kean/Nuke/pull/567)\r\n- Rename `ImagePipeline/Configuration/DataCachePolicy` to `ImagePipeline/DataCachePolicy`\r\n- More documentation improvements: [Nuke](https://kean-docs.github.io/nuke/documentation/nuke/), [NukeUI](https://kean-docs.github.io/nukeui/documentation/nukeui/), [NukeExtensions](https://kean-docs.github.io/nukeextensions/documentation/nukeextensions/)",
    "createdAt" : "2022-07-02T06:36:56+09:00",
    "fetchedFromAPIAt" : "2022-07-02T09:51:19+09:00",
    "id" : "RE_kwDOAeh5z84EPP_b",
    "owner" : "kean",
    "publishedAt" : "2022-07-02T06:48:37+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 11.0 (Beta 4)",
    "url" : "https://github.com/kean/Nuke/releases/tag/11.0.0-beta.4",
    "version" : "11.0.0-beta.4"
  },
  {
    "body" : "- Fix [#511](https://github.com/kean/Nuke/issues/511) `OSAtomic` deprecation warnings - [#573](https://github.com/kean/Nuke/pull/573)\r\n- Revert `ImageTask` `priority` replacement with `setPriority(_:)` method\r\n- Revert `ImageDecoderRegistry` `init` being made private\r\n- Add `ImageTask.State`. Improve performance when canceling and changing priority of completed tasks.",
    "createdAt" : "2022-07-03T01:26:35+09:00",
    "fetchedFromAPIAt" : "2022-07-03T09:53:03+09:00",
    "id" : "RE_kwDOAeh5z84EPU7R",
    "owner" : "kean",
    "publishedAt" : "2022-07-03T01:38:38+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 11.0 (Beta 5)",
    "url" : "https://github.com/kean/Nuke/releases/tag/11.0.0-beta.5",
    "version" : "11.0.0-beta.5"
  },
  {
    "body" : "The first Nuke 11.0 release candidate. No changes from Xcode 11.0 (Beta 5) apart from some documentation improvements.",
    "createdAt" : "2022-07-06T06:44:08+09:00",
    "fetchedFromAPIAt" : "2022-07-06T09:55:24+09:00",
    "id" : "RE_kwDOAeh5z84EQD3_",
    "owner" : "kean",
    "publishedAt" : "2022-07-06T06:57:15+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 11.0 (RC1)",
    "url" : "https://github.com/kean/Nuke/releases/tag/11.0.0-rc.1",
    "version" : "11.0.0-rc.1"
  },
  {
    "body" : "**Nuke 11** embraces **Swift Structured Concurrency** with full feature parity with legacy completion-based APIs. **NukeUI** is now part of the main repo. Docs were completely rewritten using DocC and hosted on GitHub: [Nuke](https://kean-docs.github.io/nuke/documentation/nuke/), [NukeUI](https://kean-docs.github.io/nukeui/documentation/nukeui/), [NukeExtensions](https://kean-docs.github.io/nukeextensions/documentation/nukeextensions/).\r\n\r\nThere are no major source-breaking changes in this release. Instead, it adds dozens of API refinements to make the framework more ergonomic.\r\n\r\n- Increase the minimum supported Xcode version to 13.3\r\n- Increase minimum supported platforms: iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15\r\n\r\n## Structured Concurrency\r\n\r\nExtend Async/Await APIs to have complete feature parity with the existing completion-based APIs paving the road for its eventual deprecation and removal in the future major versions.\r\n\r\n- Add `@MainActor` to the following types: `FetchImage`, `LazyImage`, `LazyImageView`, Nuke `loadImage(into:)` method\r\n- Add `Sendable` to most of the Nuke types, including `ImagePipeline`, `ImageRequest`,` ImageResponse`, `ImageContainer`, `ImageTask`, and more\r\n- Add `ImageTaskDelegate` to achieve complete feature-parity with completion-based APIs - [#559](https://github.com/kean/Nuke/pull/559)\r\n- `ImageRequest` now accepts async/await function to fetch data as a resource\r\n\r\nLoading an image and monitoring download progress:\r\n\r\n```swift\r\nfunc loadImage() async throws {\r\n    let response = try await pipeline.image(for: \"https://example.com/image.jpeg\", delegate: self)\r\n}\r\n\r\nfunc imageTaskCreated(_ task: ImageTask) {\r\n    // You can capture the task instance here to change priority later, etc\r\n}\r\n\r\nfunc imageTask(_ task: ImageTask, didUpdateProgress progress: ImageTask.Progress) {\r\n    // Update progress\r\n}\r\n\r\nfunc imageTask(_ task: ImageTask, didReceivePreview response: ImageResponse) {\r\n    // Display progressively decoded image\r\n}\r\n\r\n// And more...\r\n```\r\n\r\n## NukeUI and NukeExtensions\r\n\r\n**NukeUI** is now part of the main repo and the existing UIKit and AppKit UI extensions were moved from the main module to **NukeExtensions** and soft-deprecated.\r\n\r\n- Move [NukeUI](https://github.com/kean/NukeUI) to the main Nuke repo\r\n- Move `UIImageView` / `NSImageView` extensions to a separate target `NukeExtensions` and soft-deprecated them - [#555](https://github.com/kean/Nuke/pull/555)\r\n- Remove deprecated APIs from NukeUI\r\n- Add `ImageResponse` typealias to NukeUI\r\n- Use new `ImageTask.Progress` in NukeUI\r\n- NukeUI no longer exposes public Gifu dependency or its APIs\r\n\r\n## Error Reporting Improvements\r\n\r\nA complete overhaul of `ImagePipeline.Error` with many new cases covering every single point of failure in the pipeline.\r\n\r\n- Add `throws` to \"advanced\" `ImageProcessing`\r\n- Add `throws` to `ImageDecoding`\r\n- Add support for throwing processing in `ImageProcessors.CoreImageFilter`\r\n- Add `ImageDecoding` instance, `ImageDecodingContext`, and underlying error to `.decodingFailed` error case\r\n- Add `ImageProcessingContext` and underlying error to `.processingFailed` error case\r\n- Add `.dataMissingInCache` error case for a scenario where data is missing in cache and download is disabled using `.returnCacheDataDontLoad`.\r\n- Add `.dataIsEmpty` error case for a scenario where the data loader doesn't report an error, but the response is empty.\r\n- Add `.decoderNotRegistered(context:)` error case for a scenario where no decoders are registered for the downloaded data. This should never happen unless you remove the default decoder from the registry.\r\n- Add `.imageRequestMissing` error case for a scenario when the load image method is called with no image request.\r\n- Add `cacheType` to `ImageDecodingContext`\r\n\r\n## Other Changes\r\n\r\n- Fix [#511](https://github.com/kean/Nuke/issues/511) `OSAtomic` deprecation warnings - [#573](https://github.com/kean/Nuke/pull/573)\r\n- Add `ImageTask.State`. Improve performance when canceling and changing priority of completed tasks.\r\n- Add `ImageTask.Progress` to simplify progress reporting APIs\r\n- Add `ImageRequest.Options.skipDecompression`\r\n- Add public `ImageCacheKey` initializer with ``ImageRequest``\r\n- Add `imageCache(for:pipeline:)` method to `ImagePipelineDelegate`\r\n- Add automatic `hashableIdentifier` implementation to `ImageProcessing` types that implement `Hashable` protocol - [#563](https://github.com/kean/Nuke/pull/563)\r\n- Add a way to customize decompression using `ImagePipelineDelegate`\r\n- Add `ImageRequest` to `ImageResponse`\r\n- Improve decompression performance by using [`preparingForDisplay`](https://developer.apple.com/documentation/uikit/uiimage/3750834-preparingfordisplay) on iOS 15 and tvOS 15\r\n- Add metrics reporting using `DataLoaderObserving` protocol\r\n- Add custom disk caching for requests backed by data publishers - [#553](https://github.com/kean/Nuke/pull/553)\r\n- Add `.pipelineInvalidated` error that is thrown for new requests started on the invalidated pipeline\r\n- Add public write access to `ImageDecodingContext`,  `ImageProcessingContext`, `ImageResponse` properties\r\n- Add static `default` and `imageIO` functions to `ImageEncoding` protocol for easy creating of encoders\r\n- Add `sizeLimit` to `withDataCache` `ImagePipeline.Configuration` initializer\r\n- Make `ImageCache` `ttl` optional instead of using `0` as a \"never expires\" indicator\r\n\r\n## Removals and Deprecations\r\n\r\n- Soft-deprecate `ImageRequestConvertible` and use `ImageRequest` and `URL` directly in all news APIs for better discoverability and performance  - [#567](https://github.com/kean/Nuke/pull/567)\r\n- Deprecate `ImageDecoderRegistering`\r\n- Deprecate `ImageCaching` extension that works with `ImageRequest` \r\n- Rename `isFinal` in `ImageProcessingContext` to `isCompleted` to match the remaining APIs\r\n- Rename `ImagePipeline/Configuration/DataCachePolicy` to `ImagePipeline/DataCachePolicy`\r\n- Remove `ImageRequestConvertible` conformance from `String`\r\n- Remove `ImageTaskEvent` and consolidate it with the new `ImageTaskDelegate` API - [#564](https://github.com/kean/Nuke/pull/564)\r\n- Remove progress monitoring using `Foundation.Progress`\r\n- Remove `WKInterfaceObject` support (in favor of SwiftUI)\r\n- Remove `ImageType` typealias (deprecated in 10.5)\r\n- Remove `Cancellable` conformance from `URLSessionTask`\r\n- Remove public `ImagePublisher` class (make it internal)\r\n\r\n## Non-Code Changes\r\n\r\n- Automatically discover typos on CI - [#549](https://github.com/kean/Nuke/pull/549)\r\n- Remove `CocoaPods` support",
    "createdAt" : "2022-07-20T22:01:21+09:00",
    "fetchedFromAPIAt" : "2022-07-21T09:55:44+09:00",
    "id" : "RE_kwDOAeh5z84EUSBw",
    "owner" : "kean",
    "publishedAt" : "2022-07-20T22:01:44+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 11.0",
    "url" : "https://github.com/kean/Nuke/releases/tag/11.0.0",
    "version" : "11.0.0"
  },
  {
    "body" : "- Fix an issue with cancellation of requests created with Combine publishers - [#576](https://github.com/kean/Nuke/pull/576), thanks to [douknow](https://github.com/douknow)",
    "createdAt" : "2022-07-25T06:44:56+09:00",
    "fetchedFromAPIAt" : "2022-07-25T09:52:27+09:00",
    "id" : "RE_kwDOAeh5z84EVXIU",
    "owner" : "kean",
    "publishedAt" : "2022-07-25T06:48:32+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 11.0.1",
    "url" : "https://github.com/kean/Nuke/releases/tag/11.0.1",
    "version" : "11.0.1"
  },
  {
    "body" : "- Add missing content mode to NukeUI - [#582](https://github.com/kean/Nuke/pull/582), thanks to [Ethan Pippin](https://github.com/LePips)\r\n- Add `DataLoader` `delegate` for easy Pulse integration (please use it with Pulse 2.0 which is optimized for images) - [#583](https://github.com/kean/Nuke/pull/583)\r\n\r\n```swift\r\n(ImagePipeline.shared.configuration.dataLoader as? DataLoader)?.delegate = URLSessionProxyDelegate()\r\n```\r\n\r\n\r\n",
    "createdAt" : "2022-08-08T04:37:13+09:00",
    "fetchedFromAPIAt" : "2022-08-08T09:49:08+09:00",
    "id" : "RE_kwDOAeh5z84EZrXh",
    "owner" : "kean",
    "publishedAt" : "2022-08-08T04:40:39+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 11.1",
    "url" : "https://github.com/kean/Nuke/releases/tag/11.1.0",
    "version" : "11.1.0"
  },
  {
    "body" : "- **Breaking** Progressive decoding is now disabled by default as a way to mitigate\r\n- Add `prefersIncrementalDelivery` to `DataLoader`. When progressive decoding is disabled, it now uses `prefersIncrementalDelivery` on `URLSessionTask`, slightly increasing the performance.\r\n- Fix an issue with placeholder not being shown by `LazyImage` when the initial URL is `nil` â€“ [#586](https://github.com/kean/Nuke/pull/586), thanks to [Jeffrey](https://github.com/jeffreykuiken)\r\n- Add convenience options to `Image` and `LazyImage`: `resizingMode(_:)`, `videoRenderingEnabled(_:)`, `videoLoopingEnabled(_:)`, `animatedImageRenderingEnabled(_:)`\r\n- Fix an issue where `AVPlayerLayer` was created eagerly\r\n- Disable `prepareForDisplay` by default and add a configuration option to enable it",
    "createdAt" : "2022-08-17T09:17:20+09:00",
    "fetchedFromAPIAt" : "2022-08-17T09:57:42+09:00",
    "id" : "RE_kwDOAeh5z84Ecddq",
    "owner" : "kean",
    "publishedAt" : "2022-08-17T09:28:56+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 11.1.1",
    "url" : "https://github.com/kean/Nuke/releases/tag/11.1.1",
    "version" : "11.1.1"
  },
  {
    "body" : "- Add support for Xcode 14.0\r\n- Fix [#595](https://github.com/kean/Nuke/issues/595) â€“ compilation issue on macOS",
    "createdAt" : "2022-09-11T05:57:52+09:00",
    "fetchedFromAPIAt" : "2022-09-11T09:59:29+09:00",
    "id" : "RE_kwDOAeh5z84ElAFK",
    "owner" : "kean",
    "publishedAt" : "2022-09-11T05:58:29+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 11.2.0",
    "url" : "https://github.com/kean/Nuke/releases/tag/11.2.0",
    "version" : "11.2.0"
  },
  {
    "body" : "- Fix an issue with Mac Catalyst on Xcode 14.0",
    "createdAt" : "2022-09-11T08:06:43+09:00",
    "fetchedFromAPIAt" : "2022-09-11T09:59:29+09:00",
    "id" : "RE_kwDOAeh5z84ElAmB",
    "owner" : "kean",
    "publishedAt" : "2022-09-11T08:07:09+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 11.2.1",
    "url" : "https://github.com/kean/Nuke/releases/tag/11.2.1",
    "version" : "11.2.1"
  },
  {
    "body" : "* Add support for loading image into TVPosterView by @lukaskukacka in https://github.com/kean/Nuke/pull/602",
    "createdAt" : "2022-09-18T05:17:02+09:00",
    "fetchedFromAPIAt" : "2022-09-18T10:01:33+09:00",
    "id" : "RE_kwDOAeh5z84EnfmX",
    "owner" : "kean",
    "publishedAt" : "2022-09-18T05:17:24+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 11.3.0",
    "url" : "https://github.com/kean/Nuke/releases/tag/11.3.0",
    "version" : "11.3.0"
  },
  {
    "body" : "## Fixes\r\n- Fix deprecated `withTaskCancellationHandler` usage - [#614](https://github.com/kean/Nuke/pull/614), thanks to [@swasta](https://github.com/swasta)\r\n- Fix xcodebuild & docc build issue on Xcode 14.0.1 - [#609](https://github.com/kean/Nuke/issues/609)\r\n\r\n## New Contributors\r\n* @swasta made their first contribution in https://github.com/kean/Nuke/pull/614\r\n",
    "createdAt" : "2022-10-22T22:45:20+09:00",
    "fetchedFromAPIAt" : "2022-10-23T10:05:32+09:00",
    "id" : "RE_kwDOAeh5z84Ez2ga",
    "owner" : "kean",
    "publishedAt" : "2022-10-22T22:46:12+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 11.3.1",
    "url" : "https://github.com/kean/Nuke/releases/tag/11.3.1",
    "version" : "11.3.1"
  },
  {
    "body" : "- Correct the release commit/branch",
    "createdAt" : "2022-12-16T03:46:38+09:00",
    "fetchedFromAPIAt" : "2022-12-17T09:40:34+09:00",
    "id" : "RE_kwDOAeh5z84FI3hn",
    "owner" : "kean",
    "publishedAt" : "2022-12-16T04:11:10+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 11.4.1",
    "url" : "https://github.com/kean/Nuke/releases/tag/11.4.1",
    "version" : "11.4.1"
  },
  {
    "body" : "- Add `isVideoFrameAnimationEnabled` option to NukeUI views, thanks to [@maciesielka](https://github.com/maciesielka) ",
    "createdAt" : "2022-12-15T10:57:02+09:00",
    "fetchedFromAPIAt" : "2022-12-17T09:40:34+09:00",
    "id" : "RE_kwDOAeh5z84FIdYP",
    "owner" : "kean",
    "publishedAt" : "2022-12-15T10:57:37+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 11.4.0",
    "url" : "https://github.com/kean/Nuke/releases/tag/11.4.0",
    "version" : "11.4.0"
  },
  {
    "body" : "## Changes\r\n- `DataLoader/delegate` now gets called for all `URLSession/delegate` methods, not just the ones required by [Pulse](https://github.com/kean/Pulse). It allows you to modify `DataLoader` behavior in new ways, e.g. for handling authentication challenges.\r\n- Fix an issue with `ImagePrefetcher/didComplete` not being called when images are in the memory cache, thanks to [@0xceed](https://github.com/0xceed) - [#635](https://github.com/kean/Nuke/pull/635)\r\n- Move .docc folders back to Sources/, so that the Nuke docs are now again available in Xcode\r\n- Add new unit tests, thanks to [@zzmasoud](https://github.com/zzmasoud) - [#626](https://github.com/kean/Nuke/pull/626)\r\n\r\n## New Contributors\r\n* @0xceed made their first contribution in https://github.com/kean/Nuke/pull/635\r\n* @zzmasoud made their first contribution in https://github.com/kean/Nuke/pull/626\r\n",
    "createdAt" : "2022-12-18T03:21:53+09:00",
    "fetchedFromAPIAt" : "2022-12-18T09:41:06+09:00",
    "id" : "RE_kwDOAeh5z84FJoqv",
    "owner" : "kean",
    "publishedAt" : "2022-12-18T04:18:11+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 11.5.0",
    "url" : "https://github.com/kean/Nuke/releases/tag/11.5.0",
    "version" : "11.5.0"
  },
  {
    "body" : "- Fix `ImagePipeline.shared` warning with Strit Concurrency Checking set to Complete\r\n- Fix an issue where `ImagePrefetcher/didComplete` wasn't called in some scenarios\r\n- `ImagePrefetcher/didComplete` is now called on the main queue",
    "createdAt" : "2022-12-26T04:58:50+09:00",
    "fetchedFromAPIAt" : "2022-12-26T09:42:25+09:00",
    "id" : "RE_kwDOAeh5z84FMsGg",
    "owner" : "kean",
    "publishedAt" : "2022-12-26T05:35:56+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 11.5.1",
    "url" : "https://github.com/kean/Nuke/releases/tag/11.5.1",
    "version" : "11.5.1"
  },
  {
    "body" : "- Remove DocC files to address https://github.com/kean/Nuke/issues/609",
    "createdAt" : "2023-01-04T22:07:32+09:00",
    "fetchedFromAPIAt" : "2023-01-06T09:43:52+09:00",
    "id" : "RE_kwDOAeh5z84FPdG0",
    "owner" : "kean",
    "publishedAt" : "2023-01-05T05:30:22+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 11.5.3",
    "url" : "https://github.com/kean/Nuke/releases/tag/11.5.3",
    "version" : "11.5.3"
  },
  {
    "body" : "- Fix [#579](https://github.com/kean/Nuke/issues/579): `ImageEncoders.ImageIO` losing image orientation - [#643](https://github.com/kean/Nuke/pull/643)\r\n- Deprecate previously soft-deprecated `ImageRequestConvertible` - [#642](https://github.com/kean/Nuke/pull/642)\r\n- Add `isCompressionEnabled` option to `DataCache` that enables compression using Appleâ€™s [lzfse](https://en.wikipedia.org/wiki/LZFSE) algorithm\r\n- Add `ExpressibleByStringLiteral` conformance to `ImageRequest`\r\n- Make compatible with Swift 6 mode\r\n- Now distributed with precompiled xcframeworks as an alternative installation option",
    "createdAt" : "2023-01-28T06:37:08+09:00",
    "fetchedFromAPIAt" : "2023-01-28T09:44:16+09:00",
    "id" : "RE_kwDOAeh5z84FZKcl",
    "owner" : "kean",
    "publishedAt" : "2023-01-28T06:56:21+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 11.6.0",
    "url" : "https://github.com/kean/Nuke/releases/tag/11.6.0",
    "version" : "11.6.0"
  },
  {
    "body" : "- Fix [#653](https://github.com/kean/Nuke/issues/653): ImageView wasn't calling `prepareForReuse` on its `animatedImageView`",
    "createdAt" : "2023-02-06T08:32:25+09:00",
    "fetchedFromAPIAt" : "2023-02-11T23:53:40+09:00",
    "id" : "RE_kwDOAeh5z84FcrTe",
    "owner" : "kean",
    "publishedAt" : "2023-02-06T08:32:50+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 11.6.1",
    "url" : "https://github.com/kean/Nuke/releases/tag/11.6.1",
    "version" : "11.6.1"
  },
  {
    "body" : "- Fix an issue with static GIFs not rendered correctly â€“ [#667](https://github.com/kean/Nuke/pull/667) by [@Havhingstor](https://github.com/Havhingstor)",
    "createdAt" : "2023-02-10T07:30:31+09:00",
    "fetchedFromAPIAt" : "2023-02-11T23:53:40+09:00",
    "id" : "RE_kwDOAeh5z84FeyrW",
    "owner" : "kean",
    "publishedAt" : "2023-02-10T07:30:57+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 11.6.2",
    "url" : "https://github.com/kean/Nuke/releases/tag/11.6.2",
    "version" : "11.6.2"
  },
  {
    "body" : "> **Warning**: This is an early preview. The documentation hasn't been updated yet.\r\n\r\n## NukeUI 2.0\r\n\r\nNukeUI started as a separate [repo](https://github.com/kean/NukeUI), but the initial production version was released as part of [Nuke 11](https://github.com/kean/Nuke/releases/tag/11.0.0). Let's call it NukeUI 1.0. The framework was designed before the [`AsyncImage`](https://developer.apple.com/documentation/swiftui/asyncimage) announcement and had a few discrepancies that made it harder to migrate from `AsyncImage`. This release addresses the shortcomings of the original design.\r\n\r\nStarting with NukeUI 2.0, `LazyImage` uses `SwiftUI.Image` to display images and eliminates any [discrepancies](https://github.com/kean/Nuke/issues/578) between `LazyImage` and `AsyncImage` layout and self-sizing behavior. And the previously used `NukeUI.Image` was removed so it no longer [conflicts](https://github.com/kean/Nuke/discussions/658) with `SwiftUI.Image`.\r\n\r\nNukeUI 1.0 tried to do too much in terms of _rendering_ images which is not its primary responsibility â€“ _loading_ images is. The original design resulted in a convoluted and poorly composable API where `LazyImage` would know too much about how the images are rendered. This is no longer the case.\r\n\r\n- `LazyImage` now uses `SwiftUI.Image` for rendering images and the layout/sizing behavior matches `AsyncImage` exactly \r\n- Remove `Image`, `ImageView`, `ImageResizingMode`\r\n- Add `LazyImage` initializer that accepts `content` and `placeholder` closures (the same as `AsyncImage`)\r\n- Add `scale` parameter to `LazyImage` initializer \r\n- GIF rendering is no longer included in the framework. To enable it, use one of the frameworks that support GIF directly, such as [Gifu](https://github.com/kaishin/Gifu) \r\n- Video support is also disabled by default (this is subject to change)\r\n\r\n> **Warning**: GIF and video rendering are now disabled by default \r\n\r\n## Deprecations\r\n\r\nThis release also removes the APIs deprecated in the previous versions of the framework",
    "createdAt" : "2023-02-10T07:30:31+09:00",
    "fetchedFromAPIAt" : "2023-02-11T23:53:40+09:00",
    "id" : "RE_kwDOAeh5z84Fez5m",
    "owner" : "kean",
    "publishedAt" : "2023-02-10T09:00:08+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 12.0 (Beta 1)",
    "url" : "https://github.com/kean/Nuke/releases/tag/12.0.0-beta.1",
    "version" : "12.0.0-beta.1"
  },
  {
    "body" : "- Extract progress from `FetchImage` to a separate observable object and reduce a number of `body` reloads\r\n- Disable animations by default \r\n\r\nSee also: [Nuke 12.0 (Beta 1) changes](https://github.com/kean/Nuke/releases/tag/12.0.0-beta.1)",
    "createdAt" : "2023-02-18T09:50:44+09:00",
    "fetchedFromAPIAt" : "2023-02-19T09:46:39+09:00",
    "id" : "RE_kwDOAeh5z84FiY55",
    "owner" : "kean",
    "publishedAt" : "2023-02-18T11:00:04+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 12.0 (Beta 2)",
    "url" : "https://github.com/kean/Nuke/releases/tag/12.0.0-beta.2",
    "version" : "12.0.0-beta.2"
  },
  {
    "body" : "- `ImageCache` uses 20% of available RAM which is quite aggressive. It's a good default on iOS because it clears 90% of the used RAM when entering the background to be a good citizen. But it's not a good default on a Mac where the app is constantly running, and the RAM usage is highly visible. Starting with Nuke 12, the default size is now strictly limited by 512 MB.\r\n- Move all video-related code to a separate module `NukeVideo`, so that the users who don't need it, which are the majoriry, don't need to pay the extra compile time / code size price\r\n- Remove `ImageContainer.asset`. The asset is now added to `ImageContainer/userInfo` under the new `.videoAssetKey`.\r\n- Make `_PlatformImageView` internal (was public)\r\n- Fix an issue with `FetchImage/progress` not delivering updates\r\n- `FetchImage/progress` is now created lazily\r\n- Remove callbacks from `FetchImage`\r\n- `FetchImage/image` now returns `Image` instead of `PlatformImage`",
    "createdAt" : "2023-02-19T07:34:34+09:00",
    "fetchedFromAPIAt" : "2023-02-19T09:46:39+09:00",
    "id" : "RE_kwDOAeh5z84FifaN",
    "owner" : "kean",
    "publishedAt" : "2023-02-19T07:53:40+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 12.0 (Beta 3)",
    "url" : "https://github.com/kean/Nuke/releases/tag/12.0.0-beta.3",
    "version" : "12.0.0-beta.3"
  },
  {
    "body" : "- Fix warnings in Xcode 14.3",
    "createdAt" : "2023-02-19T12:49:54+09:00",
    "fetchedFromAPIAt" : "2023-02-20T09:50:01+09:00",
    "id" : "RE_kwDOAeh5z84Fig9B",
    "owner" : "kean",
    "publishedAt" : "2023-02-19T13:06:45+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 11.6.3",
    "url" : "https://github.com/kean/Nuke/releases/tag/11.6.3",
    "version" : "11.6.3"
  },
  {
    "body" : "- Remove the convenience `LazyImage(url:content:placeholder:)` init method that doesn't offer much compared to the main init and remove public `_LazyImageContents`\r\n- Fix an issue where if you change the `LazyImage`'s `processors` or `priority` without also changing the image source, the image wasn't being reloaded\r\n- Remove some of the typealises from `NukeUI`\r\n- Remove the deprecated APIs in NukeUI\r\n- Add missing scale parameter to init with content\r\n- `ImageDecoder` now defaults to scale `1` for images\r\n- Remove `scale` parameter from `LazyImage` init: it's available via `ImageRequest` `userInfo`",
    "createdAt" : "2023-02-19T13:33:01+09:00",
    "fetchedFromAPIAt" : "2023-02-20T09:50:01+09:00",
    "id" : "RE_kwDOAeh5z84FihGy",
    "owner" : "kean",
    "publishedAt" : "2023-02-19T13:46:35+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 12.0 (Beta 4)",
    "url" : "https://github.com/kean/Nuke/releases/tag/12.0.0-beta.4",
    "version" : "12.0.0-beta.4"
  },
  {
    "body" : "- Fix [#671](https://github.com/kean/Nuke/pull/671): `ImagePipeline/image(for:)` hangs if you cancel the async Task before it is started. Thanks @muukii for reporting and providing a sample.",
    "createdAt" : "2023-02-20T11:25:56+09:00",
    "fetchedFromAPIAt" : "2023-02-21T09:47:53+09:00",
    "id" : "RE_kwDOAeh5z84Fiqz8",
    "owner" : "kean",
    "publishedAt" : "2023-02-20T11:40:01+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 11.6.4",
    "url" : "https://github.com/kean/Nuke/releases/tag/11.6.4",
    "version" : "11.6.4"
  },
  {
    "body" : "Redesign the concurrency APIs in Nuke ahead of the upcoming changes in Xcode 14.3, making them safer and ergonomic to use, and fully `Sendable`-compliant.\r\n\r\n- Add `ImagePipeline/imageTask(with:)` method that returns a new type `AsyncImageTask` that you can use to monitor the task progress, change its priority, and, of course, fetch the response.\r\n\r\n```swift\r\nlet task = ImagePipeline.shared.imageTask(with: URL(string: \"example.com\"))\r\nfor await progress in task.progress {\r\n    print(\"Updated progress: \", progress)\r\n}\r\nlet image = try await task.image\r\n```\r\n\r\n- The existing convenience `ImagePipeline/image(for:)` methods now return `UIImage` (or `NSImage`)  instead of `ImageResponse`\r\n- Remove the `delegate` parameter from the existing `ImagePipeline/image(for:)` async/await method to address the upcoming concurrency warnings in Xcode 14.3\r\n- Remove `ImageTaskDelegate` and move its methods to `ImagePipelineDelegate` and add the `pipeline` parameter\r\n- Add one final `LazyImage` optimization where when the image is in memory cache, `LazyImage` now requires a single body calculation to render it (instead of three before) â€“ can't get better than this\r\n",
    "createdAt" : "2023-02-20T11:41:08+09:00",
    "fetchedFromAPIAt" : "2023-02-21T09:47:53+09:00",
    "id" : "RE_kwDOAeh5z84FjHfy",
    "owner" : "kean",
    "publishedAt" : "2023-02-21T07:17:16+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 12.0 (Beta 5)",
    "url" : "https://github.com/kean/Nuke/releases/tag/12.0.0-beta.5",
    "version" : "12.0.0-beta.5"
  },
  {
    "body" : "Nuke 12 enhances the two main APIs introduced in the previous release: `LazyImage` and the async `ImagePipeline` methods. They are faster, more robust, and easier to use.\r\n\r\n> The [migration guide](https://github.com/kean/Nuke/blob/nuke-12/Documentation/Migrations/Nuke%2012%20Migration%20Guide.md) is available to help with the update.\r\n\r\n## Concurrency\r\n\r\nRedesign the concurrency APIs making them more ergonomic and fully `Sendable` compliant.\r\n\r\n- Add `ImagePipeline/imageTask(with:)` method that returns a new type `AsyncImageTask`\r\n\r\n```swift\r\nlet task = ImagePipeline.shared.imageTask(with: URL(string: \"example.com\"))\r\ntask.priority = .high\r\nfor await progress in task.progress {\r\n    print(\"Updated progress: \", progress)\r\n}\r\nlet image = try await task.image\r\n```\r\n\r\n- The existing convenience `ImagePipeline/image(for:)` method now returns an image instead of `ImageResponse`\r\n- Remove the `delegate` parameter from `ImagePipeline/image(for:)` method to address the upcoming concurrency warnings in Xcode 14.3\r\n- Remove `ImageTaskDelegate` and move its methods to `ImagePipelineDelegate` and add the `pipeline` parameter\r\n\r\n## NukeUI 2.0\r\n\r\nNukeUI started as a separate [repo](https://github.com/kean/NukeUI), but the initial production version was released as part of [Nuke 11](https://github.com/kean/Nuke/releases/tag/11.0.0). Let's call it NukeUI 1.0. The framework was designed before the [`AsyncImage`](https://developer.apple.com/documentation/swiftui/asyncimage) announcement and had a few discrepancies that made it harder to migrate from `AsyncImage`. This release addresses the shortcomings of the original design and features a couple of performance improvements.\r\n\r\n- `LazyImage` now uses `SwiftUI.Image` instead of `NukeUI.Image` backed by `UIImageView` and `NSImageView`. It eliminates any [discrepancies](https://github.com/kean/Nuke/issues/578) between `LazyImage` and `AsyncImage` layout and self-sizing behavior and fixes issues with `.redacted(reason:)`, `ImageRenderer`, and other SwiftUI APIs that don't work with UIKIt and AppKit based views.\r\n- Remove `NukeUI.Image` so the name no longer [clashes](https://github.com/kean/Nuke/discussions/658) with `SwiftUI.Image`\r\n- Fix [#669](https://github.com/kean/Nuke/issues/669): `redacted` not working for `LazyImage`\r\n- GIF rendering is no longer included in the framework. Please consider using one of the framework that specialize on playing GIFs, such as [Gifu](https://github.com/kaishin/Gifu). It's easy to integrate, especially with `LazyImage`.\r\n- Extract progress updates from `FetchImage` to a separate observable object, reducing the number of body reloads\r\n- `LazyImage` now requires a single body calculation to render the response from the memory cache (instead of three before)\r\n- Disable animations by default\r\n- Fix an issue where the image won't reload if you change only `LazyImage` `processors` or `priority` without also changing the image source\r\n- `FetchImage/image` now returns `Image` instead of `UIImage`\r\n- Make `_PlatformImageView` internal (was public) and remove more typealiases\r\n\r\n## Nuke\r\n\r\n- ImageCache uses 20% of available RAM which is quite aggressive. It's an OK default on iOS because it clears 90% of the used RAM when entering the background to be a good citizen. But it's not a good default on a Mac. Starting with Nuke 12, the default size is now strictly limited to 512 MB.\r\n- `ImageDecoder` now defaults to scale `1` for images (configurable using [`UserInfoKey/scaleKey`](https://kean-docs.github.io/nuke/documentation/nuke/imagerequest/userinfokey/scalekey))\r\n- Removes APIs deprecated in the previous versions\r\n\r\n## NukeVideo\r\n\r\nVideo playback can be significantly [more efficient](https://web.dev/replace-gifs-with-videos/) than playing animated GIFs. This is why the initial version of NukeUI provided support for basic video playback. But it is not something that the majority of the users need, so this feature was extracted to a separate module called `NukeVideo`.\r\n\r\nThere is now less code that you need to include in your project, which means faster compile time and smaller code size. With this and some other changes in Nuke 12, the two main frameworks â€“ Nuke and NukeUI â€“ now have 25% less code compared to Nuke 11. In addition to this change, there are a couple of improvements in how the precompiled binary frameworks are generated, significantly reducing their size.\r\n\r\n- Move all video-related code to `NukeVideo`\r\n- Remove `ImageContainer.asset`. The asset is now added to `ImageContainer/userInfo` under the new `.videoAssetKey`.\r\n- Reduce the size of binary frameworks",
    "createdAt" : "2023-02-25T12:20:05+09:00",
    "fetchedFromAPIAt" : "2023-02-26T10:01:35+09:00",
    "id" : "RE_kwDOAeh5z84Fkw2-",
    "owner" : "kean",
    "publishedAt" : "2023-02-25T12:30:48+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 12 (RC1)",
    "url" : "https://github.com/kean/Nuke/releases/tag/12.0.0-rc.1",
    "version" : "12.0.0-rc.1"
  },
  {
    "body" : "Nuke 12 enhances the two main APIs introduced in the previous release: `LazyImage` and the async `ImagePipeline` methods. They are faster, more robust, and easier to use.\r\n\r\n> The [migration guide](https://github.com/kean/Nuke/blob/nuke-12/Documentation/Migrations/Nuke%2012%20Migration%20Guide.md) is available to help with the update. The minimum requirements are unchanged from Nuke 11.\r\n\r\n## Concurrency\r\n\r\nRedesign the concurrency APIs making them more ergonomic and fully `Sendable` compliant.\r\n\r\n- Add `ImagePipeline/imageTask(with:)` method that returns a new type `AsyncImageTask`\r\n\r\n```swift\r\nlet task = ImagePipeline.shared.imageTask(with: URL(string: \"example.com\"))\r\ntask.priority = .high\r\nfor await progress in task.progress {\r\n    print(\"Updated progress: \", progress)\r\n}\r\nlet image = try await task.image\r\n```\r\n\r\n- The existing convenience `ImagePipeline/image(for:)` method now returns an image instead of `ImageResponse`\r\n- Remove the `delegate` parameter from `ImagePipeline/image(for:)` method to address the upcoming concurrency warnings in Xcode 14.3\r\n- Remove `ImageTaskDelegate` and move its methods to `ImagePipelineDelegate` and add the `pipeline` parameter\r\n\r\n## NukeUI 2.0\r\n\r\nNukeUI started as a separate [repo](https://github.com/kean/NukeUI), but the initial production version was released as part of [Nuke 11](https://github.com/kean/Nuke/releases/tag/11.0.0). Let's call it NukeUI 1.0. The framework was designed before the [`AsyncImage`](https://developer.apple.com/documentation/swiftui/asyncimage) announcement and had a few discrepancies that made it harder to migrate from `AsyncImage`. This release addresses the shortcomings of the original design and features a couple of performance improvements.\r\n\r\n- `LazyImage` now uses `SwiftUI.Image` instead of `NukeUI.Image` backed by `UIImageView` and `NSImageView`. It eliminates any [discrepancies](https://github.com/kean/Nuke/issues/578) between `LazyImage` and `AsyncImage` layout and self-sizing behavior and fixes issues with `.redacted(reason:)`, `ImageRenderer`, and other SwiftUI APIs that don't work with UIKIt and AppKit based views.\r\n- Remove `NukeUI.Image` so the name no longer [clashes](https://github.com/kean/Nuke/discussions/658) with `SwiftUI.Image`\r\n- Fix [#669](https://github.com/kean/Nuke/issues/669): `redacted` not working for `LazyImage`\r\n- GIF rendering is no longer included in the framework. Please consider using one of the frameworks that specialize in playing GIFs, such as [Gifu](https://github.com/kaishin/Gifu). It's easy to integrate, especially with `LazyImage`.\r\n- Extract progress updates from `FetchImage` to a separate observable object, reducing the number of body reloads\r\n- `LazyImage` now requires a single body calculation to render the response from the memory cache (instead of three before)\r\n- Disable animations by default\r\n- Fix an issue where the image won't reload if you change only `LazyImage` `processors` or `priority` without also changing the image source\r\n- `FetchImage/image` now returns `Image` instead of `UIImage`\r\n- Make `_PlatformImageView` internal (was public) and remove more typealiases\r\n\r\n## Nuke\r\n\r\n- Add a new initializer to `ImageRequest.ThumbnailOptions` that accepts the target size, unit, and content mode - [#677](https://github.com/kean/Nuke/pull/677)\r\n- ImageCache uses 20% of available RAM which is quite aggressive. It's an OK default on iOS because it clears 90% of the used RAM when entering the background to be a good citizen. But it's not a good default on a Mac. Starting with Nuke 12, the default size is now strictly limited to 512 MB.\r\n- `ImageDecoder` now defaults to scale `1` for images (configurable using [`UserInfoKey/scaleKey`](https://kean-docs.github.io/nuke/documentation/nuke/imagerequest/userinfokey/scalekey))\r\n- Removes APIs deprecated in the previous versions\r\n- Update the [Performance Guide](https://kean-docs.github.io/nuke/documentation/nuke/performance-guide)\r\n\r\n## NukeVideo\r\n\r\nVideo playback can be significantly [more efficient](https://web.dev/replace-gifs-with-videos/) than playing animated GIFs. This is why the initial version of NukeUI provided support for basic video playback. But it is not something that the majority of the users need, so this feature was extracted to a separate module called `NukeVideo`.\r\n\r\nThere is now less code that you need to include in your project, which means faster compile time and smaller code size. With this and some other changes in Nuke 12, the two main frameworks â€“ Nuke and NukeUI â€“ now have 25% less code compared to Nuke 11. In addition to this change, there are a couple of improvements in how the precompiled binary frameworks are generated, significantly reducing their size.\r\n\r\n- Move all video-related code to `NukeVideo`\r\n- Remove `ImageContainer.asset`. The asset is now added to `ImageContainer/userInfo` under the new `.videoAssetKey`.\r\n- Reduce the size of binary frameworks by up to 50%",
    "createdAt" : "2023-03-05T03:48:41+09:00",
    "fetchedFromAPIAt" : "2023-03-05T14:56:31+09:00",
    "id" : "RE_kwDOAeh5z84Fok3Z",
    "owner" : "kean",
    "publishedAt" : "2023-03-05T04:21:59+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 12.0",
    "url" : "https://github.com/kean/Nuke/releases/tag/12.0.0",
    "version" : "12.0.0"
  },
  {
    "body" : "- Add `makeImageView` closure to `LazyImageView` to allow using custom views for rendering images\r\n- Add `onCompletion` closure to `LazyImage` and `FetchImage`\r\n- Fix an issue with `.videoAssetKey` value missing from `ImageContainer`\r\n- Fix an issue with `.gif` being encoded as `.jpeg` when `.storeEncodedImages` policy is used ",
    "createdAt" : "2023-03-26T01:41:13+09:00",
    "fetchedFromAPIAt" : "2023-03-26T09:45:27+09:00",
    "id" : "RE_kwDOAeh5z84FxrUC",
    "owner" : "kean",
    "publishedAt" : "2023-03-26T02:04:49+09:00",
    "repository" : "Nuke",
    "title" : "Nuke 12.1",
    "url" : "https://github.com/kean/Nuke/releases/tag/12.1.0",
    "version" : "12.1.0"
  }
]