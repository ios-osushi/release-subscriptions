[
  {
    "body" : "### Enhancements\n\n* Sync logs now contain information about what object/changeset was being applied when the exception was thrown. \n  ([Core #4836](https://github.com/realm/realm-core/issues/4836))\n* Added ServiceErrorCode for wrong username/password when using '`App.login`. \n  ([Core #7380](https://github.com/realm/realm-cocoa/issues/7380)\n\n### Fixed\n\n* Fix crash in `MongoCollection.findOneDocument(filter:)` that occurred when no results were\n  found for a given filter. \n  ([Cocoa #7380](https://github.com/realm/realm-cocoa/issues/7380), since v10.0.0)\n* Some of the SwiftUI property wrappers incorrectly required objects to conform\n  to ObjectKeyIdentifiable rather than Identifiable.\n  ([Cocoa #7372](https://github.com/realm/realm-cocoa/issues/7372), since v10.6.0)\n* Work around Xcode 13 beta 3+ shipping a broken swiftinterface file for Combine on 32-bit iOS.\n  ([Cocoa #7368](https://github.com/realm/realm-cocoa/issues/7368))\n* Fixes history corruption when replacing an embedded object in a list.\n  ([Core #4845](https://github.com/realm/realm-core/issues/4845)), since v10.0.0)\n\n### Compatibility\n\n* Realm Studio: 11.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 12.5.1.\n* CocoaPods: 1.10 or later.\n* Xcode: 12.2-13.0 beta 5.\n\n### Internal\n\n* Upgraded realm-core from 11.2.0 to 11.3.0",
    "createdAt" : "2021-08-26T21:40:40+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "MDc6UmVsZWFzZTQ4NDk4MzQ1",
    "owner" : "realm",
    "publishedAt" : "2021-08-26T21:45:15+09:00",
    "repository" : "realm-swift",
    "title" : "v10.13.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.13.0",
    "version" : "v10.13.0"
  },
  {
    "body" : "### Enhancements\n\n* Add additional `observe` methods for Objects and RealmCollections which take\n  a `PartialKeyPath` type key path parameter.\n* The release package once again contains Xcode 13 binaries.\n* `PersistableEnum` properties can now be indexed or used as the primary key if\n  the RawValue is an indexable or primary key type.\n\n### Fixed\n\n* `Map<Key, Value>` did not conform to `Codable`.\n  ([Cocoa #7418](https://github.com/realm/realm-cocoa/pull/7418), since v10.8.0)\n* Fixed \"Invalid data type\" assertion failure in the sync client when the\n  client recieved an AddColumn instruction from the server for an AnyRealmValue\n  property when that property already exists locally. ([Core #4873](https://github.com/realm/realm-core/issues/4873), since v10.8.0)\n\n### Compatibility\n\n* Realm Studio: 11.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 12.5.1.\n* CocoaPods: 1.10 or later.\n* Xcode: 12.2-13.0 beta 5.\n\n### Internal\n\n* Upgraded realm-core from 11.3.0 to 11.3.1.",
    "createdAt" : "2021-09-04T07:10:08+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "MDc6UmVsZWFzZTQ4OTk2NDEz",
    "owner" : "realm",
    "publishedAt" : "2021-09-04T07:15:30+09:00",
    "repository" : "realm-swift",
    "title" : "v10.14.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.14.0",
    "version" : "v10.14.0"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Add `async` versions of the  `Realm.asyncOpen` and `App.login` methods.\r\n* ThreadSafeReference no longer pins the source transaction version for  anything other than a Results created by filtering a collection. This means that holding on to thread-safe references to other things (such as Objects) will no longer cause file size growth.\r\n* A ThreadSafeReference to a Results backed by a collection can now be created inside a write transaction as long as the collection was not created in the current write transaction.\r\n* Synchronized Realms are no longer opened twice, cutting the address space and file descriptors used in half. ([Core #4839](https://github.com/realm/realm-core/pull/4839))\r\n\r\n### Fixed\r\n\r\n* Adding an unmanaged object to a Realm that was declared with `@StateRealmObject` would throw the exception `\"Cannot add an object with observers to a Realm\"`.\r\n* The `RealmCollectionChange` docs referred to indices in modifications as the 'new' collection. This is incorrect and the docs now state that modifications refer to the previous version of the collection. ([Cocoa #7390](https://github.com/realm/realm-cocoa/issues/7390))\r\n* Fix crash in `RLMSyncConfiguration.initWithUser` error mapping when a user is disabled/deleted from MongoDB Realm dashboard.  ([Cocoa #7399](https://github.com/realm/realm-cocoa/issues/7399), since v10.0.0)\r\n* If the application crashed at the wrong point when logging a user in, the next run of the application could hit the assertion failure \"m_state == SyncUser::State::LoggedIn\" when a synchronized Realm is opened with that user. ([Core #4875](https://github.com/realm/realm-core/issues/4875), since v10.0.0)\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 12.5.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 12.2-13.0 beta 5.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 11.3.1 to 11.4.1",
    "createdAt" : "2021-09-11T04:04:05+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84C8WUX",
    "owner" : "realm",
    "publishedAt" : "2021-09-11T06:09:42+09:00",
    "repository" : "realm-swift",
    "title" : "v10.15.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.15.0",
    "version" : "v10.15.0"
  },
  {
    "body" : "### Enhancements\n\n* Switch to building the Carthage release with Xcode 13.\n\n### Fixed\n\n* Fix compilation error where Swift 5.5 is available but the macOS 12 SDK was\n  not. This was notable for the Xcode 13 RC. This fix adds a #canImport check\n  for the `_Concurrency` module that was not available before the macOS 12 SDK.\n\n### Compatibility\n\n* Realm Studio: 11.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 13.0.\n* CocoaPods: 1.10 or later.\n* Xcode: 12.2-13.0.",
    "createdAt" : "2021-09-16T05:14:58+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84C9UoE",
    "owner" : "realm",
    "publishedAt" : "2021-09-16T05:22:33+09:00",
    "repository" : "realm-swift",
    "title" : "v10.15.1",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.15.1",
    "version" : "v10.15.1"
  },
  {
    "body" : "### Fixed\r\n\r\n* Fixed various memory corruption bugs when encryption is used caused by not locking a mutex when needed. ([#7640](https://github.com/realm/realm-swift/issues/7640), [#7659](https://github.com/realm/realm-swift/issues/7659), since v10.21.1)\r\n* Changeset upload batching did not calculate the accumulated size correctly, resulting in “error reading body failed to read: read limited at 16777217 bytes” errors from the server when writing large amounts of data ([Core #5373](https://github.com/realm/realm-core/pull/5373), since 11.13.0).\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 13.3.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 12.4-13.3.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from v11.13.0 to v11.14.0.",
    "createdAt" : "2022-04-12T11:31:40+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84D01VK",
    "owner" : "realm",
    "publishedAt" : "2022-04-12T11:37:02+09:00",
    "repository" : "realm-swift",
    "title" : "v10.25.1",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.25.1",
    "version" : "v10.25.1"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Replace Xcode 13.3 binaries with 13.3.1 binaries.\r\n\r\n### Fixed\r\n\r\n* `List<AnyRealmValue>` would contain an invalidated object instead of null when the object linked to was deleted by a difference sync client ([Core #5215](https://github.com/realm/realm-core/pull/5215), since v10.8.0).\r\n* Adding an object to a Set, deleting the parent object of the Set, and then deleting the object which was added to the Set would crash ([Core #5387](https://github.com/realm/realm-core/issues/5387), since v10.8.0).\r\n* Synchronized Realm files which were first created using v10.0.0-beta.3 would be redownloaded instead of using the existing file, possibly resulting in the loss of any unsynchronized data in those files (since v10.20.0).\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 13.3.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 12.4-13.3.1.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from v11.14.0 to v11.15.0",
    "createdAt" : "2022-04-28T07:02:58+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84D57vq",
    "owner" : "realm",
    "publishedAt" : "2022-04-28T07:08:34+09:00",
    "repository" : "realm-swift",
    "title" : "v10.25.2",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.25.2",
    "version" : "v10.25.2"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Add `async` versions of `EmailPasswordAuth.callResetPasswordFunction` and `User.linkUser` methods.\r\n* Add `async` version of `MongoCollection` methods.\r\n* Add `async` support for user functions.\r\n\r\n### Fixed\r\n\r\n* A race condition in Realm.asyncOpen() sometimes resulted in subsequent writes from Realm Sync failing to produce notifications  ([#7447](https://github.com/realm/realm-cocoa/issues/7447), [#7453](https://github.com/realm/realm-cocoa/issues/7453), [Core #4909](https://github.com/realm/realm-core/issues/4909), since v10.15.0).\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 13.0.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 12.2-13.0.",
    "createdAt" : "2021-09-30T08:26:06+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84DAsDK",
    "owner" : "realm",
    "publishedAt" : "2021-09-30T08:31:46+09:00",
    "repository" : "realm-swift",
    "title" : "v10.16.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.16.0",
    "version" : "v10.16.0"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Add a new `@ThreadSafe` property wrapper. Objects and collections wrapped by `@ThreadSafe` may be passed between threads. It's\r\n  intended to allow local variables and function parameters to be used across threads when needed.\r\n\r\n### Fixed\r\n\r\n* None.\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 13.0.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 12.2-13.0.",
    "createdAt" : "2021-10-07T04:38:18+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84DCO4M",
    "owner" : "realm",
    "publishedAt" : "2021-10-07T04:44:10+09:00",
    "repository" : "realm-swift",
    "title" : "v10.17.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.17.0",
    "version" : "v10.17.0"
  },
  {
    "body" : "### Enhancements\n\n* Add support for using multiple users with `@AsyncOpen` and `@AutoOpen`.\n  Setting the current user to a new user will now automatically reopen the\n  Realm with the new user.\n* Add prebuilt binary for Xcode 13.1 to the release package.\n\n### Fixed\n\n* Fix `@AsyncOpen` and `@AutoOpen` using `defaultConfiguration` by default if\n  the user's doesn't provide one, will set an incorrect path which doesn't\n  correspond to the users configuration one. (since v10.12.0)\n* Adding missing subscription completion for `AsyncOpenPublisher` after\n  successfully returning a realm.\n\n### Compatibility\n\n* Realm Studio: 11.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 13.1.\n* CocoaPods: 1.10 or later.\n* Xcode: 12.2-13.1.",
    "createdAt" : "2021-10-26T04:39:15+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84DGYPF",
    "owner" : "realm",
    "publishedAt" : "2021-10-26T04:45:07+09:00",
    "repository" : "realm-swift",
    "title" : "v10.18.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.18.0",
    "version" : "v10.18.0"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Add `.searchable()` SwiftUI View Modifier which allows filtering `@ObservedResult` results from a search field component by a key path.\r\n  ```swift\r\n  List {\r\n      ForEach(reminders) { reminder in\r\n        ReminderRowView(reminder: reminder)\r\n      }\r\n  }.searchable(text: $searchFilter,\r\n               collection: $reminders,\r\n               keyPath: \\.name) {\r\n    ForEach(reminders) { remindersFiltered in\r\n      Text(remindersFiltered.name).searchCompletion(remindersFiltered.name)\r\n    }\r\n  }\r\n  ```\r\n* Add an api for a type safe query syntax. This allows you to filter a Realm and collections managed by a Realm with Swift style expressions. Here is a brief example:\r\n  ```swift\r\n  class Person: Object {\r\n    @Persisted var name: String\r\n    @Persisted var hobbies: MutableSet<String>\r\n    @Persisted var pets: List<Pet>\r\n  }\r\n  class Pet: Object {\r\n    @Persisted var name: String\r\n    @Persisted var age: Int\r\n  }\r\n\r\n  let persons = realm.objects(Person.self).where {\r\n    $0.hobbies.contains(\"music\") || $0.hobbies.contains(\"baseball\")\r\n  }\r\n\r\n  persons = realm.objects(Person.self).where {\r\n    ($0.pets.age >= 2) && $0.pets.name.starts(with: \"L\")\r\n  }\r\n  ```\r\n  ([#7419](https://github.com/realm/realm-cocoa/pull/7419))\r\n* Add support for dictionary subscript expressions (e.g. `\"phoneNumbers['Jane'] == '123-3456-123'\"`) when querying with an\r\n  NSPredicate.\r\n* Add UserProfile to User. This contains metadata from social logins with MongoDB Realm.\r\n* Slightly reduce the peak memory usage when processing sync changesets.\r\n\r\n### Fixed\r\n\r\n* Change default request timeout for `RLMApp` from 6 seconds to 60 seconds.\r\n* Async `Realm` init would often give a Realm instance which could not actually be used and would throw incorrect thread exceptions. It now is `@MainActor` and gives a Realm instance which always works on the main actor. The non-functional `queue:` parameter has been removed (since v10.15.0).\r\n* Restore the pre-v10.12.0 behavior of calling `writeCopy()` on a synchronized Realm which produced a local non-synchronized Realm\r\n  ([#7513](https://github.com/realm/realm-cocoa/issues/7513)).\r\n* Decimal128 did not properly normalize the value before hashing and so could have multiple values which are equal but had different hash values (since v10.8.0).\r\n* Fix a rare assertion failure or deadlock when a sync session is racing to close at the same time that external reference to the Realm is being released. ([Core #4931](https://github.com/realm/realm-core/issues/4931))\r\n* Fix a assertion failure when opening a sync Realm with a user who had been removed. Instead an exception will be thrown. ([Core #4937](https://github.com/realm/realm-core/issues/4937), since v10.0.0)\r\n* Fixed a rare segfault which could trigger if a user was being logged out while the access token refresh response comes in. ([Core #4944](https://github.com/realm/realm-core/issues/4944), since v10.0.0)\r\n* Fixed a bug where progress notifiers on an AsyncOpenTask could be called after the open completed. ([Core #4919](https://github.com/realm/realm-core/issues/4919))\r\n* SecureTransport was not enabled for macCatalyst builds when installing via SPM, resulting in `'SSL/TLS protocol not supported'` exceptions when using Realm Sync. ([#7474](https://github.com/realm/realm-cocoa/issues/7474))\r\n* Users were left in the logged in state when their refresh token expired. ([Core #4882](https://github.com/realm/realm-core/issues/4882), since v10)\r\n* Calling `.count` on a distinct collection would return the total number of objects in the collection rather than the distinct count the first time it is called. ([#7481](https://github.com/realm/realm-cocoa/issues/7481), since v10.8.0).\r\n* `realm.delete(collection.distinct(...))` would delete all objects in the collection rather than just the first object with each distinct value in the property being distincted on, unless the distinct Results were read from at least once first (since v10.8.0).\r\n* Calling `.distinct()` on a collection, accessing the Results, then passing the Results to `realm.delete()` would delete the correct objects, but afterwards report a count of zero even if there were still objects in the Results (since v10.8.0).\r\n* Download compaction could result in non-streaming sync download notifiers never reporting completion (since v10.0.0, [Core #4989](https://github.com/realm/realm-core/pull/4989)).\r\n* Fix a deadlock in SyncManager that was probably not possible to hit in real-world code (since v10.0.0).\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 13.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 12.2-13.1.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from v11.4.1 to v11.6.0",
    "createdAt" : "2021-11-05T13:12:13+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84DJQed",
    "owner" : "realm",
    "publishedAt" : "2021-11-05T13:18:13+09:00",
    "repository" : "realm-swift",
    "title" : "v10.19.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.19.0",
    "version" : "v10.19.0"
  },
  {
    "body" : "### Enhancements\n\n* Conform `@ThreadSafe` and `ThreadSafeReference` to `Sendable`.\n* Allow using Swift enums which conform to `PersistableEnum` as the value type\n  for all Realm collections.\n\n### Fixed\n\n* `@AutoOpen` will open the existing local Realm file on any connection error\n  rather than only when the connection specifically times out.\n* Do not allow `progress` state changes for `@AutoOpen` and `@AsyncOpen` after\n  changing state to `open(let realm)` or `error(let error)`.\n* Logging out a sync user failed to remove the local Realm file for partitions\n  with very long partition values that would have exceeded the maximum path\n  length. ([Core #4187](https://github.com/realm/realm-core/issues/4187), since v10.0.0)\n* Don't keep trying to refresh the access token if the client's clock is more\n  than 30 minutes fast. ([Core #4941](https://github.com/realm/realm-core/issues/4941))\n* Failed auth requests used a fixed long sleep rather than exponential backoff\n  like other sync requests, which could result in very delayed reconnects after\n  a device was offline long enough for the access token to expire (since v10.0.0).\n\n### Compatibility\n\n* Realm Studio: 11.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 13.1.\n* CocoaPods: 1.10 or later.\n* Xcode: 12.2-13.1.\n\n### Internal\n\n* Upgraded realm-core from 11.6.0 to 11.6.1.",
    "createdAt" : "2021-11-17T08:36:01+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84DMIuz",
    "owner" : "realm",
    "publishedAt" : "2021-11-17T08:41:45+09:00",
    "repository" : "realm-swift",
    "title" : "v10.20.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.20.0",
    "version" : "v10.20.0"
  },
  {
    "body" : "Xcode 12.4 is now the minimum supported version of Xcode.\n\n### Fixed\n\n* Add missing `Indexable` support for UUID.\n  ([Cocoa #7545](https://github.com/realm/realm-cocoa/issues/7545), since v10.10.0)\n\n### Breaking Changes\n\n* All `async` functions now require Xcode 13.2 to work around an App\n  Store/TestFlight bug that results in apps built with 13.0/13.1 which do not\n  use libConcurrency but link a library which does crashing on startup.\n\n### Compatibility\n\n* Realm Studio: 11.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 13.2.\n* CocoaPods: 1.10 or later.\n* Xcode: 12.2-13.2.",
    "createdAt" : "2021-12-15T02:10:04+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84DS76o",
    "owner" : "realm",
    "publishedAt" : "2021-12-15T02:16:02+09:00",
    "repository" : "realm-swift",
    "title" : "v10.20.1",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.20.1",
    "version" : "v10.20.1"
  },
  {
    "body" : "Rebuild 10.20.1 with Xcode 13.2.1 rather than 13.2.0. This version has no\nchanges if you are not using a prebuilt binary for Realm.\n\n### Compatibility\n\n* Realm Studio: 11.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 13.2.1.\n* CocoaPods: 1.10 or later.\n* Xcode: 12.4-13.2.1.",
    "createdAt" : "2021-12-21T02:21:02+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84DUc-l",
    "owner" : "realm",
    "publishedAt" : "2021-12-21T03:41:32+09:00",
    "repository" : "realm-swift",
    "title" : "v10.20.2",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.20.2",
    "version" : "v10.20.2"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Add `metadata` property to `RLMUserProfile`/`UserProfile`.\r\n* Add class `Projection` to allow creation of light weight view models out of Realm Objects.  \r\n```swift\r\npublic class Person: Object {\r\n    @Persisted var firstName = \"\"\r\n    @Persisted var lastName = \"\"\r\n    @Persisted var address: Address? = nil\r\n    @Persisted var friends = List<Person>()\r\n}\r\n\r\npublic class Address: EmbeddedObject {\r\n    @Persisted var city: String = \"\"\r\n    @Persisted var country = \"\"\r\n}\r\n\r\nclass PersonProjection: Projection<Person> {\r\n    // `Person.firstName` will have same name and type\r\n    @Projected(\\Person.firstName) var firstName\r\n    // There will be the only String for `city` of the original object `Address`\r\n    @Projected(\\Person.address.city) var homeCity\r\n    // List<Person> will be mapped to list of firstNames\r\n    @Projected(\\Person.friends.projectTo.firstName) var firstFriendsName: ProjectedCollection<String>\r\n}\r\n\r\n// `people` will contain projections for every `Person` object in the `realm`\r\nlet people: Results<PersonProjection> = realm.objects(PersonProjection.self)\r\n```\r\n* Greatly improve performance of reading AnyRealmValue and enum types from Realm collections.\r\n* Allow using Swift enums which conform to `PersistableEnum` as the value type for all Realm collections.\r\n* `AnyRealmCollection` now conforms to `Encodable`.\r\n* AnyRealmValue and PersistableEnum values can now be passed directly to an NSPredicate used in a filter() call rather than having to pass the rawValue (the rawValue is still allowed).\r\n* Queries on collections of PersistableEnums can now be performed with `where()`.\r\n* Add support for querying on the rawValue of an enum with `where()`.\r\n* `.count` is supported for Maps of all types rather than just numeric types in `where()`.\r\n* Add support for querying on the properties of objects contained in dictionaries (e.g. \"dictProperty.@allValues.name CONTAINS 'a'\").\r\n* Improve the error message for many types of invalid predicates in queries.\r\n* Add support for comparing `@allKeys` to another property on the same object.\r\n* Add `Numeric` conformance to `Decimal128`.\r\n* Make some invalid property declarations such as `List<AnyRealmValue?>` a compile-time error instead of a runtime error.\r\n* Calling `.sorted(byKeyPath:)` on a collection with an Element type which does not support sorting by keypaths is now a compile-time error instead of a runtime error.\r\n* `RealmCollection.sorted(ascending:)` can now be called on all non-Object/EmbeddedObject collections rather than only ones where the `Element` conforms to `Comparable`.\r\n* Add support for using user-defined types with `@Persistable` and in Realm collections by defining a mapping to and from a type which Realm knows how to store. For example, `URL` can be made persistable with:\r\n  ```swift\r\n  extension URL: FailableCustomPersistable {\r\n      // Store URL values as a String in Realm\r\n      public typealias PersistedType = String\r\n      // Convert a String to a URL\r\n      public init?(persistedValue: String) { self.init(string: persistedValue) }\r\n      // Convert a URL to a String\r\n      public var persistableValue: String { self.absoluteString }\r\n  }\r\n  ```\r\n  After doing this, `@Persisted var url: URL` is a valid property declaration on a Realm object. More advanced mappings can be done by mapping to an EmbeddedObject which can store multiple values.\r\n\r\n### Fixed\r\n\r\n* Accessing a non object collection inside a migration would cause a crash\r\n* [#5633](https://github.com/realm/realm-cocoa/issues/5633).\r\n* Accessing a `Map` of objects dynamically would not handle nulled values correctly (since v10.8.0).\r\n* `where()` allowed constructing some nonsensical queries due to boolean comparisons returning `Query<T>` rather than `Query<Bool>` (since v10.19.0).\r\n* `@allValues` queries on dictionaries accidentally did not require \"ANY\".\r\n* Case-insensitive and diacritic-insensitive modifiers were ignored when comparing the result of an aggregate operation to another property in a query.\r\n* `Object.init(value:)` did not allow initializing `RLMDictionary<NSString, RLMObject>`/`Map<String, Object?>` properties with null values for map entries (since v10.8.0).\r\n* `@ObservedResults` did not refresh when changes were made to the observed collection. (since v10.6.0)\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 13.2.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 12.4-13.2.1.",
    "createdAt" : "2022-01-11T08:57:13+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84DYnKU",
    "owner" : "realm",
    "publishedAt" : "2022-01-11T09:03:26+09:00",
    "repository" : "realm-swift",
    "title" : "v10.21.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.21.0",
    "version" : "v10.21.0"
  },
  {
    "body" : "### Fixed\r\n\r\n* The sync client will now drain the receive queue when a send fails with ECONNRESET, ensuring that any error message from the server gets received and processed. ([#5078](https://github.com/realm/realm-core/pull/5078))\r\n* Schema validation was missing for embedded objects in sets, resulting in an unhelpful error being thrown if a Realm object subclass contained one (since v10.0.0).\r\n* Opening a Realm with a schema that has an orphaned embedded object type performed an extra empty write transaction (since v10.0.0).\r\n* Freezing a Realm with a schema that has orphaned embedded object types threw a \"Wrong transactional state\" exception (since v10.19.0).\r\n* `@sum` and `@avg` queries on Dictionaries of floats or doubles used too much precision for intermediates, resulting in incorrect rounding (since v10.5.0).\r\n* Change the exception message for calling refresh on an immutable Realm from \"Continuous transaction through DB object without history information.\" to \"Can't refresh a read-only Realm.\" ([#5061](https://github.com/realm/realm-core/issues/5061), since v10.8.0).\r\n* Queries of the form \"link.collection.@sum = 0\" where `link` is null matched when `collection` was a List or Set, but not a Dictionary\r\n  ([#5080](https://github.com/realm/realm-core/pull/5080), since v10.8.0).\r\n* Types which require custom obj-c bridging (such as `PersistableEnum` or `CustomPersistable`) would crash with exceptions mentioning `__SwiftValue` in a variety of places on iOS versions older than iOS 14 ([#7604](https://github.com/realm/realm-swift/issues/7604), since v10.21.0)\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 13.2.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 12.4-13.2.1.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 11.6.1 to 11.8.0.",
    "createdAt" : "2022-01-13T05:35:00+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84DZQ1w",
    "owner" : "realm",
    "publishedAt" : "2022-01-13T05:41:22+09:00",
    "repository" : "realm-swift",
    "title" : "v10.21.1",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.21.1",
    "version" : "v10.21.1"
  },
  {
    "body" : "### Enhancements\n\n* Add beta support for flexible sync. See the [backend](https://docs.mongodb.com/realm/sync/data-access-patterns/flexible-sync/) and [SDK](https://docs.mongodb.com/realm/sdk/swift/examples/flexible-sync/) documentation for more information. Please report any issues with the beta through Github.\n\n### Fixed\n\n* UserIdentity metadata table grows indefinitely. ([#5152](https://github.com/realm/realm-core/issues/5152), since v10.20.0)\n* We now report a useful error message when opening a sync Realm in non-sync mode or vice-versa.([#5161](https://github.com/realm/realm-core/pull/5161), since v5.0.0).\n\n### Compatibility\n\n* Realm Studio: 11.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 13.2.1.\n* CocoaPods: 1.10 or later.\n* Xcode: 12.4-13.2.1.\n\n### Internal\n\n* Upgraded realm-core from 11.8.0 to 11.9.0",
    "createdAt" : "2022-01-25T11:28:08+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84Dcz5t",
    "owner" : "realm",
    "publishedAt" : "2022-01-25T11:34:34+09:00",
    "repository" : "realm-swift",
    "title" : "v10.22.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.22.0",
    "version" : "v10.22.0"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Add `Realm.writeCopy(configuration:)`/`[RLMRealm writeCopyForConfiguration:]` which gives the following functionality:\r\n    - Export a local non-sync Realm to be used with MongoDB Realm Sync when the configuration is derived from a sync `RLMUser`/`User`.\r\n    - Write a copy of a local Realm to a destination specified in the configuration.\r\n    - Write a copy of a synced Realm in use with user A, and open it with user B.\r\n    - Note that migrations may be required when using a local realm configuration to open a realm file that was copied from a synchronized realm.\r\n  An exception will be thrown if a Realm exists at the destination.\r\n* Add a `seedFilePath` option to `RLMRealmConfiguration` and `Configuration`. If this option is set then instead of creating an empty Realm, the realm at the `seedFilePath` will be copied to the `fileURL` of the new Realm. If a Realm file already exists at the\r\n  destination path, the seed file will not be copied and the already existing Realm will be opened instead. Note that to use this parameter with a synced Realm configuration the seed Realm must be appropriately copied to a destination with  `Realm.writeCopy(configuration:)`/`[RLMRealm writeCopyForConfiguration:]` first.\r\n* Add ability to permanently delete a User from a MongoDB Realm app. This can be invoked with `User.delete()`/`[RLMUser deleteWithCompletion:]`.\r\n* Add `NSCopying` conformance to `RLMDecimal128` and `RLMObjectId`.\r\n* Add Xcode 13.3 binaries to the release package (and remove 13.0).\r\n\r\n### Fixed\r\n\r\n* Add support of arm64 in Carthage build ([#7154](https://github.com/realm/realm-cocoa/issues/7154)\r\n* Adding missing support for `IN` queries to primitives types on Type Safe Queries.\r\n  ```swift\r\n  let persons = realm.objects(Person.self).where {\r\n    let acceptableNames = [\"Tom\", \"James\", \"Tyler\"]\r\n    $0.name.in([acceptableNames])\r\n  }\r\n  ```\r\n  ([Cocoa #7633](https://github.com/realm/realm-swift/issues/7633), since v10.19.0)\r\n* Work around a compiler crash when building with Swift 5.6 / Xcode 13.3. CustomPersistable's PersistedType must now always be a built-in type rather than possibly another CustomPersistable type as Swift 5.6 has removed support for infinitely-recursive associated types ([#7654](https://github.com/realm/realm-swift/issues/7654)).\r\n* Fix redundant call to filter on `@ObservedResults` from `searchable` component (since v10.19.0).\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 13.2.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 12.4-13.3 beta 3.",
    "createdAt" : "2022-03-01T12:11:02+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84DncP8",
    "owner" : "realm",
    "publishedAt" : "2022-03-01T12:18:02+09:00",
    "repository" : "realm-swift",
    "title" : "v10.23.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.23.0",
    "version" : "v10.23.0"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Add ability to use Swift Query syntax in `@ObservedResults`, which allows you to filter results using the `where` parameter.\r\n\r\n### Fixed\r\n\r\n* If a list of objects contains links to objects not included in the synchronized partition, collection change notifications for that list could be incorrect ([Core #5164](https://github.com/realm/realm-core/issues/5164), since v10.0.0).\r\n* Adding a new flexible sync subscription could crash with \"Assertion failed: !m_unbind_message_sent\" in very specific timing scenarios ([Core #5149](https://github.com/realm/realm-core/pull/5149), since v10.22.0).\r\n* Converting floats/doubles into Decimal128 would yield imprecise results ([Core #5184](https://github.com/realm/realm-core/pull/5184), since v10.0.0)\r\n* Using accented characters in class and field names in a synchronized Realm could result in sync errors ([Core #5196](https://github.com/realm/realm-core/pull/5196), since v10.0.0).\r\n* Calling `Realm.invalidate()` from inside a Realm change notification could result in the write transaction which produced the notification not being persisted to disk (since v10.22.0).\r\n* When a client reset error which results in the current Realm file being backed up and then deleted, deletion errors were ignored as long as the copy succeeded. When this happens the deletion of the old file is now scheduled for the next launch of the app. ([Core #5180](https://github.com/realm/realm-core/issues/5180), since v2.0.0)\r\n* Fix an error when compiling a watchOS Simulator target not supporting Thread-local storage ([#7623](https://github.com/realm/realm-swift/issues/7623), since v10.21.0).\r\n* Add a validation check to report a sensible error if a Realm configuration indicates that an in-memory Realm should be encrypted. ([Core #5195](https://github.com/realm/realm-core/issues/5195))\r\n* The Swift package set the linker flags on the wrong target, resulting in linker errors when SPM decides to build the core library as a dynamic library ([#7266](https://github.com/realm/realm-swift/issues/7266)).\r\n* The download-core task failed if run in an environment without TMPDIR set ([#7688](https://github.com/realm/realm-swift/issues/7688), since v10.23.0).\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 13.2.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 12.4-13.3 beta 3.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 11.9.0 to 11.11.0\r\n",
    "createdAt" : "2022-03-06T11:19:11+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84Do-18",
    "owner" : "realm",
    "publishedAt" : "2022-03-06T11:24:32+09:00",
    "repository" : "realm-swift",
    "title" : "v10.24.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.24.0",
    "version" : "v10.24.0"
  },
  {
    "body" : "Switch to building the Carthage binary with Xcode 13.3. This release contains\nno functional changes from 10.24.0.\n\n### Compatibility\n\n* Realm Studio: 11.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 13.3.\n* CocoaPods: 1.10 or later.\n* Xcode: 12.4-13.3.",
    "createdAt" : "2022-03-15T08:46:20+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84Dr249",
    "owner" : "realm",
    "publishedAt" : "2022-03-15T08:51:51+09:00",
    "repository" : "realm-swift",
    "title" : "v10.24.1",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.24.1",
    "version" : "v10.24.1"
  },
  {
    "body" : "### Fixed\n\n* Application would sometimes crash with exceptions like 'KeyNotFound' or\n  assertion \"has_refs()\". Other issues indicating file corruption may also be\n  fixed by this. The one mentioned here is the one that lead to solving the\n  problem.\n  ([Core #5283](https://github.com/realm/realm-core/issues/5283), since v5.0.0)\n\n### Compatibility\n\n* Realm Studio: 11.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 13.3.\n* CocoaPods: 1.10 or later.\n* Xcode: 12.4-13.3.\n\n### Internal\n\n* Upgraded realm-core from 11.11.0 to 11.12.0",
    "createdAt" : "2022-03-19T11:11:57+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84Dtar8",
    "owner" : "realm",
    "publishedAt" : "2022-03-19T11:17:34+09:00",
    "repository" : "realm-swift",
    "title" : "v10.24.2",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.24.2",
    "version" : "v10.24.2"
  },
  {
    "body" : "Synchronized Realm files written by this version cannot be opened by older versions of Realm. Existing files will be automatically upgraded when opened.\r\n\r\nNon-synchronized Realm files remain backwards-compatible.\r\n\r\n### Enhancements\r\n\r\n* Add ability to use Swift Query syntax in `@ObservedResults`, which allows you to filter results using the `where` parameter.\r\n* Add ability to use `MutableSet` with `StateRealmObject` in SwiftUI.\r\n* Async/Await extensions are now compatible with iOS 13 and above when building with Xcode 13.3.\r\n* Sync changesets waiting to be uploaded to the server are now compressed, reducing the disk space needed when large write transactions are performed while offline or limited in bandwidth.([Core #5260](https://github.com/realm/realm-core/pull/5260)).\r\n* Added new `SyncConfiguration.clientResetMode` and `RLMSyncConfiguration.clientResetMode` properties.\r\n  - The values of these properties will dictate client behavior in the event of a [client reset](https://docs.mongodb.com/realm/sync/error-handling/client-resets/).\r\n  - See below for information on `ClientResetMode` values.\r\n  - `clientResetMode` defaults to `.manual` if not set otherwise.\r\n* Added new `ClientResetMode` and `RLMClientResetMode` enums.\r\n  - These enums represent possible client reset behavior for `SyncConfiguration.clientResetMode` and `RLMSyncConfiguration.clientResetMode`, respectively.\r\n  - `.manual` and `RLMClientResetModeManual`\r\n    - The local copy of the Realm is copied into a recovery directory for safekeeping, and then deleted from the original location. The next time the Realm for that partition value is opened, the Realm will automatically be re-downloaded from MongoDB Realm, and can be used as normal.\r\n    - Data written to the Realm after the local copy of the Realm diverged from the backup remote copy will be present in the local recovery copy of the Realm file. The re-downloaded Realm will initially contain only the data present at the time the Realm was backed up on the server.\r\n    -  `rlmSync_clientResetBackedUpRealmPath` and `SyncError.clientResetInfo()` are used for accessing the recovery directory.\r\n  - `.discardLocal` and `RLMClientResetDiscardLocal`\r\n    - All unsynchronized local changes are automatically discarded and the local state is automatically reverted to the most recent state from the server. Unsynchronized changes can then be recovered in a post-client-reset callback block (See changelog below for more details).\r\n    - If RLMClientResetModeDiscardLocal is enabled but the client reset operation is unable to complete then the client reset process reverts to manual mode.\r\n    - The realm's underlying object accessors remain bound so the UI may be updated in a non-disruptive way.\r\n* Added support for client reset notification blocks for `.discardLocal` and `RLMClientResetDiscardLocal`\r\n  - **RealmSwift implementation**: `discardLocal(((Realm) -> Void)? = nil, ((Realm, Realm) -> Void)? = nil)` \r\n    - RealmSwift client reset blocks are set when initializing the user configuration\r\n    ```swift\r\n    var configuration = user.configuration(partitionValue: \"myPartition\", clientResetMode: .discardLocal(beforeClientResetBlock, afterClientResetBlock))\r\n    ```\r\n    - The before client reset block -- `((Realm) -> Void)? = nil` -- is executed prior to a client reset. Possible usage includes:\r\n    ```swift\r\n    let beforeClientResetBlock: (Realm) -> Void = { beforeRealm in\r\n      var recoveryConfig = Realm.Configuration()\r\n        recoveryConfig.fileURL = myRecoveryPath\r\n        do {\r\n          beforeRealm.writeCopy(configuration: recoveryConfig)\r\n            /* The copied realm could be used later for recovery, debugging, reporting, etc. */\r\n        } catch {\r\n            /* handle error */\r\n        }\r\n    }\r\n    ```\r\n    - The after client reset block -- `((Realm, Realm) -> Void)? = nil)` -- is executed after a client reset. Possible usage includes:\r\n    ```Swift\r\n    let afterClientResetBlock: (Realm, Realm) -> Void = { before, after in\r\n    /* This block could be used to add custom recovery logic, back-up a realm file, send reporting, etc. */\r\n    for object in before.objects(myClass.self) {\r\n        let res = after.objects(myClass.self)\r\n        if (res.filter(\"primaryKey == %@\", object.primaryKey).first != nil) {\r\n             /* ...custom recovery logic... */\r\n        } else {\r\n             /* ...custom recovery logic... */\r\n        }\r\n    }\r\n    ```\r\n  - **Realm Obj-c implementation**: Both before and after client reset callbacks exist as properties on `RLMSyncConfiguration` and are set at initialization.\r\n    ```objective-c\r\n      RLMRealmConfiguration *config = [user configurationWithPartitionValue:partitionValue\r\n                                                            clientResetMode:RLMClientResetModeDiscardLocal\r\n                                                          notifyBeforeReset:beforeBlock\r\n                                                           notifyAfterReset:afterBlock];\r\n    ```\r\n    where `beforeBlock` is of type `RLMClientResetBeforeBlock`. And `afterBlock` is of type `RLMClientResetAfterBlock`.\r\n\r\n### Breaking Changes\r\n\r\n* Xcode 13.2 is no longer supported when building with Async/Await functions. Use Xcode 13.3 to build with Async/Await functionality.\r\n\r\n### Fixed\r\n\r\n* Adding a Realm Object to a `ObservedResults` or a collections using `StateRealmObject` that is managed by the same Realm would throw if the Object was frozen and not thawed before hand.\r\n* Setting a Realm Configuration for @ObservedResults using it's initializer would be overrode by the Realm Configuration stored in `.environment(\\.realmConfiguration, ...)` if they did not match ([Cocoa #7463](https://github.com/realm/realm-swift/issues/7463), since v10.6.0).\r\n* Fix searchable component filter overriding the initial filter on `@ObservedResults`, (since v10.23.0).\r\n* Comparing `Results`, `LinkingObjects` or `AnyRealmCollection` when using Realm via XCFramework would result in compile time errors ([Cocoa #7615](https://github.com/realm/realm-swift/issues/7615), since v10.21.0)\r\n* Opening an encrypted Realm while the keychain is locked on macOS would crash ([#7438](https://github.com/realm/realm-swift/issues/7438)).\r\n* Updating subscriptions while refreshing the access token would crash ([Core #5343](https://github.com/realm/realm-core/issues/5343), since v10.22.0)\r\n* Fix several race conditions in `SyncSession` related to setting `customRequestHeaders` while using the `SyncSession` on a different thread.\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 13.3.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 12.4-13.3.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from v11.12.0 to v11.13.0\r\n",
    "createdAt" : "2022-03-30T10:36:21+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84Dwswk",
    "owner" : "realm",
    "publishedAt" : "2022-03-30T10:41:56+09:00",
    "repository" : "realm-swift",
    "title" : "v10.25.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.25.0",
    "version" : "v10.25.0"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Improve performance of client reset with automatic recovery and converting top-level tables into embedded tables ([Core #5897](https://github.com/realm/realm-core/pull/5897)).\r\n* `Realm.Error` is now a typealias for `RLMError` rather than a manually-defined version of what the automatic bridging produces. This should have no effect on existing working code, but the manual definition was missing a few things supplied by the automatic bridging.\r\n* Some sync errors sent by the server include a link to the server-side logs associated with that error. This link is now exposed in the `serverLogURL` property on `SyncError` (or `RLMServerLogURLKey` userInfo field when using NSError).\r\n\r\n### Fixed\r\n\r\n* Many sync and app errors were reported using undocumented internal error codes and/or domains and could not be programmatically handled. Some notable things which now have public error codes instead of unstable internal ones:\r\n  - `Realm.Error.subscriptionFailed`: The server rejected a flexible sync subscription.\r\n  - `AppError.invalidPassword`: A login attempt failed due to a bad password.\r\n  - `AppError.accountNameInUse`: A registration attempt failed due to the account name being in use.\r\n  - `AppError.httpRequestFailed`: A HTTP request to Atlas App Services\r\n    completed with an error HTTP code. The failing code is available in the\r\n    `httpStatusCode` property.\r\n  - Many other less common error codes have been added to `AppError`.\r\n  - All sync errors other than `SyncError.clientResetError` reported incorrect\r\n    error codes.\r\n  (since v10.0.0).\r\n* `UserAPIKey.objectId` was incorrectly bridged to Swift as `RLMObjectId` to `ObjectId`. This may produce warnings about an unneccesary cast if you were previously casting it to the correct type (since v10.0.0).\r\n* Fixed an assertion failure when observing change notifications on a sectioned result, if the first modification was to a linked property that did not cause the state of the sections to change. ([Core #5912](https://github.com/realm/realm-core/issues/5912), since the introduction of sectioned results in v10.29.0)\r\n* Fix a use-after-free if the last external reference to an encrypted synchronized Realm was closed between when a client reset error was received and when the download of the new Realm began. ([Core #5949](https://github.com/realm/realm-core/pull/5949), since 10.28.4).\r\n* Fix an assertion failure during client reset with recovery when recovering a list operation on an embedded object that has a link column in the path prefix to the list from the top level object. ([Core #5957](https://github.com/realm/realm-core/issues/5957), since introduction of automatic recovery in v10.32.0).\r\n* Creating a write transaction which is rejected by the server due to it exceeding the maximum transaction size now results in a client reset error instead of synchronization breaking and becoming stuck forever ([Core #5209](https://github.com/realm/realm-core/issues/5209), since v10).\r\n* Opening an unencrypted file with an encryption key would sometimes report a misleading error message that indicated that the problem was something other than a decryption failure ([Core #5915](https://github.com/realm/realm-core/pull/5915), since 0.89.0).\r\n* Fix a rare deadlock which could occur when closing a synchronized Realm immediately after committing a write transaction when the sync worker thread has also just finished processing a changeset from the server ([Core #5948](https://github.com/realm/realm-core/pull/5948)).\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 14.0.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 13.1-14.1.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 12.9.0 to 12.11.0.\r\n",
    "createdAt" : "2022-10-26T13:27:28+09:00",
    "fetchedFromAPIAt" : "2022-10-27T09:57:41+09:00",
    "id" : "RE_kwDOAD24W84E0-lH",
    "owner" : "realm",
    "publishedAt" : "2022-10-26T13:32:04+09:00",
    "repository" : "realm-swift",
    "title" : "v10.32.1",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.32.1",
    "version" : "v10.32.1"
  },
  {
    "body" : "Switch to building the Carthage release with Xcode 14.1.\n\n### Fixed\n\n* Fix linker errors when building a release build with Xcode 14.1 when\n installing via SPM ([#7995](https://github.com/realm/realm-swift/issues/7995)).\n\n### Compatibility\n\n* Realm Studio: 11.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 14.1.\n* CocoaPods: 1.10 or later.\n* Xcode: 13.1-14.1.",
    "createdAt" : "2022-11-03T10:56:11+09:00",
    "fetchedFromAPIAt" : "2022-11-04T09:57:32+09:00",
    "id" : "RE_kwDOAD24W84E4bZU",
    "owner" : "realm",
    "publishedAt" : "2022-11-03T11:01:08+09:00",
    "repository" : "realm-swift",
    "title" : "v10.32.2",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.32.2",
    "version" : "v10.32.2"
  },
  {
    "body" : "### Fixed\r\n\r\n* Fix name lookup errors when importing Realm Swift built in library evolution mode (([#8014](https://github.com/realm/realm-swift/issues/8014)).\r\n* The prebuilt watchOS library in the objective-c release package was missing an arm64 slice. The Swift release package was uneffected ([PR #8016](https://github.com/realm/realm-swift/pull/8016)).\r\n* Fix issue where `RLMUserAPIKey.key`/`UserAPIKey.key` incorrectly returned the name of the API key instead of the key itself. ([#8021](https://github.com/realm/realm-swift/issues/8021), since v10.0.0)\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 14.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 13.1-14.1.",
    "createdAt" : "2022-11-11T09:53:47+09:00",
    "fetchedFromAPIAt" : "2022-11-12T09:54:01+09:00",
    "id" : "RE_kwDOAD24W84E7qiX",
    "owner" : "realm",
    "publishedAt" : "2022-11-11T09:59:15+09:00",
    "repository" : "realm-swift",
    "title" : "v10.32.3",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.32.3",
    "version" : "v10.32.3"
  },
  {
    "body" : "Xcode 13.1 is now the minimum supported version of Xcode, as Apple no longer allows submitting to the app store with Xcode 12.\r\n\r\n### Enhancements\r\n\r\n* Add Xcode 13.4 binaries to the release package.\r\n* Add Swift API for asynchronous transactions\r\n```swift\r\n    try? realm.writeAsync {\r\n        realm.create(SwiftStringObject.self, value: [\"string\"])\r\n    } onComplete: { error in\r\n        // optional handling on write complete\r\n    }\r\n\r\n    try? realm.beginAsyncWrite {\r\n        realm.create(SwiftStringObject.self, value: [\"string\"])\r\n        realm.commitAsyncWrite()\r\n    }\r\n\r\n    let asyncTransactionId = try? realm.beginAsyncWrite {\r\n        // ...\r\n    }\r\n    try! realm.cancelAsyncWrite(asyncTransactionId)\r\n```\r\n* Add Obj-C API for asynchronous transactions\r\n```\r\n   [realm asyncTransactionWithBlock:^{\r\n        [StringObject createInRealm:realm withValue:@[@\"string\"]];\r\n    } onComplete:^(NSError *error) {\r\n        // optional handling\r\n    }];\r\n\r\n    [realm beginAsyncWriteTransaction:^{\r\n        [StringObject createInRealm:realm withValue:@[@\"string\"]];\r\n        [realm commitAsyncWriteTransaction];\r\n    }];\r\n\r\n    RLMAsyncTransactionId asyncTransactionId = [realm beginAsyncWriteTransaction:^{\r\n        // ...\r\n    }];\r\n    [realm cancelAsyncTransaction:asyncTransactionId];\r\n```\r\n* Improve performance of opening a Realm with `objectClasses`/`objectTypes` set in the configuration.\r\n* Implement the Realm event recording API for reporting reads and writes on a Realm file to Atlas.\r\n\r\n### Fixed\r\n\r\n* Lower minimum OS version for `async` login and FunctionCallables to match the rest of the `async` functions. ([#7791]https://github.com/realm/realm-swift/issues/7791)\r\n* Consuming a RealmSwift XCFramework with library evolution enabled would give the error `'Failed to build module 'RealmSwift'; this SDK is not supported by the compiler'` when the XCFramework was built with an older XCode version and is then consumed with a later version. ([#7313](https://github.com/realm/realm-swift/issues/7313), since v3.18.0)\r\n* A data race would occur when opening a synchronized Realm with the client reset mode set to `discardLocal` on one thread at the same time as a client reset was being processed on another thread. This probably did not cause any functional problems in practice and the broken timing window was very tight (since 10.25.0).\r\n* If an async open of a Realm triggered a client reset, the callbacks for `discardLocal` could theoretically fail to be called due to a race condition. The timing for this was probably not possible to hit in practice (since 10.25.0).\r\n* Calling `[RLMRealm freeze]`/`Realm.freeze` on a Realm which had been created from `writeCopy` would not produce a frozen Realm. ([#7697](https://github.com/realm/realm-swift/issues/7697), since v5.0.0)\r\n* Using the dynamic subscript API on unmanaged objects before first opening a Realm or if `objectTypes` was set when opening a Realm would throw an exception ([#7786](https://github.com/realm/realm-swift/issues/7786)).\r\n* The sync client may have sent a corrupted upload cursor leading to a fatal error from the server due to an uninitialized variable. ([#5460](https://github.com/realm/realm-core/pull/5460), since v10.25.1)\r\n* Flexible sync would not correctly resume syncing if a bootstrap was interrupted ([#5466](https://github.com/realm/realm-core/pull/5466), since v10.21.1).\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 13.4.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 13.1-13.4.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from v11.15.0 to v11.17.0",
    "createdAt" : "2022-05-20T08:05:01+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84EA2n8",
    "owner" : "realm",
    "publishedAt" : "2022-05-20T08:10:25+09:00",
    "repository" : "realm-swift",
    "title" : "v10.26.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.26.0",
    "version" : "v10.26.0"
  },
  {
    "body" : "### Enhancements\r\n\r\n* `@AsyncOpen`/`@AutoOpen` property wrappers can be used with flexible sync.\r\n\r\n### Fixed\r\n\r\n* When installing via SPM, debug builds could potentially hit an assertion failure during flexible sync bootstrapping. ([Core #5527](https://github.com/realm/realm-core/pull/5527))\r\n* Flexible sync now only applies bootstrap data if the entire bootstrap is received. Previously orphaned objects could result from the read snapshot on the server changing. ([Core #5331](https://github.com/realm/realm-core/pull/5331))\r\n* Partially fix a performance regression in write performance introduced in v10.21.1. v10.21.1 fixed a case where a kernel panic or device's battery dying at the wrong point in a write transaction could potentially result in a corrected Realm file, but at the cost of a severe performance hit. This version adjusts how file synchronization is done to provide the same safety at a much smaller performance hit. ([#7740](https://github.com/realm/realm-swift/issues/7740)).\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later (but see note below).\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 13.4.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 13.1-13.4.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 11.17.0 to 12.0.0.\r\n* Bump the version number for the lockfile used for interprocess synchronization. This has no effect on persistent data, but means that versions of Realm which use pre-12.0.0 realm-core cannot open Realm files at the same time as they are opened by this version. Notably this includes Realm Studio, and v11.1.2 (the latest at the time of this release) cannot open Realm files which are simultaneously open in the simulator.",
    "createdAt" : "2022-05-27T12:45:11+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84EDVel",
    "owner" : "realm",
    "publishedAt" : "2022-05-27T12:50:15+09:00",
    "repository" : "realm-swift",
    "title" : "v10.27.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.27.0",
    "version" : "v10.27.0"
  },
  {
    "body" : "### Enhancements\n\n* Replace mentions of 'MongoDB Realm' with 'Atlas App Services' in the documentation and update appropriate links to documentation.\n* Allow adding a subscription querying for all documents of a type in swift for flexible sync.\n```\n   try await subscriptions.update {\n      subscriptions.append(QuerySubscription<SwiftPerson>(name: \"all_people\"))\n   }\n```\n* Add Combine API support for flexible sync beta.\n* Add an `initialSubscriptions` parameter when retrieving the flexible sync configuration from a user, \n  which allows to specify a subscription update block, to bootstrap a set of flexible sync subscriptions \n  when the Realm is first opened.\n  There is an additional optional parameter flag `rerunOnOpen`, which allows to run this initial \n  subscriptions on every app startup.\n\n```swift\n    let config = user.flexibleSyncConfiguration(initialSubscriptions: { subs in\n        subs.append(QuerySubscription<SwiftPerson>(name: \"people_10\") {\n            $0.age > 10\n        })\n    }, rerunOnOpen: true)\n    let realm = try Realm(configuration: config)\n```\n* The sync client error handler will report an error, with detailed info about which object caused it, when writing an object to a flexible sync Realm outside of any query subscription. ([#5528](https://github.com/realm/realm-core/pull/5528))\n* Adding an object to a flexible sync Realm for a type that is not within a query subscription will now throw an exception. ([#5488](https://github.com/realm/realm-core/pull/5488)).\n\n### Fixed\n\n* Flexible Sync query subscriptions will correctly complete when data is synced to the local Realm. ([#5553](https://github.com/realm/realm-core/pull/5553), since v12.0.0)\n\n### Breaking Changes\n\n* Rename `SyncSubscriptionSet.write` to `SyncSubscriptionSet.update` to avoid confusion with `Realm.write`.\n* Rename `SyncSubscription.update` to `SyncSubscription.updateQuery` to avoid confusion with `SyncSubscriptionSet.update`.\n* Rename `RLMSyncSubscriptionSet.write` to `RLMSyncSubscriptionSet.update` to align it with swift API.\n\n### Compatibility\n\n* Realm Studio: 11.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 13.4.\n* CocoaPods: 1.10 or later.\n* Xcode: 13.1-13.4.\n\n### Internal\n\n* Upgraded realm-core from 12.0.0 to 12.1.0.",
    "createdAt" : "2022-06-04T04:08:38+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84EFo7C",
    "owner" : "realm",
    "publishedAt" : "2022-06-04T04:14:05+09:00",
    "repository" : "realm-swift",
    "title" : "v10.28.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.28.0",
    "version" : "v10.28.0"
  },
  {
    "body" : "### Enhancements\n\n* Add support for Xcode 14. When building with Xcode 14, the minimum deployment\n  target is now iOS 11.\n\n### Compatibility\n\n* Realm Studio: 11.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 13.4.1.\n* CocoaPods: 1.10 or later.\n* Xcode: 13.1-14 beta 1.",
    "createdAt" : "2022-06-11T03:13:17+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84EH6SC",
    "owner" : "realm",
    "publishedAt" : "2022-06-11T03:18:09+09:00",
    "repository" : "realm-swift",
    "title" : "v10.28.1",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.28.1",
    "version" : "v10.28.1"
  },
  {
    "body" : "### Fixed\r\n\r\n* Using `seedFilePath` threw an exception if the Realm file being opened already existed ([#7840](https://github.com/realm/realm-swift/issues/7840), since v10.26.0).\r\n* The `intialSubscriptions` callback was invoked every time a Realm was opened regardless of the value of `rerunOnOpen` and if the Realm was already open on another thread (since v10.28.0).\r\n* Allow using `RLMSupport.Swift` from RealmSwift's Cocoapods ([#6886](https://github.com/realm/realm-swift/pull/6886)).\r\n* Fix a UBSan failure when mapping encrypted pages. Fixing this did not change the resulting assembly, so there were probably no functional problems resulting from this (since v5.0.0).\r\n* Improved performance of sync clients during integration of changesets with many small strings (totalling > 1024 bytes per changeset) on iOS 14, and devices which have restrictive or fragmented memory. ([Core #5614](https://github.com/realm/realm-core/issues/5614))\r\n* Fix a data race when opening a flexible sync Realm (since v10.28.0).\r\n* Add a missing backlink removal when assigning null or a non-link value to an `AnyRealmValue` property which previously linked to an object. This could have resulted in \"key not found\" exceptions or assertion failures such as `mixed.hpp:165: [realm-core-12.1.0] Assertion failed: m_type` when removing the destination link object. ([Core #5574](https://github.com/realm/realm-core/pull/5573), since the introduction of AnyRealmValue in v10.8.0)\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 12.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 13.4.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 13.1-14 beta 2.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 12.1.0 to 12.3.0.\r\n",
    "createdAt" : "2022-07-01T00:59:08+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84EO2f3",
    "owner" : "realm",
    "publishedAt" : "2022-07-01T02:12:05+09:00",
    "repository" : "realm-swift",
    "title" : "v10.28.2",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.28.2",
    "version" : "v10.28.2"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Greatly improve the performance of obtaining cached Realm instances in Swift when using a sync configuration.\r\n\r\n### Fixed\r\n\r\n* Add missing `initialSubscription` and `rerunOnOpen` to copyWithZone method on `RLMRealmConfiguration`. This resulted in incorrect values when using `RLMRealmConfiguration.defaultConfiguration`.\r\n* The sync error handler did not hold a strong reference to the sync session while dispatching the error from the worker thread to the main thread, resulting in the session passed to the error handler being invalid if there were no other remaining strong references elsewhere.\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 13.4.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 13.1-14 beta 3.\r\n",
    "createdAt" : "2022-07-28T04:22:50+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84EWdcT",
    "owner" : "realm",
    "publishedAt" : "2022-07-28T04:27:56+09:00",
    "repository" : "realm-swift",
    "title" : "v10.28.3",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.28.3",
    "version" : "v10.28.3"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Add support for building arm64 watchOS when installing Realm via CocoaPods.\r\n* Reduce the amount of virtual address space used ([Core #5645](https://github.com/realm/realm-core/pull/5645)).\r\n\r\n### Fixed\r\n\r\n* Fix some warnings when building with Xcode 14 ([Core #5577](https://github.com/realm/realm-core/pull/5577)).\r\n* Fix compilation failures on watchOS platforms which do not support thread-local storage. ([#7694](https://github.com/realm/realm-swift/issues/7694), [#7695](https://github.com/realm/realm-swift/issues/7695) since v10.21.1)\r\n* Fix a data race when committing a transaction while multiple threads are waiting to begin write transactions. This appears to not have caused any functional problems.\r\n* Fix a data race when writing audit events which could occur if the sync client thread was busy with other work when the event Realm was opened.\r\n* Fix some cases of running out of virtual address space (seen/reported as mmap failures) ([Core #5645](https://github.com/realm/realm-core/pull/5645)).\r\n* Audit event scopes containing only write events and no read events would occasionally throw a `BadVersion` exception when a write transaction was committed (since v10.26.0).\r\n* The client reset callbacks for the DiscardLocal mode would be passed invalid Realm instances if the callback was invoked at a point where the Realm was not otherwise open. ([Core #5654](https://github.com/realm/realm-core/pull/5654), since the introduction of DiscardLocal reset mode in v10.25.0)\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 13.4.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 13.1-14 beta 4.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 12.3.0 to 12.4.0.",
    "createdAt" : "2022-08-04T06:46:36+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84EYtos",
    "owner" : "realm",
    "publishedAt" : "2022-08-04T06:51:50+09:00",
    "repository" : "realm-swift",
    "title" : "v10.28.4",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.28.4",
    "version" : "v10.28.4"
  },
  {
    "body" : "### Enhancements\n\n* Improve performance of accessing `SubscriptionSet` properties when no writes\n  have been made to the Realm since the last access.\n\n### Fixed\n\n* A use-after-free could occur if a Realm with audit events enabled was\n  destroyed while processing an upload completion for the events Realm on a\n  different thread. ([Core PR #5714](https://github.com/realm/realm-core/pull/5714))\n* Opening a read-only synchronized Realm for the first time via asyncOpen did\n  not set the schema version, which could lead to `m_schema_version !=\n  ObjectStore::NotVersioned` assertion failures later on.\n\n### Compatibility\n\n* Realm Studio: 11.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 13.4.1.\n* CocoaPods: 1.10 or later.\n* Xcode: 13.1-14 beta 4.\n\n### Internal\n\n* Upgraded realm-core from 12.4.0 to 12.5.0",
    "createdAt" : "2022-08-10T06:58:21+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84Eac8O",
    "owner" : "realm",
    "publishedAt" : "2022-08-10T07:03:31+09:00",
    "repository" : "realm-swift",
    "title" : "v10.28.5",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.28.5",
    "version" : "v10.28.5"
  },
  {
    "body" : "### Fixed\n* Fixed an issue where having realm-swift as SPM sub-target dependency leads to missing symbols error during iOS archiving ([Core #7645](https://github.com/realm/realm-core/pull/7645)).\n\n### Compatibility\n* Realm Studio: 11.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 13.4.1.\n* CocoaPods: 1.10 or later.\n* Xcode: 13.1-14 beta 5.\n\n### Internal\n\n* Upgraded realm-core from 12.5.0 to 12.5.1",
    "createdAt" : "2022-08-19T19:45:43+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84EdbFd",
    "owner" : "realm",
    "publishedAt" : "2022-08-19T19:50:56+09:00",
    "repository" : "realm-swift",
    "title" : "v10.28.6",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.28.6",
    "version" : "v10.28.6"
  },
  {
    "body" : "### Enhancements\n\n* Add prebuilt binaries for Xcode 14 to the release package.\n\n### Fixed\n\n* Fix archiving watchOS release builds with Xcode 14.\n\n### Compatibility\n\n* Realm Studio: 11.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 13.4.1.\n* CocoaPods: 1.10 or later.\n* Xcode: 13.1-14 beta 6.",
    "createdAt" : "2022-09-03T04:23:47+09:00",
    "fetchedFromAPIAt" : "2022-09-03T09:54:10+09:00",
    "id" : "RE_kwDOAD24W84EimFt",
    "owner" : "realm",
    "publishedAt" : "2022-09-03T04:29:23+09:00",
    "repository" : "realm-swift",
    "title" : "v10.28.7",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.28.7",
    "version" : "v10.28.7"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Add support for asymmetric sync. When a class inherits from `AsymmetricObject`, objects created are synced unidirectionally to the server and cannot be queried or read locally.\r\n\r\n```swift\r\n    class PersonObject: AsymmetricObject {\r\n       @Persisted(primaryKey: true) var _id: ObjectId\r\n       @Persisted var name: String\r\n       @Persisted var age: Int\r\n    }\r\n\r\n    try realm.write {\r\n       // This will create the object on the server but not locally.\r\n       realm.create(PersonObject.self, value: [\"_id\": ObjectId.generate(),\r\n                                               \"name\": \"Dylan\",\r\n                                               \"age\": 20])\r\n    }\r\n```\r\n* Add ability to section a collection which conforms to `RealmCollection`, `RLMCollection`. Collections can be sectioned by a unique key retrieved from a keyPath or a callback and will return an instance of `SectionedResults`/`RLMSectionedResults`. Each section in the collection will be an instance of `ResultsSection`/`RLMSection` which gives access to the elements corresponding to the section key. `SectionedResults`/`RLMSectionedResults` and `ResultsSection`/`RLMSection` have the ability to be observed.\r\n  ```swift\r\n  class DemoObject: Object {\r\n      @Persisted var title: String\r\n      @Persisted var date: Date\r\n      var firstLetter: String {\r\n          return title.first.map(String.init(_:)) ?? \"\"\r\n      }\r\n  }\r\n  var sectionedResults: SectionedResults<String, DemoObject>\r\n  // ...\r\n  sectionedResults = realm.objects(DemoObject.self)\r\n      .sectioned(by: \\.firstLetter, ascending: true)\r\n  ```\r\n* Add `@ObservedSectionedResults` for SwiftUI support. This property wrapper type retrieves sectioned results from a Realm using a keyPath or callback to determine the section key.\r\n  ```swift\r\n  struct DemoView: View {\r\n      @ObservedSectionedResults(DemoObject.self,\r\n                                sectionKeyPath: \\.firstLetter) var demoObjects\r\n\r\n      var body: some View {\r\n          VStack {\r\n              List {\r\n                  ForEach(demoObjects) { section in\r\n                      Section(header: Text(section.key)) {\r\n                          ForEach(section) { object in\r\n                              MyRowView(object: object)\r\n                          }\r\n                      }\r\n                  }\r\n              }\r\n          }\r\n      }\r\n  }\r\n  ```\r\n* Add automatic handing for changing top-level objects to embedded objects in migrations. Any objects of the now-embedded type which have zero incoming links are deleted, and objects with multiple incoming links are duplicated. This happens after the migration callback function completes, so there is no functional change if you already have migration logic which correctly handles this. ([Core #5737](https://github.com/realm/realm-core/pull/5737)).\r\n* Improve performance when a new Realm file connects to the server for the first time, especially when significant amounts of data has been written while offline. ([Core #5772](https://github.com/realm/realm-core/pull/5772))\r\n* Shift more of the work done on the sync worker thread out of the write transaction used to apply server changes, reducing how long it blocks other threads from writing. ([Core #5772](https://github.com/realm/realm-core/pull/5772))\r\n* Improve the performance of the sync changeset parser, which speeds up applying changesets from the server. ([Core #5772](https://github.com/realm/realm-core/pull/5772))\r\n\r\n### Fixed\r\n\r\n* Fix all of the UBSan failures hit by our tests. It is unclear if any of these manifested as visible bugs. ([Core #5665](https://github.com/realm/realm-core/pull/5665))\r\n* Upload completion callbacks were sometimes called before the final step of interally marking the upload as complete, which could result in calling `Realm.writeCopy()` from the completion callback failing due to there being unuploaded changes. ([Core #4865](https://github.com/realm/realm-core/issues/4865)).\r\n* Writing to a Realm stored on an exFAT drive threw the exception \"fcntl() with F_BARRIERFSYNC failed: Inappropriate ioctl for device\" when a write transaction needed to expand the file. ([Core #5789](https://github.com/realm/realm-core/issues/5789), since 10.27.0)\r\n* Syncing a Decimal128 with big significand could result in a crash. ([Core #5728](https://github.com/realm/realm-core/issues/5728))\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 13.4.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 13.1-14 RC.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 12.5.1 to 12.6.0\r\n",
    "createdAt" : "2022-09-10T10:40:29+09:00",
    "fetchedFromAPIAt" : "2022-09-11T09:59:29+09:00",
    "id" : "RE_kwDOAD24W84Ek4b9",
    "owner" : "realm",
    "publishedAt" : "2022-09-10T10:45:43+09:00",
    "repository" : "realm-swift",
    "title" : "v10.29.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.29.0",
    "version" : "v10.29.0"
  },
  {
    "body" : "### Fixed\r\n\r\n* Incoming links from `RealmAny` properties were not handled correctly when migrating an object type from top-level to embedded. `RealmAny` properties currently cannot link to embedded objects. ([Core #5796](https://github.com/realm/realm-core/pull/5796), since 10.8.0).\r\n* `Realm.refresh()` sometimes did not actually advance to the latest version. It attempted to be semi-non-blocking in a very confusing way which resulted in it sometimes advancing to a newer version that is not the latest version, and sometimes blocking until notifiers are ready so that it could advance to the latest version. This behavior was undocumented and didn't work correctly, so it now always blocks if needed to advance to the latest version. ([#7625](https://github.com/realm/realm-swift/issues/7625), since v0.98.0).\r\n* Fix the most common cause of thread priority inversions when performing writes on the main thread. If beginning the write transaction has to wait for the background notification calculations to complete, that wait is now done in a QoS-aware way. ([#7902](https://github.com/realm/realm-swift/issues/7902))\r\n* Subscribing to link properties in a flexible sync Realm did not work due to a mismatch between what the client sent and what the server needed. ([Core #5409](https://github.com/realm/realm-core/issues/5409))\r\n* Attempting to use `AsymmetricObject` with partition-based sync now reports a sensible error much earlier in the process. Asymmetric sync requires using flexible sync. ([Core #5691](https://github.com/realm/realm-core/issues/5691), since 10.29.0).\r\n* Case-insensitive but diacritic-sensitive queries would crash on 4-byte UTF-8 characters ([Core #5825](https://github.com/realm/realm-core/issues/5825), since v2.2.0)\r\n* Accented characters are now handled by case-insensitive but diacritic-sensitive queries. ([Core #5825](https://github.com/realm/realm-core/issues/5825), since v2.2.0)\r\n\r\n### Breaking Changes\r\n\r\n* `-[RLMASLoginDelegate authenticationDidCompleteWithError:]` has been renamed to `-[RLMASLoginDelegate authenticationDidFailWithError:]` to comply with new app store requirements. This only effects the obj-c API. ([#7945](https://github.com/realm/realm-swift/issues/7945))\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 13.4.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 13.1 - 14.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 12.6.0 to 12.7.0\r\n",
    "createdAt" : "2022-09-21T06:03:34+09:00",
    "fetchedFromAPIAt" : "2022-09-21T10:02:34+09:00",
    "id" : "RE_kwDOAD24W84EoaQs",
    "owner" : "realm",
    "publishedAt" : "2022-09-21T06:09:29+09:00",
    "repository" : "realm-swift",
    "title" : "v10.30.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.30.0",
    "version" : "v10.30.0"
  },
  {
    "body" : "The prebuilt binary for Carthage is now build with Xcode 14.0.1.\r\n\r\n### Enhancements\r\n\r\n* Cut the runtime of aggregate operations on large dictionaries in half ([Core #5864](https://github.com/realm/realm-core/pull/5864)).\r\n* Improve performance of aggregate operations on collections of objects by 2x to 10x ([Core #5864](https://github.com/realm/realm-core/pull/5864)). Greatly improve the performance of sorting or distincting a Dictionary's keys or values. The most expensive operation is now performed O(log N) rather than O(N log N) times, and large Dictionaries can see upwards of 99% reduction in time to sort. ([Core #5166](https://github.com/realm/realm-core/pulls/5166))\r\n* Add support for changing the deployment location for Atlas Apps. Previously this was assumed to be immutable ([Core #5648](https://github.com/realm/realm-core/issues/5648)).\r\n* The sync client will now yield the write lock to other threads which are waiting to perform a write transaction even if it still has remaining work to do, rather than always applying all changesets received from the server even when other threads are trying to write. ([Core #5844](https://github.com/realm/realm-core/pull/5844)).\r\n* The sync client no longer writes an unused temporary copy of the changesets received from the server to the Realm file ([Core #5844](https://github.com/realm/realm-core/pull/5844)).\r\n\r\n### Fixed\r\n\r\n* Setting a `List` property with `Results` no longer throws an unrecognized selector exception (since 10.8.0-beta.2)\r\n* `RLMProgressNotificationToken` and `ProgressNotificationToken` now hold a strong reference to the sync session, keeping it alive until the token is deallocated or invalidated, as the other notification tokens do. ([#7831](https://github.com/realm/realm-swift/issues/7831), since v2.3.0).\r\n* Results permitted some nonsensical aggregate operations on column types which do not make sense to aggregate, giving garbage results rather than reporting an error ([Core #5876](https://github.com/realm/realm-core/pull/5876), since v5.0.0).\r\n* Upserting a document in a Mongo collection would crash if the document's id type was anything other than ObjectId (since v10.0.0).\r\n* Fix a use-after-free when a sync session is closed and the app is destroyed at the same time ([Core #5752](https://github.com/realm/realm-core/issues/5752), since v10.19.0).\r\n\r\n### Deprecations\r\n\r\n* `RLMUpdateResult.objectId` has been deprecated in favor of `RLMUpdateResult.documentId` to support reporting document ids which are not object ids.\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 14.0.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 13.1-14.1.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 12.7.0 to 12.9.0\r\n",
    "createdAt" : "2022-10-06T05:09:52+09:00",
    "fetchedFromAPIAt" : "2022-10-06T10:03:42+09:00",
    "id" : "RE_kwDOAD24W84EtvCs",
    "owner" : "realm",
    "publishedAt" : "2022-10-06T05:14:13+09:00",
    "repository" : "realm-swift",
    "title" : "v10.31.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.31.0",
    "version" : "v10.31.0"
  },
  {
    "body" : "### Enhancements\n\n* Add `.recoverUnsyncedChanges` (`RLMClientResetModeRecoverUnsyncedChanges`) and\n`.recoverOrDiscardUnsyncedChanges` (`RLMClientResetModeRecoverOrDiscardUnsyncedChanges`) behaviors to `ClientResetMode` (`RLMClientResetMode`).\n  - The newly added recover modes function by downloading a realm which reflects the latest\n    state of the server after a client reset. A recovery process is run locally in an\n    attempt to integrate the server state with any local changes from before the\n    client reset occurred.\n    The changes are integrated with the following rules:\n    1. Objects created locally that were not synced before client reset, will be integrated.\n    2. If an object has been deleted on the server, but was modified on the client, the delete takes precedence and the update is discarded.\n    3. If an object was deleted on the client, but not the server, then the client delete instruction is applied.\n    4. In the case of conflicting updates to the same field, the client update is applied.\n  - The client reset process will fallback to `ClientResetMode.discardUnsyncedChanges` if the recovery process fails in `.recoverOrDiscardUnsyncedChanges`.\n  - The client reset process will fallback to `ClientResetMode.manual` if the recovery process fails in `.recoverUnsyncedChanges`.\n  - The two new swift recovery modes support client reset callbacks: `.recoverUnsyncedChanges(beforeReset: ((Realm) -> Void)? = nil, afterReset: ((Realm, Realm) -> Void)? = nil)`.\n  - The two new Obj-C recovery modes support client reset callbacks in `notifyBeforeReset`\n    and `notifyAfterReset`for both `[RLMUser configurationWithPartitionValue]` and `[RLMUser flexibleSyncConfigurationWithClientResetMode]`\n    For more detail on client reset callbacks, see `ClientResetMode`, `RLMClientResetBeforeBlock`,\n    `RLMClientResetAfterBlock`, and the 10.25.0 changelog entry.\n* Add two new additional interfaces to define a manual client reset handler:\n  - Add a manual callback handler to `ClientResetMode.manual` -> `ClientResetMode.manual(ErrorReportingBlock? = nil)`.\n  - Add the `RLMSyncConfiguration.manualClientResetHandler` property (type `RLMSyncErrorReportingBlock`).\n  - These error reporting blocks are invoked in the event of a `RLMSyncErrorClientResetError`.\n  - See `ErrorReportingBlock` (`RLMSyncErrorReportingBlock`), and `ClientResetInfo` for more detail.\n  - Previously, manual client resets were handled only through the `SyncManager.ErrorHandler`. You have the\n    option, but not the requirement, to define manual reset handler in these interfaces.\n    Otherwise, the `SyncManager.ErrorHandler` is still invoked during the manual client reset process.\n  - These new interfaces are only invoked during a `RLMSyncErrorClientResetError`. All other sync errors\n    are still handled in the `SyncManager.ErrorHandler`.\n  - See 'Breaking Changes' for information how these interfaces interact with an already existing\n    `SyncManager.ErrorHandler`.\n\n### Breaking Changes\n\n* The default `clientResetMode` (`RLMClientResetMode`) is switched from `.manual` (`RLMClientResetModeManual`)\n  to `.recoverUnsyncedChanges` (`RLMClientResetModeRecoverUnsyncedChanges`).\n  - If you are currently using `.manual` and continue to do so, the only change\n    you must explicitly make is designating manual mode in\n    your `Realm.Configuration.SyncConfiguration`s, since they will now default to `.recoverUnsyncedChanges`.\n  - You may choose to define your manual client reset handler in the newly\n    introduced `manual(ErrorReportingBlock? = nil)`\n    or `RLMSyncConfiguration.manualClientResetHandler`, but this is not required.\n    The `SyncManager.errorHandler` will still be invoked during a client reset if\n    no callback is passed into these new interfaces.\n\n### Deprecations\n\n* `ClientResetMode.discardLocal` is deprecated in favor of `ClientResetMode.discardUnsyncedChanges`.\n  The reasoning is that the name better reflects the effect of this reset mode. There is no actual\n  difference in behavior.\n\n### Compatibility\n\n* Realm Studio: 11.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 14.0.1.\n* CocoaPods: 1.10 or later.\n* Xcode: 13.1-14.1.",
    "createdAt" : "2022-10-11T02:35:32+09:00",
    "fetchedFromAPIAt" : "2022-10-11T09:59:43+09:00",
    "id" : "RE_kwDOAD24W84EvGex",
    "owner" : "realm",
    "publishedAt" : "2022-10-11T02:45:18+09:00",
    "repository" : "realm-swift",
    "title" : "v10.32.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.32.0",
    "version" : "v10.32.0"
  },
  {
    "body" : "Switch to building the Carthage release with Xcode 14.3.\r\n\r\n### Enhancements\r\n\r\n* Add Xcode 14.3 binaries to the release package. Note that CocoaPods 1.12.0 does not support Xcode 14.3.\r\n* Add support for sharing encrypted Realms between multiple processes. ([Core #1845](https://github.com/realm/realm-core/issues/1845))\r\n\r\n### Fixed\r\n\r\n* Fix a memory leak reported by Instruments on `URL.path` in `Realm.Configuration.fileURL` when using a string partition key in Partition Based Sync ([#8195](https://github.com/realm/realm-swift/pull/8195)), since v10.0.0).\r\n* Fix a data race in version management. If one thread committed a write transaction which increased the number of live versions above the previous highest seen during the current session at the same time as another thread began a read, the reading thread could read from a no-longer-valid memory mapping. This could potentially result in strange crashes when opening, refreshing, freezing or thawing a Realm ([Core #6411](https://github.com/realm/realm-core/pull/6411), since v10.35.0).\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 13.0.2 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 14.3.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 13.4-14.3.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 13.8.0 to 13.9.0.",
    "createdAt" : "2023-04-01T12:48:08+09:00",
    "fetchedFromAPIAt" : "2023-04-02T09:44:15+09:00",
    "id" : "RE_kwDOAD24W84F0wRd",
    "owner" : "realm",
    "publishedAt" : "2023-04-01T12:51:51+09:00",
    "repository" : "realm-swift",
    "title" : "v10.38.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.38.0",
    "version" : "v10.38.0"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Flexible sync subscription state will change to `SyncSubscriptionState.pending` (`RLMSyncSubscriptionStatePending`) while waiting for the server to have sent all pending history after a bootstrap and before marking a subscription as Complete. ([#5795](https://github.com/realm/realm-core/pull/5795))\r\n* Add custom column names API, which allows to set a different column name in the realm from the one used in your object declaration.\r\n  ```swift\r\n  class Person: Object {\r\n      @Persisted var firstName: String\r\n      @Persisted var birthDate: Date\r\n      @Persisted var age: Int\r\n\r\n      override class public func propertiesMapping() -> [String: String] {\r\n          [\"firstName\": \"first_name\",\r\n           \"birthDate\": \"birth_date\"]\r\n      }\r\n  }\r\n  ```\r\n  This is very helpful in cases where you want to name a property differently from your `Device Sync` JSON schema. This API is only available for old and modern object declaration syntax on the `RealmSwift` SDK.\r\n* Flexible sync bootstraps now apply 1MB of changesets per write transaction rather than applying all of them in a single write transaction. ([Core PR #5999](https://github.com/realm/realm-core/pull/5999)).\r\n\r\n### Fixed\r\n\r\n* Fix a race condition which could result in \"operation cancelled\" errors being delivered to async open callbacks rather than the actual sync error which caused things to fail ([Core PR #5968](https://github.com/realm/realm-core/pull/5968), since the introduction of async open).\r\n* Fix database corruption issues which could happen if an application was terminated at a certain point in the process of comitting a write transaciton. ([Core PR #5993](https://github.com/realm/realm-core/pull/5993), since v10.21.1)\r\n* `@AsyncOpen` and `@AutoOpen` would begin and then cancel a second async open operation ([PR #8038](https://github.com/realm/realm-swift/pull/8038), since v10.12.0).\r\n* Changing the search text when using the searchable SwiftUI extension would trigger multiple updates on the View for each change ([PR #8038](https://github.com/realm/realm-swift/pull/8038), since v10.19.0).\r\n* Changing the filter or search properties of an `@ObservedResults` or `@ObservedSectionedResults` would trigger up to three updates on the View ([PR #8038](https://github.com/realm/realm-swift/pull/8038), since v10.6.0).\r\n* Fetching a user's profile while the user logs out would result in an assertion failure. ([Core PR #6017](https://github.com/realm/realm-core/issues/5571), since v10.8.0)\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 14.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 13.1-14.1.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 12.11.0 to 12.13.0\r\n",
    "createdAt" : "2022-12-02T08:12:39+09:00",
    "fetchedFromAPIAt" : "2022-12-02T09:43:30+09:00",
    "id" : "RE_kwDOAD24W84FDV1S",
    "owner" : "realm",
    "publishedAt" : "2022-12-02T08:17:30+09:00",
    "repository" : "realm-swift",
    "title" : "v10.33.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.33.0",
    "version" : "v10.33.0"
  },
  {
    "body" : "Swift 5.5 is no longer supported. Swift 5.6 (Xcode 13.3) is now the minimum supported version.\r\n\r\nThe prebuilt binary for Carthage is now build with Xcode 14.2.\r\n\r\n### Enhancements\r\n\r\n* Improve performance of creating Projection objects and of change notifications on projections ([PR #8050](https://github.com/realm/realm-swift/pull/8050)).\r\n* Allow initialising any sync configuration with `cancelAsyncOpenOnNonFatalErrors`.\r\n* Improve performance of Combine value publishers which do not use the object/collection changesets a little.\r\n* All public types have been audited for sendability and are now marked as Sendable when applicable. A few types which were incidentally not thread-safe but make sense to use from multiple threads are now thread-safe.\r\n* Add support for building Realm with strict concurrency checking enabled.\r\n\r\n### Fixed\r\n\r\n* Fix bad memory access exception that can occur when watching change streams. [PR #8039](https://github.com/realm/realm-swift/pull/8039).\r\n* Object change notifications on projections only included the first projected property for each source property ([PR #8050](https://github.com/realm/realm-swift/pull/8050), since v10.21.0).\r\n* `@AutoOpen` failed to open flexible sync Realms while offline ([#7986](https://github.com/realm/realm-swift/issues/7986), since v10.27.0).\r\n* Fix \"Publishing changes from within view updates is not allowed\" warnings when using `@ObservedResults` or `@ObservedSectionedResults` ([#7908](https://github.com/realm/realm-swift/issues/7908)).\r\n* Fix \"Publishing changes from within view updates is not allowed\" warnings when using `@AutoOpen` or `@AsyncOpen`. ([#7908](https://github.com/realm/realm-swift/issues/7908)).\r\n* Defer `Realm.asyncOpen` execution on `@AsyncOpen` and `@AutoOpen` property wrappers until all the environment values are set. This will guarantee the configuration and partition value are set set before opening the realm. ([#7931](https://github.com/realm/realm-swift/issues/7931), since v10.12.0).\r\n* `@ObservedResults.remove()` could delete the wrong object if a write on a background thread which changed the index of the object being removed occurred at a very specific time (since v10.6.0).\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 - 12.0.0. 13.0.0 is currently incompatible.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 14.2.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 13.3-14.2.",
    "createdAt" : "2023-01-14T09:17:52+09:00",
    "fetchedFromAPIAt" : "2023-01-14T09:42:11+09:00",
    "id" : "RE_kwDOAD24W84FTRvp",
    "owner" : "realm",
    "publishedAt" : "2023-01-14T09:21:07+09:00",
    "repository" : "realm-swift",
    "title" : "v10.34.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.34.0",
    "version" : "v10.34.0"
  },
  {
    "body" : "### Fixed\n\n* Add some missing `@preconcurrency` annotations which lead to build failures\n  with Xcode 14.0 when importing via SPM or CocoaPods\n  ([#8104](https://github.com/realm/realm-swift/issues/8104), since v10.34.0).\n\n### Compatibility\n\n* Realm Studio: 11.0.0 - 12.0.0.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 14.2.\n* CocoaPods: 1.10 or later.\n* Xcode: 13.3-14.2.",
    "createdAt" : "2023-01-21T07:06:28+09:00",
    "fetchedFromAPIAt" : "2023-01-21T09:44:14+09:00",
    "id" : "RE_kwDOAD24W84FWe-H",
    "owner" : "realm",
    "publishedAt" : "2023-01-21T07:10:12+09:00",
    "repository" : "realm-swift",
    "title" : "v10.34.1",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.34.1",
    "version" : "v10.34.1"
  },
  {
    "body" : "This version bumps the Realm file format version to 23. Realm files written by this version cannot be read by older versions of Realm.\r\n\r\n### Enhancements\r\n\r\n* The Realm file is now automatically shrunk if the file size is larger than needed to store all of the data. ([Core PR #5755](https://github.com/realm/realm-core/pull/5755))\r\n* Pinning old versions (either with frozen Realms or with Realms on background threads that simply don't get refreshed) now only prevents overwriting the data needed by that version, rather than the data needed by that version and all later versions. In addition, frozen Realms no longer pin the transaction logs used to drive change notifications. This mostly eliminates the file size growth caused by pinning versions. ([Core PR #5440](https://github.com/realm/realm-core/pull/5440))\r\n* Rework how Dictionaries/Maps are stored in the Realm file. The new design uses less space and is typically significantly faster. This changes the iteration order of Maps, so any code relying on that may be broken. We continue to make no guarantees about iteration order on Maps ([Core #5764](https://github.com/realm/realm-core/issues/5764)).\r\n* Improve performance of freezing Realms ([Core PR #6211](https://github.com/realm/realm-core/pull/6211)).\r\n\r\n### Fixed\r\n\r\n* Fix a crash when using client reset with recovery and flexible sync with a single subscription ([Core #6070](https://github.com/realm/realm-core/issues/6070), since v10.28.2)\r\n* Encrypted Realm files could not be opened on devices with a larger page size than the one which originally wrote the file. ([#8030](https://github.com/realm/realm-swift/issues/8030), since v10.32.1)\r\n* Creating multiple flexible sync subscriptions at once could hit an assertion failure if the server reported an error for any of them other than the last one ([Core #6038](https://github.com/realm/realm-core/issues/6038), since v10.21.1).\r\n* `Set<AnyRealmValue>` and `List<AnyRealmValue>` considered a string and binary data containing that string encoded as UTF-8 to be equivalent. This could result in a List entry not changing type on assignment and for the client be inconsistent with the server if a string and some binary data with equivalent content was inserted from Atlas. ([Core #4860](https://github.com/realm/realm-core/issues/4860) and [Core #6201](https://github.com/realm/realm-core/issues/6201), since v10.8.0)\r\n* Querying for NaN on Decimal128 properties did not match any objects ([Core #6182](https://github.com/realm/realm-core/issues/6182), since v10.8.0).\r\n* When client reset with recovery is used and the recovery did not need to make any changes to the local Realm, the sync client could incorrectly think the recovery failed and report the error \"A fatal error occured during client reset: 'A previous 'Recovery' mode reset from <timestamp> did not succeed, giving up on 'Recovery' mode to prevent a cycle'\". ([Core #6195](https://github.com/realm/realm-core/issues/6195), since v10.32.0)\r\n* Writing to newly in-view objects while a flexible sync bootstrap was in progress would not synchronize those changes to the server ([Core #5804](https://github.com/realm/realm-core/issues/5804), since v10.21.1).\r\n* If a client reset with recovery or discard local was interrupted while the \"fresh\" realm was being downloaded, the sync client could crash with a MultpleSyncAgents exception ([Core #6217](https://github.com/realm/realm-core/issues/6217), since v10.25.0).\r\n* Sharing Realm files between a Catalyst app and Realm Studio did not properly synchronize access to the Realm file ([Core #6258](https://github.com/realm/realm-core/pull/6258), since v10.0.0).\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 13.0.2 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 14.2.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 13.3-14.2.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 12.13.0 to 13.4.0\r\n",
    "createdAt" : "2023-02-08T05:25:52+09:00",
    "fetchedFromAPIAt" : "2023-02-11T23:53:40+09:00",
    "id" : "RE_kwDOAD24W84FdpQn",
    "owner" : "realm",
    "publishedAt" : "2023-02-08T05:29:10+09:00",
    "repository" : "realm-swift",
    "title" : "v10.35.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.35.0",
    "version" : "v10.35.0"
  },
  {
    "body" : "### Fixed\r\n\r\n* Client reset with recovery would crash if a client reset occurred the very first time the Realm was opened with async open. The client reset callbacks are now not called if the Realm had never been opened before ([PR #8125](https://github.com/realm/realm-swift/pull/8125), since 10.32.0).\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 13.0.2 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 14.2.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 13.3-14.2.",
    "createdAt" : "2023-02-11T08:26:22+09:00",
    "fetchedFromAPIAt" : "2023-02-11T23:53:40+09:00",
    "id" : "RE_kwDOAD24W84FfShc",
    "owner" : "realm",
    "publishedAt" : "2023-02-11T08:29:49+09:00",
    "repository" : "realm-swift",
    "title" : "v10.35.1",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.35.1",
    "version" : "v10.35.1"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Add support for multiple overlapping or nested event scopes. `Events.beginScope()` now returns a `Scope` object which is used to commit or cancel that scope, and if more than one scope is active at a time events are reported to all active scopes.\r\n\r\n### Fixed\r\n\r\n* Fix moving `List` items to a higher index in SwiftUI results in wrong destination index ([#7956](https://github.com/realm/realm-swift/issues/7956), since v10.6.0).\r\n* Using the `searchable` view modifier with `@ObservedResults` in iOS 16 would cause the collection observation subscription to cancel. ([#8096](https://github.com/realm/realm-swift/issues/8096), since 10.21.0)\r\n* Client reset with recovery would sometimes crash if the recovery resurrected a dangling link ([Core #6292](https://github.com/realm/realm-core/issues/6292), since v10.32.0).\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 13.0.2 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 14.2.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 13.3-14.2.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 13.4.0 to 13.4.1",
    "createdAt" : "2023-02-16T08:55:02+09:00",
    "fetchedFromAPIAt" : "2023-02-16T09:49:08+09:00",
    "id" : "RE_kwDOAD24W84FhWwi",
    "owner" : "realm",
    "publishedAt" : "2023-02-16T08:58:32+09:00",
    "repository" : "realm-swift",
    "title" : "v10.36.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.36.0",
    "version" : "v10.36.0"
  },
  {
    "body" : "### Enhancements\r\n\r\n* `MongoCollection.watch().subscribe(on:)` now supports any swift Scheduler rather than only dispatch queues ([PR #8131](https://github.com/realm/realm-swift/pull/8130)).\r\n* Add an async sequence wrapper for `MongoCollection.watch()`, allowing you to do `for try await change in collection.changeEvents { ... }` ([PR #8131](https://github.com/realm/realm-swift/pull/8130)).\r\n* The internals of error handling and reporting have been significantly reworked. The visible effects of this are that some errors which previously had unhelpful error messages now include more detail about what went wrong, and App errors now expose a much more complete set of error codes ([PR #8002](https://github.com/realm/realm-swift/pull/8002)).\r\n* Expose compensating write error information. When the server rejects a modification made by the client (such as if the user does not have the required permissions), a `SyncError` is delivered to the sync error handler with the code `.writeRejected` and a non-nil `compensatingWriteInfo` field which contains information about what was rejected and why. This information is intended primarily for debugging and logging purposes and may not have a stable format. ([PR #8002](https://github.com/realm/realm-swift/pull/8002))\r\n* Async `Realm.init()` now handles Task cancellation and will cancel the async open if the Task is cancelled ([PR #8148](https://github.com/realm/realm-swift/pull/8148)).\r\n* Cancelling async opens now has more consistent behavior. The previously intended and documented behavior was that cancelling an async open would result in the callback associated with the specific task that was cancelled never being called, and all other pending callbacks would be invoked with an ECANCELED error. This never actually worked correctly, and the callback which was not supposed to be invoked at all sometimes would be. We now unconditionally invoke all of the exactly once, passing ECANCELED to all of them ([PR #8148](https://github.com/realm/realm-swift/pull/8148)).\r\n\r\n### Fixed\r\n\r\n* `UserPublisher` incorrectly bounced all notifications to the main thread instead of setting up the Combine publisher to correctly receive on the main thread. ([#8132](https://github.com/realm/realm-swift/issues/8132), since 10.21.0)\r\n* Fix warnings when building with Xcode 14.3 beta 2.\r\n* Errors in async open resulting from invalid queries in `initialSubscriptions` would result in the callback being invoked with both a non-nil Realm and a non-nil Error even though the Realm was in an invalid state. Now only the error is passed to the callback ([PR #8148](https://github.com/realm/realm-swift/pull/8148), since v10.28.0).\r\n* Converting a local realm to a synced realm would crash if an embedded object was null ([Core #6294](https://github.com/realm/realm-core/issues/6294), since v10.22.0).\r\n* Subqueries on indexed properties performed extremely poorly. ([Core #6327](https://github.com/realm/realm-core/issues/6327), since v5.0.0)\r\n* Fix a crash when a SSL read successfully read a non-zero number of bytes and also reported an error. ([Core #5435](https://github.com/realm/realm-core/issues/5435), since 10.0.0)\r\n* The sync client could get stuck in an infinite loop if the server sent an invalid changeset which caused a transform error. This now results in a client reset instead. ([Core #6051](https://github.com/realm/realm-core/issues/6051), since v10.0.0)\r\n* Strings in queries which contained any characters which required multiple bytes when encoded as utf-8 were incorrectly encoded as binary data when serializing the query to send it to the server for a flexible sync subscription, resulting the server rejecting the query ([Core #6350](https://github.com/realm/realm-core/issues/6350), since 10.22.0).\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 13.0.2 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 14.2.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 13.3-14.2.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 13.4.1 to 13.6.0\r\n",
    "createdAt" : "2023-03-10T11:19:03+09:00",
    "fetchedFromAPIAt" : "2023-03-12T09:46:52+09:00",
    "id" : "RE_kwDOAD24W84Fq_uP",
    "owner" : "realm",
    "publishedAt" : "2023-03-10T12:23:12+09:00",
    "repository" : "realm-swift",
    "title" : "v10.37.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.37.0",
    "version" : "v10.37.0"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Performance improvement for the following queries ([Core #6376](https://github.com/realm/realm-core/issues/6376)):\r\n    * Significant (~75%) improvement when counting (`Results.count`) the number of exact matches (with no other query conditions) on a string/int/UUID/ObjectID property that has an index. This improvement will be especially noticeable if there are a large number of results returned (duplicate values).\r\n    * Significant (~99%) improvement when querying for an exact match on a Date property that has an index.\r\n    * Significant (~99%) improvement when querying for a case insensitive match on an AnyRealmValue property that has an index.\r\n    * Moderate (~25%) improvement when querying for an exact match on a Bool property that has an index.\r\n    * Small (~5%) improvement when querying for a case insensitive match on an AnyRealmValue property that does not have an index.\r\n\r\n### Fixed\r\n\r\n* Add missing `@Sendable` annotations to several sync and app services related callbacks ([PR #8169](https://github.com/realm/realm-swift/pull/8169), since v10.34.0).\r\n* Fix some bugs in handling task cancellation for async Realm init. Some very specific timing windows could cause crashes, and the download would not be cancelled if the Realm was already open ([PR #8178](https://github.com/realm/realm-swift/pull/8178), since v10.37.0).\r\n* Fix a crash when querying an AnyRealmValue property with a string operator (contains/like/beginswith/endswith) or with case insensitivity. ([Core #6376](https://github.com/realm/realm-core/issues/6376), since v10.8.0)\r\n* Querying for case-sensitive equality of a string on an indexed AnyRealmValue property was returning case insensitive matches. For example querying for `myIndexedAny == \"Foo\"` would incorrectly match on values of \"foo\" or \"FOO\" etc. ([Core #6376](https://github.com/realm/realm-core/issues/6376), since v10.8.0)\r\n* Adding an index to an AnyRealmValue property when objects of that type already existed would crash with an assertion. ([Core #6376](https://github.com/realm/realm-core/issues/6376), since v10.8.0).\r\n* Fix a bug that may have resulted in arrays being in different orders on different devices. Some cases of “Invalid prior_size” may be fixed too. ([Core #6191](https://github.com/realm/realm-core/issues/6191), since v10.25.0).\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 13.0.2 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 14.2.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 13.3-14.2.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 13.6.0 to 13.8.0\r\n",
    "createdAt" : "2023-03-28T09:41:01+09:00",
    "fetchedFromAPIAt" : "2023-03-29T09:47:12+09:00",
    "id" : "RE_kwDOAD24W84FyZt6",
    "owner" : "realm",
    "publishedAt" : "2023-03-28T09:44:54+09:00",
    "repository" : "realm-swift",
    "title" : "v10.37.1",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.37.1",
    "version" : "v10.37.1"
  },
  {
    "body" : "### Fixed\r\n\r\n* Copying a `RLMRealmConfiguration` failed to copy several fields. This resulted in migrations being passed the incorrect object type in Swift when using the default configuration (since v10.34.0) or async open (since v10.37.0). This also broke using the Events API in those two scenarios (since v10.26.0 for default configuration and v10.37.0 for async open). ([#8190](https://github.com/realm/realm-swift/issues/8190))\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 13.0.2 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 14.2.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 13.3-14.2.",
    "createdAt" : "2023-03-30T09:14:41+09:00",
    "fetchedFromAPIAt" : "2023-03-30T09:43:08+09:00",
    "id" : "RE_kwDOAD24W84FzlMv",
    "owner" : "realm",
    "publishedAt" : "2023-03-30T09:18:16+09:00",
    "repository" : "realm-swift",
    "title" : "v10.37.2",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.37.2",
    "version" : "v10.37.2"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Add support for building for visionOS and add Xcode 15 binaries to the release package. visionOS currently requires installing Realm via either Swift Package Manager or by using a XCFramework as CocoaPods and Carthage do not yet support it.\r\n* Zips compatible with SPM's `.binaryTarget()` are now published as part of the releases on Github.\r\n* Prebuilt XCFrameworks are now built with LTO enabled. This has insignificant performance benefits, but cuts the size of the library by ~15%.\r\n\r\n### Fixed\r\n\r\n* Fix nested properties observation on a `Projections` not notifying when there is a property change. ([#8276](https://github.com/realm/realm-swift/issues/8276), since v10.34.0).\r\n* Fix undefined symbol error for `UIKit` when linking Realm to a framework using SPM. ([#8308](https://github.com/realm/realm-swift/issues/8308), since v10.41.0)\r\n* If the app crashed at exactly the wrong time while opening a freshly compacted Realm the file could be left in an invalid state ([Core #6807](https://github.com/realm/realm-core/pull/6807), since v10.33.0).\r\n* Sync progress for DOWNLOAD messages was sometimes stored incorrectly, resulting in an extra round trip to the server. ([Core #6827](https://github.com/realm/realm-core/issues/6827), since v10.31.0)\r\n\r\n### Breaking Changes\r\n\r\n* Legacy non-xcframework Carthage installations are no longer supported. Please ensure you are using `--use-xcframeworks` if installing via Carthage.\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 14.0.1 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 14.3.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 14.1-15 beta 5.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 13.17.0 to 13.17.1\r\n* Release packages were being uploaded to several static.realm.io URLs which are no longer linked to anywhere. These are no longer being updated, and release packages are now only being uploaded to Github.",
    "createdAt" : "2023-07-31T06:44:33+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOAD24W84G0c_0",
    "owner" : "realm",
    "publishedAt" : "2023-07-31T07:30:19+09:00",
    "repository" : "realm-swift",
    "title" : "v10.42.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.42.0",
    "version" : "v10.42.0"
  },
  {
    "body" : "### Enhancements\n\n* Improve performance of equality queries on a non-indexed AnyRealmValue\n  property by about 30%. ([Core #6506](https://github.com/realm/realm-core/issues/6506))\n\n### Fixed\n\n* SSL handshake errors were treated as fatal errors rather than errors which\n  should be retried. ([Core #6434](https://github.com/realm/realm-core/issues/6434), since v10.35.0)\n\n### Compatibility\n\n* Realm Studio: 14.0.1 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 14.3.\n* CocoaPods: 1.10 or later.\n* Xcode: 13.4-14.3.\n\n### Internal\n\n* Upgraded realm-core from 13.9.0 to 13.9.3.",
    "createdAt" : "2023-04-26T14:27:23+09:00",
    "fetchedFromAPIAt" : "2023-04-27T09:43:33+09:00",
    "id" : "RE_kwDOAD24W84GA517",
    "owner" : "realm",
    "publishedAt" : "2023-04-26T14:30:58+09:00",
    "repository" : "realm-swift",
    "title" : "v10.38.2",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.38.2",
    "version" : "v10.38.2"
  },
  {
    "body" : "### Fixed\n\n* The error handler set on EventsConfiguration was not actually used (since v10.26.0).\n\n### Compatibility\n\n* Realm Studio: 13.0.2 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 14.3.\n* CocoaPods: 1.10 or later.\n* Xcode: 13.4-14.3.",
    "createdAt" : "2023-04-26T05:30:06+09:00",
    "fetchedFromAPIAt" : "2023-04-26T09:41:25+09:00",
    "id" : "RE_kwDOAD24W84GAxaB",
    "owner" : "realm",
    "publishedAt" : "2023-04-26T05:33:48+09:00",
    "repository" : "realm-swift",
    "title" : "v10.38.1",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.38.1",
    "version" : "v10.38.1"
  },
  {
    "body" : "### Enhancements\n\n* Improve performance of cancelling a write transactions after making changes. If no KVO observers are used this is now constant time rather than taking time proportional to the number of changes to be rolled back. Cancelling a write transaction with KVO observers is 10-20% faster. ([Core PR #6513](https://github.com/realm/realm-core/pull/6513)).\n\n### Fixed\n\n* Performing a large number of queries without ever performing a write resulted in steadily increasing memory usage, some of which was never fully freed due to an unbounded cache ([#7978](https://github.com/realm/realm-swift/issues/7978), since v10.27.0).\n\n### Compatibility\n\n* Realm Studio: 14.0.1 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 14.3.\n* CocoaPods: 1.10 or later.\n* Xcode: 13.4-14.3.\n\n### Internal\n\n* Upgraded realm-core from 13.9.3 to 13.9.4",
    "createdAt" : "2023-04-29T03:06:36+09:00",
    "fetchedFromAPIAt" : "2023-04-30T23:55:23+09:00",
    "id" : "RE_kwDOAD24W84GCgVP",
    "owner" : "realm",
    "publishedAt" : "2023-04-29T03:10:23+09:00",
    "repository" : "realm-swift",
    "title" : "v10.38.3",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.38.3",
    "version" : "v10.38.3"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Add support for actor-isolated Realms, opened with `try await Realm(actor: actor)`.\r\n\r\n  Rather than being confined to the current thread or a dispatch queue, actor-isolated Realms are isolated to an actor. This means that they can be used from any thread as long as it's within a function isolated to that actor, and they remain valid over suspension points where a task may hop between threads. Actor-isolated Realms can be used with either global or local actors:\r\n\r\n  ```swift\r\n  @MainActor function mainThreadFunction() async throws {\r\n      // These are identical: the async init continues to produce a\r\n      // MainActor-confined Realm if no actor is supplied\r\n      let realm1 = try await Realm()\r\n      let realm2 = try await Realm(MainActor.shared)\r\n  }\r\n\r\n  // A simple example of a custom global actor\r\n  @globalActor actor BackgroundActor: GlobalActor {\r\n      static var shared = BackgroundActor()\r\n  }\r\n\r\n  @BackgroundActor backgroundThreadFunction() async throws {\r\n      // Explicitly specifying the actor is required for everything but MainActor\r\n      let realm = try await Realm(actor: BackgroundActor.shared)\r\n      try await realm.write {\r\n          _ = realm.create(MyObject.self)\r\n      }\r\n      // Thread-confined Realms would sometimes throw an exception here, as we\r\n      // may end up on a different thread after an `await`\r\n      print(\"\\(realm.objects(MyObject.self).count)\")\r\n  }\r\n\r\n  actor MyActor {\r\n      // An implicitly-unwrapped optional is used here to let us pass `self` to\r\n      // `Realm(actor:)` within `init`\r\n      var realm: Realm!\r\n      init() async throws {\r\n          realm = try await Realm(actor: self)\r\n      }\r\n\r\n      var count: Int {\r\n          realm.objects(MyObject.self).count\r\n      }\r\n\r\n      func create() async throws {\r\n          try await realm.asyncWrite {\r\n              realm.create(MyObject.self)\r\n          }\r\n      }\r\n  }\r\n\r\n  // This function isn't isolated to the actor, so each operation has to be async\r\n  func createObjects() async throws {\r\n      let actor = try await MyActor()\r\n      for _ in 0..<5 {\r\n        await actor.create()\r\n      }\r\n      print(\"\\(await actor.count)\")\r\n  }\r\n\r\n  // In an isolated function, an actor-isolated Realm can be used synchronously\r\n  func createObjects(in actor: isolated MyActor) async throws {\r\n      await actor.realm.write {\r\n          actor.realm.create(MyObject.self)\r\n      }\r\n      print(\"\\(actor.realm.objects(MyObject.self).count)\")\r\n  }\r\n  ```\r\n\r\n  Actor-isolated Realms come with a more convenient syntax for asynchronous writes. `try await realm.write { ... }` will suspend the current task, acquire the write lock without blocking the current thread, and then invoke the block. The actual data is then written to disk on a background thread, and the task is resumed once that completes. As this does not block the calling thread while waiting to write and does not perform i/o on the calling thread, this will often be safe to use from `@MainActor` functions without blocking the UI. Sufficiently large writes may still benefit from being done on a background thread.\r\n\r\n  Asynchronous writes are only supported for actor-isolated Realms or in `@MainActor` functions.\r\n\r\n  Actor-isolated Realms require Swift 5.8 (Xcode 14.3). Enabling both strict concurrency checking (`SWIFT_STRICT_CONCURRENCY=complete` in Xcode) and runtime actor data race detection (`OTHER_SWIFT_FLAGS=-Xfrontend -enable-actor-data-race-checks`) is strongly recommended when using actor-isolated Realms.\r\n* Add support for automatic partition-based to flexible sync migration. Connecting to a server-side app configured to use flexible sync with a client-side partition-based sync configuration is now supported, and will automatically create the appropriate flexible sync subscriptions to subscribe to the requested partition. This allows changing the configuration on the server from partition-based to flexible without breaking existing clients. ([Core #6554](https://github.com/realm/realm-core/issues/6554))\r\n* Now you can use an array `[[\"_id\": 1], [\"breed\": 0]]` as sorting option for a MongoCollection. This new API fixes the issue where the resulting documents when using more than one sort parameter were not consistent between calls. ([#7188](https://github.com/realm/realm-swift/issues/7188), since v10.0.0).\r\n* Add support for adding a user created default logger, which allows implementing your own logging logic and the log threshold level. You can define your own logger creating an instance of `Logger` and define the log function which will be invoked whenever there is a log message.\r\n\r\n  ```swift\r\n  let logger = Logger(level: .all) { level, message in\r\n     print(\"Realm Log - \\(level): \\(message)\")\r\n  }\r\n  ```\r\n\r\n  Set this custom logger as Realm default logger using `Logger.shared`.\r\n   ```swift\r\n  Logger.shared = logger\r\n   ```\r\n* It is now possible to change the default log threshold level at any point of the application's lifetime.\r\n  ```swift\r\n  Logger.shared.logLevel = .debug\r\n  ```\r\n  This will override the log level set anytime before by a user created logger.\r\n* We have set `.info` as the default log threshold level for Realm. You will now see some log message in your console. To disable use `Logger.shared.level = .off`.\r\n\r\n### Fixed\r\n\r\n* Several schema initialization functions had incorrect `@MainActor` annotations, resulting in runtime warnings if the first time a Realm was opened was on a background thread ([#8222](https://github.com/realm/realm-swift/issues/8222), since v10.34.0).\r\n\r\n### Deprecations\r\n\r\n* `App.SyncManager.logLevel` and `App.SyncManager.logFunction` are deprecated in favour of setting a default logger.\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 14.0.1 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 14.3.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 13.4-14.3.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from v13.9.4 to v13.10.0.\r\n",
    "createdAt" : "2023-05-04T05:17:40+09:00",
    "fetchedFromAPIAt" : "2023-05-04T11:30:23+09:00",
    "id" : "RE_kwDOAD24W84GEQWx",
    "owner" : "realm",
    "publishedAt" : "2023-05-04T05:21:28+09:00",
    "repository" : "realm-swift",
    "title" : "v10.39.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.39.0",
    "version" : "v10.39.0"
  },
  {
    "body" : "### Enhancements\n\n* New notifiers can now be registered in write transactions until changes have\n  actually been made in the write transaction. This makes it so that new\n  notifications can be registered inside change notifications triggered by\n  beginning a write transaction (unless a previous callback performed writes).\n  ([#4818](https://github.com/realm/realm-swift/issues/4818)).\n* Reduce the memory footprint of an automatic (discard or recover) client reset\n  when there are large incoming changes from the server.\n  ([Core #6567](https://github.com/realm/realm-core/issues/6567)).\n\n### Compatibility\n\n* Realm Studio: 14.0.1 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 14.3.\n* CocoaPods: 1.10 or later.\n* Xcode: 13.4-14.3.\n\n### Internal\n\n* Upgraded realm-core from 13.10.0 to 13.10.1.",
    "createdAt" : "2023-05-06T02:39:48+09:00",
    "fetchedFromAPIAt" : "2023-05-06T09:38:50+09:00",
    "id" : "RE_kwDOAD24W84GFREl",
    "owner" : "realm",
    "publishedAt" : "2023-05-06T02:43:26+09:00",
    "repository" : "realm-swift",
    "title" : "v10.39.1",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.39.1",
    "version" : "v10.39.1"
  },
  {
    "body" : "Drop support for Xcode 13 and add Xcode 14.3.1. Xcode 14.1 is now the minimum supported version.\r\n\r\n### Enhancements\r\n\r\n* Adjust the error message for private `Object` subclasses and subclasses nested inside other types to explain how to make them work rather than state that it's impossible. ([#5662](https://github.com/realm/realm-cocoa/issues/5662)).\r\n* Improve performance of SectionedResults. With a single section it is now ~10% faster, and the runtime of sectioning no longer scales significantly with section count, giving >100% speedups when there are large numbers of sections ([Core #6606](https://github.com/realm/realm-core/pull/6606)).\r\n* Very slightly improve performance of runtime thread checking on the main thread. ([Core #6606](https://github.com/realm/realm-core/pull/6606))\r\n\r\n### Fixed\r\n\r\n* Allow support for implicit boolean queries on Swift's Type Safe Queries API ([#8212](https://github.com/realm/realm-swift/issues/8212)).\r\n* Fixed a fatal error (reported to the sync error handler) during client reset or automatic partition-based to flexible sync migration if the reset has been triggered during an async open and the schema being applied has added new classes. Due to this bug automatic flexibly sync migration has been disabled for older releases and this is now the minimum version required. ([#6601](https://github.com/realm/realm-core/issues/6601), since automatic client resets were introduced in v10.25.0)\r\n* Dictionaries sometimes failed to map unresolved links to nil. If the target of a link in a dictionary was deleted by another sync client, reading that field from the dictionary would sometimes give an invalid object rather than nil. In addition, queries on dictionaries would sometimes have incorrect results. ([Core #6644](https://github.com/realm/realm-core/pull/6644), since v10.8.0)\r\n* Older versions of Realm would sometimes fail to properly mark objects as being the target of an incoming link from another object. When this happened, deleting the target object would hit an assertion failure due to the inconsistent state. We now reconstruct a valid state rather than crashing. ([Core #6585](https://github.com/realm/realm-core/issues/6585), since v5.0.0)\r\n* Fix several UBSan failures which did not appear to result in functional bugs ([Core #6649](https://github.com/realm/realm-core/pull/6649)).\r\n* Using both synchronous and asynchronous transactions on the same thread or scheduler could hit the assertion failure \"!realm.is_in_transaction()\" if one of the callbacks for an asynchronous transaction happened to be scheduled during a synchronous transaction ([Core #6659](https://github.com/realm/realm-core/issues/6659), since v10.26.0)\r\n* The stored deployment location for Apps was not being updated correctly after receiving a redirect response from the server, resulting in every connection attempting to connect to the old URL and getting redirected rather than only the first connection after the deployment location changed. ([Core #6630](https://github.com/realm/realm-core/issues/6630), since v10.38.2)\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 14.0.1 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 14.3.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 14.1-14.3.1.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 13.10.1 to 13.13.0.\r\n",
    "createdAt" : "2023-05-27T07:06:15+09:00",
    "fetchedFromAPIAt" : "2023-05-27T09:44:00+09:00",
    "id" : "RE_kwDOAD24W84GOfTH",
    "owner" : "realm",
    "publishedAt" : "2023-05-27T07:08:33+09:00",
    "repository" : "realm-swift",
    "title" : "v10.40.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.40.0",
    "version" : "v10.40.0"
  },
  {
    "body" : "### Enhancements\n\n* Fix compilation with Xcode 15. Note that iOS 12 is the minimum supported\n  deployment target when using Xcode 15.\n* Switch to building the Carthage release with Xcode 14.3.1.\n\n### Compatibility\n\n* Realm Studio: 14.0.1 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 14.3.1.\n* CocoaPods: 1.10 or later.\n* Xcode: 14.1-15 beta 1.\n\n### Internal\n\n* Overhauled SDK metrics collection to better drive future development efforts.",
    "createdAt" : "2023-06-07T14:25:27+09:00",
    "fetchedFromAPIAt" : "2023-06-08T09:50:46+09:00",
    "id" : "RE_kwDOAD24W84GagNy",
    "owner" : "realm",
    "publishedAt" : "2023-06-07T14:27:39+09:00",
    "repository" : "realm-swift",
    "title" : "v10.40.1",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.40.1",
    "version" : "v10.40.1"
  },
  {
    "body" : "### Enhancements\r\n\r\n* `Actor.preconditionIsolated()` is now used for runtime actor checking when available (i.e. building with Xcode 15 and running on iOS 17) rather than the less reliable workaround.\r\n\r\n### Fixed\r\n\r\n* If downloading the fresh Realm file failed during a client reset on a flexible sync Realm, the sync client would crash the next time the Realm was opened. ([Core #6494](https://github.com/realm/realm-core/issues/6494), since v10.28.2)\r\n* If the order of properties in the local class definitions did not match the order in the server-side schema, the before-reset Realm argument passed to a client reset handler would have an invalid schema and likely crash if any data was read from it. ([Core 6693](https://github.com/realm/realm-core/issues/6693), since v10.40.0)\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 14.0.1 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 14.3.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 14.1-15 beta 1.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 13.13.0 to 13.16.0.\r\n* The prebuilt library used for CocoaPods installations is now built with Xcode 14. This should not have any observable effects other than the download being much smaller due to no longer including bitcode.",
    "createdAt" : "2023-06-10T08:46:34+09:00",
    "fetchedFromAPIAt" : "2023-06-11T09:53:24+09:00",
    "id" : "RE_kwDOAD24W84GcQhz",
    "owner" : "realm",
    "publishedAt" : "2023-06-10T08:48:49+09:00",
    "repository" : "realm-swift",
    "title" : "v10.40.2",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.40.2",
    "version" : "v10.40.2"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Add support for multiplexing sync connections. When enabled (the default), a single connection is used per sync user rather than one per synchronized Realm. This reduces resource consumption when multiple Realms are opened and will typically improve performance ([PR #8282](https://github.com/realm/realm-swift/pull/8282)).\r\n* Sync timeout options can now be set on `RLMAppConfiguration` along with the other app-wide configuration settings ([PR #8282](https://github.com/realm/realm-swift/pull/8282)).\r\n\r\n### Fixed\r\n\r\n* Import as `RLMRealm_Private.h` as a module would cause issues when using Realm as a subdependency. ([#8164](https://github.com/realm/realm-swift/issues/8164), since 10.37.0)\r\n* Disable setting a custom logger by default on the sync client when the sync manager is created. This was overriding the default logger set using `RLMLogger.defaultLogger`. (since v10.39.0).\r\n\r\n### Breaking Changes\r\n\r\n* The `RLMSyncTimeouts.appConfiguration` property has been removed. This was an unimplemented read-only property which did not make any sense on the containing type ([PR #8282](https://github.com/realm/realm-swift/pull/8282)).\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 14.0.1 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 14.3.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 14.1-15 beta 2.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 13.15.0 to 13.15.1\r\n",
    "createdAt" : "2023-06-27T04:10:43+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOAD24W84Gjddw",
    "owner" : "realm",
    "publishedAt" : "2023-06-27T04:12:47+09:00",
    "repository" : "realm-swift",
    "title" : "v10.41.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.41.0",
    "version" : "v10.41.0"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Filesystem errors now include more information in the error message.\r\n* Sync connection and session reconnect timing/backoff logic has been reworked and unified into a single implementation. Previously some categories of errors would cause an hour-long wait before attempting to reconnect, while others would use an exponential backoff strategy. All errors now result in the sync client waiting for 1 second before retrying, doubling the wait after each subsequent failure up to a maximum of five minutes. If the cause of the error changes, the backoff will be reset. If the sync client voluntarily disconnects, no backoff will be used. ([Core #6526]((https://github.com/realm/realm-core/pull/6526)))\r\n\r\n### Fixed\r\n\r\n* Removed warnings for deprecated APIs internal use. ([#8251](https://github.com/realm/realm-swift/issues/8251), since v10.39.0)\r\n* Fix an error during async open and client reset if properties have been added to the schema. This fix also applies to partition-based to flexible sync migration if async open is used. ([Core #6707](https://github.com/realm/realm-core/issues/6707), since v10.28.2)\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 14.0.1 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 14.3.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 14.1-15 beta 4.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 13.15.1 to 13.17.0\r\n* The location where prebuilt core binaries are published has changed slightly. If you are using `REALM_BASE_URL` to mirror the binaries, you may need to adjust your mirroring logic.\r\n* Release packages were being uploaded to several static.realm.io URLs which are no longer linked to anywhere. These are no longer being updated, and release packages are now only being uploaded to Github.",
    "createdAt" : "2023-07-18T07:58:31+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOAD24W84GtcPu",
    "owner" : "realm",
    "publishedAt" : "2023-07-18T08:00:45+09:00",
    "repository" : "realm-swift",
    "title" : "v10.41.1",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.41.1",
    "version" : "v10.41.1"
  },
  {
    "body" : "### Fixed\r\n\r\n* The names of the prebuilt zips for SPM have changed to avoid having Carthage download them instead of the intended Carthage zip ([#8326](https://github.com/realm/realm-swift/issues/8326), since v10.42.0).\r\n* The prebuild Realm.xcframework for SwiftPM now has all platforms other than visionOS built with Xcode 14 to comply with app store rules ([#8339](https://github.com/realm/realm-swift/issues/8339), since 10.42.0).\r\n* Fix visionOS compilation with Xcode beta 7.\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 14.0.1 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 14.3.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 14.1-15 beta 7.",
    "createdAt" : "2023-08-29T06:25:19+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOAD24W84HF7kU",
    "owner" : "realm",
    "publishedAt" : "2023-08-29T07:53:33+09:00",
    "repository" : "realm-swift",
    "title" : "v10.42.1",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.42.1",
    "version" : "v10.42.1"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Add support for logging messages sent by the server. ([Core #6476](https://github.com/realm/realm-core/pull/6476))\r\n* Unknown protocol errors received from the baas server will no longer cause the application to crash if a valid error action is also received. Unknown error actions will be treated as an ApplicationBug error action and will cause sync to fail with an error via the sync error handler. ([Core #6885](https://github.com/realm/realm-core/pull/6885))\r\n* Some sync error messages now contain more information about what went wrong.\r\n\r\n### Fixed\r\n\r\n* The `MultipleSyncAgents` exception from opening a synchronized Realm in multiple processes at once no longer leaves the sync client in an invalid state. ([Core #6868](https://github.com/realm/realm-core/pull/6868), since v10.36.0)\r\n* Testing the size of a collection of links against zero would sometimes fail (sometimes = \"difficult to explain\"). In particular: ([Core #6850](https://github.com/realm/realm-core/issues/6850), since v10.41.0)\r\n* When async writes triggered a file compaction some internal state could be corrupted, leading to later crashes in the slab allocator. This typically resulted in the \"ref + size <= next->first\" assertion failure, but other failures were possible. Many issues reported; see [Core #6340](https://github.com/realm/realm-core/issues/6340). (since 10.35.0)\r\n* `Realm.Configuration.maximumNumberOfActiveVersions` now handles intermediate versions which have been cleaned up correctly and checks the number of live versions rather than the number of versions between the oldest live version and current version (since 10.35.0).\r\n* If the client disconnected between uploading a change to flexible sync subscriptions and receiving the new object data from the server resulting from that subscription change, the next connection to the server would sometimes result in a client reset ([Core #6966](https://github.com/realm/realm-core/issues/6966), since v10.21.1).\r\n\r\n### Deprecations\r\n\r\n* `RLMApp` has `localAppName` and `localAppVersion` fields which never ended up being used for anything and are now deprecated.\r\n* `RLMSyncAuthError` has not been used since v10.0.0 and is now deprecated.\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 14.0.1 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 14.3.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 14.1-15 beta 7.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 13.17.1 to 13.20.1\r\n",
    "createdAt" : "2023-09-14T07:34:35+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOAD24W84HNwkd",
    "owner" : "realm",
    "publishedAt" : "2023-09-14T07:41:00+09:00",
    "repository" : "realm-swift",
    "title" : "v10.42.2",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.42.2",
    "version" : "v10.42.2"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Update packaging for the Xcode 15.0 release. Carthage release and obj-c\r\n  binaries are now built with Xcode 15.\r\n\r\n### Fixed\r\n\r\n* The prebuilt Realm.xcframework for SPM was packaged incorrectly and did not\r\n  work ([#8361](https://github.com/realm/realm-swift/issues/8361), since v10.42.1).\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 14.0.1 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 15.0.0.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 14.1-15.0.0.",
    "createdAt" : "2023-09-19T12:43:32+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOAD24W84HP-O6",
    "owner" : "realm",
    "publishedAt" : "2023-09-19T12:49:50+09:00",
    "repository" : "realm-swift",
    "title" : "v10.42.3",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.42.3",
    "version" : "v10.42.3"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Asymmetric objects are now allowed to link to non-embedded, non-asymmetric objects. ([Core #6981](https://github.com/realm/realm-core/pull/6981))\r\n\r\n### Fixed\r\n\r\n* The Swift package failed to link some required system libraries when building for Catalyst, potentially resulting in linker errors if the application did not pull them in (since v10.40.1)\r\n* Logging into a single user using multiple auth providers created a separate SyncUser per auth provider. This mostly worked, but had some quirks:\r\n  - Sync sessions would not necessarily be associated with the specific SyncUser used to create them. As a result, querying a user for its sessions could give incorrect results, and logging one user out could close the wrong sessions.\r\n  - Removing one of the SyncUsers would delete all local Realm files for all SyncUsers for that user.\r\n  - Deleting the server-side user via one of the SyncUsers left the other SyncUsers in an invalid state.\r\n  - A SyncUser which was originally created via anonymous login and then linked to an identity would still be treated as an anonymous users and removed entirely on logout. ([Core #6837](https://github.com/realm/realm-core/pull/6837), since v10.0.0)\r\n* Reading existing logged-in users on app startup from the sync metadata Realm performed three no-op writes per user on the metadata Realm ([Core #6837](https://github.com/realm/realm-core/pull/6837), since v10.0.0).\r\n* If a user was logged out while an access token refresh was in progress, the refresh completing would mark the user as logged in again and the user would be in an inconsistent state ([Core #6837](https://github.com/realm/realm-core/pull/6837), since v10.0.0).\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 14.0.1 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 15.0.0.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 14.1-15.0.0.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 13.20.1 to 13.21.0\r\n* The schema version of the metadata Realm used to cache logged in users has been bumped. Upgrading is handled automatically, but downgrading from this version to older versions will result in cached logins being discarded.\r\n",
    "createdAt" : "2023-09-26T05:30:03+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOAD24W84HTWYe",
    "owner" : "realm",
    "publishedAt" : "2023-09-26T05:36:04+09:00",
    "repository" : "realm-swift",
    "title" : "v10.42.4",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.42.4",
    "version" : "v10.42.4"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Added `Results.subscribe` API for flexible sync. Now you can subscribe and unsubscribe to a flexible sync subscription through an object `Result`.\r\n  ```swift\r\n  // Named subscription query\r\n  let results = try await realm.objects(Dog.self).where { $0.age > 18 }.subscribe(name: \"adults\")\r\n  results.unsubscribe()\r\n\r\n  // Unnamed subscription query\r\n  let results = try await realm.objects(Dog.self).subscribe()\r\n  results.unsubscribe()\r\n  ````\r\n\r\n  After committing the subscription to the realm's local subscription set, the method will wait for downloads according to the `WaitForSyncMode`.\r\n  ```swift\r\n  let results = try await realm.objects(Dog.self).where { $0.age > 1 }.subscribe(waitForSync: .always)\r\n  ```\r\n  Where `.always` will always download the latest data for the subscription, `.onCreation` will do it only the first time the subscription is created, and `.never` will never wait for the data to be downloaded.\r\n\r\n  This API is currently in preview and may be subject to changes in the future.\r\n* Added a new API which allows to remove all the unnamed subscriptions from the subscription set.\r\n  ```swift\r\n  realm.subscriptions.removeAll(unnamedOnly: true)\r\n  ```\r\n\r\n### Fixed\r\n\r\n* Build the prebuilt libraries with the classic linker to work around the new linker being broken on iOS <15. When using CocoaPods or SPM, you will need to manually add `-Wl,-classic_ld` to `OTHER_LDFLAGS` for your application until Apple fixes the bug.\r\n* Remove the visionOS slice from the Carthage build as it makes Carthage reject the xcframework ([#8370](https://github.com/realm/realm-swift/issues/8370)).\r\n* Permission errors when creating asymmetric objects were not handled correctly, leading to a crash ([Core #6978](https://github.com/realm/realm-core/issues/6978), since 10.35.0)\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 14.0.1 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 15.0.0.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 14.1-15.0.0.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 13.21.0 to 13.22.0",
    "createdAt" : "2023-09-30T08:05:10+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOAD24W84HV7bs",
    "owner" : "realm",
    "publishedAt" : "2023-09-30T08:11:13+09:00",
    "repository" : "realm-swift",
    "title" : "v10.43.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.43.0",
    "version" : "v10.43.0"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Update release packaging for Xcode 15.1.\r\n* Expose waiting for upload/download on SyncSession, which will suspend the current method (or call an asynchronous block) until an upload or download completes for a given sync session, e.g.,:\r\n  ```swift\r\n  try realm.write {\r\n    realm.add(Person())\r\n  }\r\n  try await realm.syncSession?.wait(for: .upload)\r\n  ```\r\n  Note that this should not generally be used– sync is eventually consistent and should be used as such. However, there are special cases (notably in testing) where this may be used.\r\n* Sync subscription change notifications are now cancelled if the sync session becomes inactive as is done for upload and download progress handlers. If a fatal sync error occurs it will be reported to the completion handler, and if the user is logged out an \"operation cancelled\" error will be reported. Non-fatal errors are unchanged (i.e. the sync client internally retries without reporting errors). Previously fatal errors would result in the completion handler never being called. ([Core #7073](https://github.com/realm/realm-core/pull/7073))\r\n* Automatic client reset recovery now preserves the original division of changesets, rather than combining all unsynchronized changes into a single changeset. This will typically improve server-side performance when there are a large number of recovered changes ([Core #7161](https://github.com/realm/realm-core/pull/7161)).\r\n* Automatic client reset recovery now does a better job of recovering changes when changesets were downloaded from the server after the unuploaded local changes were committed. If the local Realm happened to be fully up to date with the server prior to the client reset, automatic recovery should now always produce exactly the same state as if no client reset was involved ([Core #7161](https://github.com/realm/realm-core/pull/7161)).\r\n\r\n### Fixed\r\n\r\n* Flexible sync subscriptions would sometimes not be sent to the server if they were created while the client was downloading the bootstrap state for a previous subscription change and the bootstrap did not complete successfully. ([Core #7077](https://github.com/realm/realm-core/issues/7077), since v10.21.1)\r\n* Flexible sync subscriptions would sometimes not be sent to the server if an UPLOAD message was sent immediately after the subscription was created. ([Core #7076](https://github.com/realm/realm-core/issues/7076), since v10.43.1)\r\n* Creating or removing flexible sync subscriptions while a client reset with automatic recovery enabled was being processed in the background would occasionally crash with a `KeyNotFound` exception. ([Core #7090](https://github.com/realm/realm-core/issues/7090), since v10.28.2)\r\n* Automatic client reset recovery would sometimes fail with the error \"Invalid schema change (UPLOAD): cannot process AddColumn instruction for non-existent table\" when recovering schema changes while made offline. This would only occur if the server is using the recently introduced option to allow breaking schema changes in developer mode. ([Core #7042](https://github.com/realm/realm-core/pull/7042)).\r\n* `MutableSet<String>.formIntersection()` would sometimes cause a use-after-free if asked to intersect a set with itself (since v10.0.0).\r\n* Errors encountered while reapplying local changes for client reset recovery on partition-based sync Realms would result in the client reset attempt not being recorded, possibly resulting in an endless loop of attempting and failing to automatically recover the client reset. Flexible sync and errors from the server after completing the local recovery were handled correctly ([Core #7149](https://github.com/realm/realm-core/pull/7149), since v10.0.0).\r\n* During a client reset with recovery when recovering a move or set operation on a `List<Object>` or `List<AnyRealmValue>` that operated on indices that were not also added in the recovery, links to an object which had been deleted by another client while offline would be recreated by the recovering client, but the objects of these links would only have the primary key populated and all other fields would be default values. Now, instead of creating these zombie objects, the lists being recovered skip such deleted links. ([Core #7112](https://github.com/realm/realm-core/issues/7112), since client reset recovery was implemented in v10.25.0).\r\n* During a client reset recovery a Set of links could be missing items, or an exception could be thrown that prevents recovery (e.g. \"Requested index 1 calling get() on set 'source.collection' when max is 0\") ([Core #7112](https://github.com/realm/realm-core/issues/7112), since client reset recovery was implemented in v10.25.0).\r\n* Calling `sort()` or `distinct()` on a `MutableSet<Object>` that had unresolved links in it (i.e. objects which had been deleted by a different sync client) would produce a Results with duplicate entries.\r\n* Automatic client reset recovery would duplicate insertions in a list when recovering a write which made an unrecoverable change to a list (i.e. modifying or deleting a pre-existing entry), followed by a subscription change, followed by a write which added an entry to the list ([Core #7155](https://github.com/realm/realm-core/pull/7155), since the introduction of automatic client reset recovery for flexible sync).\r\n* Fixed several causes of \"decryption failed\" exceptions that could happen when opening multiple encrypted Realm files in the same process while using Realms stored on an exFAT file system. ([Core #7156](https://github.com/realm/realm-core/issues/7156), since v1.0.0)\r\n* Fixed deadlock which occurred when accessing the current user from the `App` from within a callback from the `User` listener ([Core #7183](https://github.com/realm/realm-core/issues/7183), since v10.42.0)\r\n* Having a class name of length 57 would make client reset crash as a limit of 56 was wrongly enforced (57 is the correct limit) ([Core #7176](https://github.com/realm/realm-core/issues/7176), since v10.0.0)\r\n* Automatic client reset recovery on flexible sync Realms would apply recovered changes in multiple write transactions, releasing the write lock in between. This had several observable negative effects:\r\n  - Other threads reading from the Realm while a client reset was in progress could observe invalid mid-reset state.\r\n  - Other threads could potentially write in the middle of a client reset, resulting in history diverging from the server.\r\n  - The change notifications produced by client resets were not minimal and would report that some things changed which actually didn't.\r\n  - All pending subscriptions were marked as Superseded and then recreating, resulting in anything waiting for subscriptions to complete firing early.\r\n  ([Core #7161](https://github.com/realm/realm-core/pull/7161), since v10.29.0).\r\n* If the very first open of a flexible sync Realm triggered a client reset, the configuration had an initial subscriptions callback, both before and after reset callbacks, and the initial subscription callback began a read transaction without ending it (which is normally going to be the case), opening the frozen Realm for the after reset callback would trigger a BadVersion exception ([Core #7161](https://github.com/realm/realm-core/pull/7161), since v10.29.0).\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 14.0.1 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 15.1.0.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 14.1-15.1.0.\r\n\r\n### Internal\r\n\r\n* Migrated our current CI Pipelines to Xcode Cloud.\r\n* Upgraded realm-core from 13.23.1 to 13.24.1\r\n",
    "createdAt" : "2023-12-16T11:55:09+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOAD24W84H_zgp",
    "owner" : "realm",
    "publishedAt" : "2023-12-16T12:01:02+09:00",
    "repository" : "realm-swift",
    "title" : "v10.45.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.45.0",
    "version" : "v10.45.0"
  },
  {
    "body" : "### Enhancements\n\n* Empty commits no longer trigger an extra invocation of the sync progress\n  handler reporting the exact same information as the previous invocation\n  ([Core #7031](https://github.com/realm/realm-core/pull/7031)).\n\n### Fixed\n\n* Updating subscriptions did not trigger Realm autorefreshes, sometimes\n  resulting in Realm.asyncRefresh() hanging until another write was performed by\n  something else ([Core #7031](https://github.com/realm/realm-core/pull/7031)).\n\n### Compatibility\n\n* Realm Studio: 14.0.1 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 15.0.0.\n* CocoaPods: 1.10 or later.\n* Xcode: 14.1-15.0.0.\n\n### Internal\n\n* Upgraded realm-core from 13.22.0 to 13.23.1",
    "createdAt" : "2023-10-16T11:47:28+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOAD24W84Hdber",
    "owner" : "realm",
    "publishedAt" : "2023-10-16T11:53:51+09:00",
    "repository" : "realm-swift",
    "title" : "v10.43.1",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.43.1",
    "version" : "v10.43.1"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Expose `SyncSession.reconnect()`, which requests an immediate reconnection if the session is currently disconnected rather than waiting for the normal reconnect delay.\r\n* Update release packaging for Xcode 15.1 beta. visionOS slices are now only included for 15.1 rather than splicing them into the non-beta 15.0 release.\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 14.0.1 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 15.0.0.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 14.1-15.0.0.",
    "createdAt" : "2023-10-30T11:49:27+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOAD24W84Hk5l7",
    "owner" : "realm",
    "publishedAt" : "2023-10-30T11:55:50+09:00",
    "repository" : "realm-swift",
    "title" : "v10.44.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.44.0",
    "version" : "v10.44.0"
  },
  {
    "body" : "This version introduces a new Realm file format version (v24). Opening existing\nRealm files will automatically upgrade the files, making them unable to be\nopened by older versions. This upgrade process should typically be very fast\nunless you have large Sets of AnyRealmValue, String, or Data, which have to be rewritten.\n\nA backup will automatically be created next to the Realm before performing the\nupgrade. Downgrading to older versions of Realm will attempt to automatically\nrestore the backup, or it will be deleted after three months.\n\n### Enhancements\n\n* Storage of Decimal128 properties has been optimised similarly to Int\n  properties so that the individual values will take up 0 bits (if all nulls),\n  32 bits, 64 bits or 128 bits depending on what is needed.\n  ([Core #6111](https://github.com/realm/realm-core/pull/6111))\n* Improve file compaction performance on arm64 platforms for encrypted files\n  between 16kB and 4MB in size. ([PR #7492](https://github.com/realm/realm-core/pull/7492)).\n\n### Fixed\n\n* Sorting on binary Data was done by comparing bytes as signed char rather than\n  unsigned char, resulting in very strange orders (since sorting on Data was\n  enabled in v6.0.4)\n* Sorting on AnyRealmValue did not use a valid total ordering, and certain\n  combinations of values could result in values not being sorted or potentially\n  even crashes. The resolution for this will result in some previously-valid\n  combinations of values of different types being sorted in different orders\n  than previously (since the introduction of AnyRealmValue in 10.8.0).\n* RLMSet/MutableSet was inconsistent about if it considered a String and a Data\n  containing the utf-8 encoded bytes of that String to be equivalent. They are\n  now always considered distinct. (since the introduction of sets in v10.8.0).\n* Equality queries on a Mixed property with an index could sometimes return\n  incorrect results if values of different types happened to have the same hash\n  code. ([Core 6407](https://github.com/realm/realm-core/issues/6407) since v10.8.0).\n* Creating more than 8388606 links pointing to a single object would crash.\n  ([Core #6577](https://github.com/realm/realm-core/issues/6577), since v5.0.0)\n* A Realm generated on a non-apple ARM 64 device and copied to another platform\n  (and vice-versa) were non-portable due to a sorting order difference. This\n  impacts strings or binaries that have their first difference at a non-ascii\n  character. These items may not be found in a set, or in an indexed column if\n  the strings had a long common prefix (> 200 characters).\n  ([Core #6670](https://github.com/realm/realm-core/pull/6670), since 2.0.0 for indexes, and since since the introduction of sets in v10.8.0)\n* Fix a spurious crash related to opening a Realm on background thread while\n  the process was in the middle of exiting ([Core #7420](https://github.com/realm/realm-core/pull/7420)).\n* Opening a Realm with a cached user while offline would fail to retry some\n  steps of the connection process and instead report a fatal error.\n  ([#7349](https://github.com/realm/realm-core/issues/7349), since v10.46.0)\n\n### Breaking Changes\n\n* Drop support for opening pre-v5.0.0 Realm files.\n\n### Compatibility\n\n* Realm Studio: 14.0.1 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 15.3.0.\n* CocoaPods: 1.10 or later.\n* Xcode: 14.2-15.3.0. Note that we will be dropping support for Xcode 14 when\n  Apple begins requiring Xcode 15 for app store submissions on April 29.\n\n### Internal\n\n* Upgraded realm-core from 13.26.0 to 14.3.0",
    "createdAt" : "2024-03-23T02:54:37+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOAD24W84I0a8F",
    "owner" : "realm",
    "publishedAt" : "2024-03-23T02:56:16+09:00",
    "repository" : "realm-swift",
    "title" : "v10.49.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.49.0",
    "version" : "v10.49.0"
  },
  {
    "body" : "### Enhancements\n\n* Improve file compaction performance on arm64 platforms for encrypted files\n  between 16kB and 4MB in size. ([PR #7492](https://github.com/realm/realm-core/pull/7492)).\n\n### Fixed\n\n* Opening a Realm with a cached user while offline would fail to retry some\n  steps of the connection process and instead report a fatal error.\n  ([#7349](https://github.com/realm/realm-core/issues/7349), since v10.46.0)\n\n### Compatibility\n\n* Realm Studio: 14.0.1 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 15.3.0.\n* CocoaPods: 1.10 or later.\n* Xcode: 14.2-15.3.0.\n\n### Internal\n\n* Upgraded realm-core from v14.3.0 to 14.4.1",
    "createdAt" : "2024-03-23T12:18:46+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOAD24W84I0rLX",
    "owner" : "realm",
    "publishedAt" : "2024-03-23T12:20:14+09:00",
    "repository" : "realm-swift",
    "title" : "v10.49.1",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.49.1",
    "version" : "v10.49.1"
  },
  {
    "body" : "### Fixed\r\n\r\n* Exceptions thrown while applying the initial download for a sync subscription change terminated the program rather than being reported to the sync error handler ([Core #7196](https://github.com/realm/realm-core/issues/7196) and [Core #7197](https://github.com/realm/realm-core/pull/7197)).\r\n* Calling `SyncSession.reconnect()` while a reconnect after a non-fatal error was pending would result in an assertion failure mentioning \"!m_try_again_activation_timer\" if another non-fatal error was received ([Core #6961](https://github.com/realm/realm-core/issues/6961)).\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 14.0.1 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 15.1.0.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 14.1-15.1.0.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 13.24.1 to 13.25.0",
    "createdAt" : "2023-12-19T12:51:06+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOAD24W84IAvcZ",
    "owner" : "realm",
    "publishedAt" : "2023-12-19T12:57:21+09:00",
    "repository" : "realm-swift",
    "title" : "v10.45.1",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.45.1",
    "version" : "v10.45.1"
  },
  {
    "body" : "### Fixed\n\n* Registering new notifications inside write transactions before actually\n  making any changes is now actually allowed. This was supposed to be allowed\n  in 10.39.1, but it did not actually work due to some redundant validation.\n* `SyncSession.ProgressDirection` and `SyncSession.ProgressMode` were missing\n  `Sendable` annotations ([PR #8435](https://github.com/realm/realm-swift/pull/8435)).\n* `Realm.Error.subscriptionFailed` was reported with the incorrect error\n  domain, making it impossible to catch (since v10.42.2, [PR #8435](https://github.com/realm/realm-swift/pull/8435)).\n\n### Compatibility\n\n* Realm Studio: 14.0.1 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 15.1.0.\n* CocoaPods: 1.10 or later.\n* Xcode: 14.1-15.1.0.",
    "createdAt" : "2023-12-21T00:45:04+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOAD24W84ICFog",
    "owner" : "realm",
    "publishedAt" : "2023-12-21T21:17:56+09:00",
    "repository" : "realm-swift",
    "title" : "v10.46.0-beta1",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.46.0-beta1",
    "version" : "v10.46.0-beta1"
  },
  {
    "body" : "### Enhancements\n\n* Greatly improve the performance of creating objects with a very large number\n  of pre-existing incoming links. This is primarily relevant to initial sync\n  bootstrapping when linking objects happen to be synchronized before the\n  target objects they link to ([Core #7217](https://github.com/realm/realm-core/issues/7217), since v10.0.0).\n\n### Fixed\n\n* Registering new notifications inside write transactions before actually\n  making any changes is now actually allowed. This was supposed to be allowed\n  in 10.39.1, but it did not actually work due to some redundant validation.\n* `SyncSession.ProgressDirection` and `SyncSession.ProgressMode` were missing\n  `Sendable` annotations ([PR #8435](https://github.com/realm/realm-swift/pull/8435)).\n* `Realm.Error.subscriptionFailed` was reported with the incorrect error\n  domain, making it impossible to catch (since v10.42.2, [PR #8435](https://github.com/realm/realm-swift/pull/8435)).\n\n### Compatibility\n\n* Realm Studio: 14.0.1 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 15.1.0.\n* CocoaPods: 1.10 or later.\n* Xcode: 14.1-15.1.0.\n\n### Internal\n\n* Upgraded realm-core from 13.25.0 to 13.25.1",
    "createdAt" : "2023-12-23T06:51:47+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOAD24W84ICzdX",
    "owner" : "realm",
    "publishedAt" : "2023-12-23T06:57:56+09:00",
    "repository" : "realm-swift",
    "title" : "v10.45.2",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.45.2",
    "version" : "v10.45.2"
  },
  {
    "body" : "### Enhancements\n\n* Update release packaging for Xcode 15.2. Prebuilt binaries for 14.1 and 15.0\n  have now been dropped from the release package.\n\n### Compatibility\n\n* Realm Studio: 14.0.1 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 15.2.0.\n* CocoaPods: 1.10 or later.\n* Xcode: 14.2-15.2.0.",
    "createdAt" : "2024-01-09T13:35:25+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOAD24W84IH1cA",
    "owner" : "realm",
    "publishedAt" : "2024-01-09T13:41:34+09:00",
    "repository" : "realm-swift",
    "title" : "v10.45.3",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.45.3",
    "version" : "v10.45.3"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Add a privacy manifest to both frameworks.\r\n* Internal C++ symbols are no longer exported from Realm.framework when installing via CocoaPods, which reduces the size of the binary by ~5%, improves app startup time a little, and eliminates some warnings when linking the framework. This was already the case when using Carthage or a prebuilt framework ([PR #8464](https://github.com/realm/realm-swift/pull/8464)).\r\n* The `baseURL` field of `AppConfiguration` can now be updated, rather than the value being persisted between runs of the application in the metadata storage. ([Core #7201](https://github.com/realm/realm-core/issues/7201))\r\n* Allow in-memory synced Realms. This will allow setting an in-memory identifier on a flexible sync realm.\r\n\r\n### Fixed\r\n\r\n* `@Persisted`'s Encodable implementation did not allow the encoder to customize the encoding of values, which broke things like JSONEncoder's `dateEncodingStrategy` ([#8425](https://github.com/realm/realm-swift/issues/8425)).\r\n* Fix running Package.swift on Linux to support tools like Dependabot which need to build the package description but not the package itself ([#8458](https://github.com/realm/realm-swift/issues/8458), since v10.40.1).\r\n\r\n### Breaking Changes\r\n\r\n* The `schemaVersion` field of `Realm.Configuration` must now always be zero for synchronized Realms. Schema versions are currently not applicable to synchronized Realms and the field was previously not read.\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 14.0.1 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 15.2.0.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 14.2-15.2.0.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 13.25.1 to 13.26.0",
    "createdAt" : "2024-01-24T11:51:02+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOAD24W84IPasV",
    "owner" : "realm",
    "publishedAt" : "2024-01-24T11:57:26+09:00",
    "repository" : "realm-swift",
    "title" : "v10.46.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.46.0",
    "version" : "v10.46.0"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Added initial support for geospatial queries on points. There is no new dedicated type to store Geospatial points, instead points should be stored as ([GeoJson-shaped](https://www.mongodb.com/docs/manual/reference/geojson/)) embedded object, as the example below:\r\n  ```swift\r\n  public class Location: EmbeddedObject {\r\n    @Persisted private var coordinates: List<Double>\r\n    @Persisted private var type: String = \"Point\"\r\n\r\n    public var latitude: Double { return coordinates[1] }\r\n    public var longitude: Double { return coordinates[0] }\r\n\r\n    convenience init(_ latitude: Double, _ longitude: Double) {\r\n        self.init()\r\n        // Longitude comes first in the coordinates array of a GeoJson document\r\n        coordinates.append(objectsIn: [longitude, latitude])\r\n    }\r\n  }\r\n  ```\r\n  Geospatial queries (`geoWithin`) can only be executed on such a type of objects and will throw otherwise. The queries can be used to filter objects whose points lie within a certain area, using the following pre-established shapes (`GeoBox`, `GeoPolygon`, `GeoCircle`).\r\n  ```swift\r\n  class Person: Object {\r\n    @Persisted var name: String\r\n    @Persisted var location: Location? // GeoJson embedded object\r\n  }\r\n\r\n  let realm = realmWithTestPath()\r\n  try realm.write {\r\n    realm.add(PersonLocation(name: \"Maria\", location: Location(latitude: 55.6761, longitude: 12.5683)))\r\n  }\r\n\r\n  let shape = GeoBox(bottomLeft: (55.6281, 12.0826), topRight: (55.6762, 12.5684))!\r\n  let locations = realm.objects(PersonLocation.self).where { $0.location.geoWithin(shape) })\r\n  ```\r\n  A `filter` or `NSPredicate` can be used as well to perform a Geospatial query.\r\n  ```swift\r\n  let shape = GeoPolygon(outerRing: [(-2, -2), (-2, 2), (2, 2), (2, -2), (-2, -2)], holes: [[(0, 0), (1, 1), (-1, 1), (0, 0)]])!\r\n  let locations = realm.objects(PersonLocation.self).filter(\"location IN %@\", shape)\r\n\r\n  let locations = realm.objects(PersonLocation.self).filter(NSPredicate(format: \"location IN %@\", shape))\r\n  ```\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 14.0.1 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 15.2.0.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 14.2-15.2.0.\r\n\r\n### Internal\r\n\r\n* Migrated Release pipelines to Github Actions.\r\n",
    "createdAt" : "2024-02-14T00:33:39+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOAD24W84IdDLk",
    "owner" : "realm",
    "publishedAt" : "2024-02-14T00:34:57+09:00",
    "repository" : "realm-swift",
    "title" : "v10.47.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.47.0",
    "version" : "v10.47.0"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Lifted a limitation that would prevent declaring a model with only computed properties. ([#8414](https://github.com/realm/realm-swift/issues/8414))\r\n* Add Xcode 15.3 to the release package ([PR #8502](https://github.com/realm/realm-swift/pull/8502)).\r\n\r\n### Fixed\r\n\r\n* Fix multiple arguments support via the `REALM_EXTRA_BUILD_ARGUMENTS` environment variable in `build.sh`. ([PR #8413](https://github.com/realm/realm-swift/pulls/8413)). Thanks, [@hisaac](https://github.com/hisaac)!\r\n* Fix some of the new sendability warnings introduced in Xcode 15.3 ([PR #8502](https://github.com/realm/realm-swift/pull/8502)).\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 14.0.1 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 15.3.0.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 14.2-15.3.0.",
    "createdAt" : "2024-03-08T06:21:27+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOAD24W84IqfF4",
    "owner" : "realm",
    "publishedAt" : "2024-03-08T06:24:07+09:00",
    "repository" : "realm-swift",
    "title" : "v10.48.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.48.0",
    "version" : "v10.48.0"
  },
  {
    "body" : "### Fixed\n\n* The Realm.framework privacy manifest was missing\n  NSPrivacyAccessedAPICategoryDiskSpace, but we check free disk space before\n  attempting to automatically back up Realm files (since 10.46.0).\n\n### Compatibility\n\n* Realm Studio: 14.0.1 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 15.3.0.\n* CocoaPods: 1.10 or later.\n* Xcode: 14.2-15.3.0.",
    "createdAt" : "2024-03-16T05:12:21+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOAD24W84IwK5p",
    "owner" : "realm",
    "publishedAt" : "2024-03-16T05:14:55+09:00",
    "repository" : "realm-swift",
    "title" : "v10.48.1",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.48.1",
    "version" : "v10.48.1"
  },
  {
    "body" : "### Enhancements\n\n* Server-side role and permissions changes no longer require a client reset to\n  update the local Realm. ([Core #7440](https://github.com/realm/realm-core/pull/7440))\n\n### Fixed\n\n* Deleting an object with a `List<AnyRealmValue` proeprty which linked to an\n  object which had been deleted by another sync client would switch to the\n  incorrect cascade mode and perform a cascading delete. This meant that if any\n  subsequent properties in the object linked to another top-level object and\n  that was the *only* link to that object, the target object would also be\n  recursively deleted as if it was an embedded object.\n  ([Core #7828](https://github.com/realm/realm-core/issues/7828), since v10.51.0).\n* Fix the assertion failure `array_backlink.cpp:112: Assertion failed:\n  int64_t(value >> 1) == key.value` when removing links to an object (either by\n  reassigning the link or by deleting the object). This could happen if the link\n  came from a collection inside a `AnyRealmValue`, any `Map`, or a\n  `List<AnyRealmValue>`, and there were more than 256 objects of the type which\n  contained the link.\n ([Core #7594](https://github.com/realm/realm-core/issues/7594), since v10.8.0)\n* Fix the assertion failure `array.cpp:319: Array::move() Assertion failed:\n  begin <= end [2, 1]` when deleting objects containing collections nested\n  inside a `AnyRealmValue` when this caused bptree leaves to be merged.\n  ()[Core #7839](https://github.com/realm/realm-core/issues/7839), since v10.51.0).\n* `SyncSession.wait(for .upload)` was inconsistent in how it handled commits\n  which do no produce any changesets to upload (such as modifying flexible sync\n  subscriptions). Previously if all unuploaded commits had empty changesets and\n  the session had never completed a download it would wait for download\n  completion, and otherwise it would complete immediate. It now always\n  completes immediately. ([Core #7796](https://github.com/realm/realm-core/pull/7796)).\n* The sync client could hit an assertion failure if a session is resumed while\n  the session is being suspended. ([Core #7860](https://github.com/realm/realm-core/issues/7860), since v10.27.0)\n* If a sync session was interrupted by a disconnect or restart while downloading\n  a bootstrap (a set of downloads caused by adding or changing a query\n  subscription), stale data from the previous bootstrap could be included when\n  the session reconnected and completed downloading the bootstrap. This could\n  lead to objects stored in the database that do not match the actual state of\n  the server and potentially leading to compensating writes.\n  ([Core #7827](https://github.com/realm/realm-core/issues/7827), since v10.27.0)\n* Fixed unnecessary server roundtrips when there was no download to acknowledge\n  ([Core #2129](https://jira.mongodb.org/browse/RCORE-2129), since v10.51.0).\n\n### Compatibility\n\n* Realm Studio: 15.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 15.4.0.\n* CocoaPods: 1.10 or later.\n* Xcode: 15.1.0-16 beta 3.\n\n### Internal\n\n* Upgraded realm-core from v14.10.2 to 14.11.0",
    "createdAt" : "2024-07-20T04:28:18+09:00",
    "fetchedFromAPIAt" : "2024-07-20T09:59:18+09:00",
    "id" : "RE_kwDOAD24W84J6Wul",
    "owner" : "realm",
    "publishedAt" : "2024-07-20T04:29:25+09:00",
    "repository" : "realm-swift",
    "title" : "v10.52.2",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.52.2",
    "version" : "v10.52.2"
  },
  {
    "body" : "### Enhancements\n\n* The default base url in `AppConfiguration` has been updated to point to `services.cloud.mongodb.com`. See https://www.mongodb.com/docs/atlas/app-services/domain-migration/ for more information. ([#8512](https://github.com/realm/realm-swift/issues/8512))\n\n### Fixed\n\n* Fixed a crash that would occur when an http error 401 or 403 is returned upon\n  opening a watch stream for a MongoDB collection. ([#8519](https://github.com/realm/realm-swift/issues/8519))\n* Fix an assertion failure \"m_lock_info && m_lock_info->m_file.get_path() == m_filename\" that appears to be related to opening a Realm while the file is in the process of being closed on another thread. ([#8507](https://github.com/realm/realm-swift/issues/8507))\n* Fixed diverging history due to a bug in the replication code when setting default null values (embedded objects included). ([Core #7536](https://github.com/realm/realm-core/issues/7536))\n* Null pointer exception may be triggered when logging out and async commits callbacks not executed. ([Core #7434](https://github.com/realm/realm-core/issues/7434))\n* `AppConfiguration.baseUrl` will now return the default value of the url when not set rather than `nil`. ([#8512](https://github.com/realm/realm-swift/issues/8512))\n* Added privacy manifest to Core's Swift package ([Swift #8535](https://github.com/realm/realm-swift/issues/8535))\n* Fixed crash when integrating removal of already removed dictionary key ([Core #7488](https://github.com/realm/realm-core/issues/7488), since v10.0.0)\n\n### Compatibility\n\n* Realm Studio: 15.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 15.3.0.\n* CocoaPods: 1.10 or later.\n* Xcode: 14.2-15.3.0.\n\n### Internal\n\n* Upgraded realm-core from 14.4.1 to 14.5.2",
    "createdAt" : "2024-04-18T04:42:04+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOAD24W84JCZzL",
    "owner" : "realm",
    "publishedAt" : "2024-04-18T04:44:22+09:00",
    "repository" : "realm-swift",
    "title" : "v10.49.2",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.49.2",
    "version" : "v10.49.2"
  },
  {
    "body" : "### Enhancements\n\n* Enable building RealmSwift as a dynamic framework when installing via SPM, which\n  lets us supply a privacy manifest. When RealmSwift is built as a static\n  library you must supply your own manifest, as Xcode does not build static\n  libraries in a way compatible with xcprivacy embedding. Due to some bugs in\n  Xcode, this may require manual changes to your project:\n   - Targets must now depend on only Realm or RealmSwift. If you use both the\n     obj-c and swift API, depending on RealmSwift will let you import Realm.\n     Trying to directly depend on both will give the error \"Swift package\n     target 'Realm' is linked as a static library by 'App' and 'Realm', but\n     cannot be built dynamically because there is a package product with the\n     same name.\"\n   - To actually build RealmSwift as a dynamic framework, change \"Do Not Embed\"\n     to \"Embed & Sign\" in the \"Frameworks, Libraries, and Embedded Content\"\n     section on the General tab of your target's settings.\n  ([#8561](https://github.com/realm/realm-swift/pull/8561)).\n\n### Compatibility\n\n* Realm Studio: 14.0.1 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 15.3.0.\n* CocoaPods: 1.10 or later.\n* Xcode: 14.2-15.3.0.",
    "createdAt" : "2024-05-01T10:48:40+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOAD24W84JJ-25",
    "owner" : "realm",
    "publishedAt" : "2024-05-01T10:49:41+09:00",
    "repository" : "realm-swift",
    "title" : "v10.49.3",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.49.3",
    "version" : "v10.49.3"
  },
  {
    "body" : "Drop support for Xcode 14, as it can no longer be used to submit app to the app\nstore. Xcode 15.1 is now the minimum supported version.\n\n### Known Issues\n* Accessing `App.currentUser` within an `App.subscribe` callback would lead to a deadlock.\n\n### Enhancements\n* Added `SyncConfiguration.initialSubscriptions` which describes the initial\n  subscription configuration that was passed when constructing the\n  `SyncConfiguration`. ([#8548](https://github.com/realm/realm-swift/issues/8548))\n* When connecting to multiple server apps, a unique encryption key is used for\n  each of the metadata Realms rather than sharing one between them\n  ([Core #7552](https://github.com/realm/realm-core/pull/7552)).\n* Improve perfomance of IN queries and chained OR equality queries for\n  UUID/ObjectId types. ([.Net #3566](https://github.com/realm/realm-dotnet/issues/3566))\n* Added support for updating Atlas Device Sync's base url, in case the need to roam between\n  servers (cloud and/or edge server). This API is private and can only be imported using\n  `@_spi(Private)`\n   ```swift\n   @_spi(RealmSwiftExperimental) import RealmSwift\n\n   try await app.updateBaseUrl(to: \"https://services.cloud.mongodb.com\")\n  ```\n  ([#8486](https://github.com/realm/realm-swift/issues/8486)).\n* Enable building RealmSwift as a dynamic framework when installing via SPM, which\n  lets us supply a privacy manifest. When RealmSwift is built as a static\n  library you must supply your own manifest, as Xcode does not build static\n  libraries in a way compatible with xcprivacy embedding. Due to some bugs in\n  Xcode, this may require manual changes to your project:\n   - Targets must now depend on only Realm or RealmSwift. If you use both the\n     obj-c and swift API, depending on RealmSwift will let you import Realm.\n     Trying to directly depend on both will give the error \"Swift package\n     target 'Realm' is linked as a static library by 'App' and 'Realm', but\n     cannot be built dynamically because there is a package product with the\n     same name.\"\n   - To actually build RealmSwift as a dynamic framework, change \"Do Not Embed\"\n     to \"Embed & Sign\" in the \"Frameworks, Libraries, and Embedded Content\"\n     section on the General tab of your target's settings.\n  ([#8561](https://github.com/realm/realm-swift/pull/8561)).\n* The `transferredBytes` and `transferrableBytes` fields on `Progress` have been deprecated\n  in favor of `progressEstimate` which is a value between 0.0 and 1.0 indicating the estimated\n  progress toward the upload/download transfer. ([#8476](https://github.com/realm/realm-swift/issues/8476))\n\n### Fixed\n* `-[RLMUser allSessions]` did not include sessions which were currently\n  waiting for an access token despite including sessions in other non-active\n  states. ([Core #7300](https://github.com/realm/realm-core/pull/7300), since v10.0.0).\n* `[RLMApp allUsers]` included users which were logged out during the current\n  run of the app, but not users which had previously been logged out. It now\n  always includes all logged out users. ([Core #7300](https://github.com/realm/realm-core/pull/7300), since v10.0.0).\n* Deleting the active user (via `User.delete()`) left the active user\n  unset rather than selecting another logged-in user as the active user like\n  logging out and removing users does. ([Core #7300](https://github.com/realm/realm-core/pull/7300), since v10.23.0).\n* Fixed several issues around copying an encrypted Realm between platforms with\n  different page sizes (such as between x86_64 and arm64 Apple platforms):\n  - Fixed `Assertion failed: new_size % (1ULL << m_page_shift) == 0` when\n    opening an encrypted Realm less than 64Mb that was generated on a platform\n    with a different page size than the current platform.\n    ([Core #7322](https://github.com/realm/realm-core/issues/7322), since v10.42.0)\n  - Fixed a `DecryptionFailed` exception thrown when opening a small (<4k of\n    data) Realm generated on a device with a page size of 4k if it was bundled\n    and opened on a device with a larger page size (since the beginning).\n  - Fixed an issue during a subsequent open of an encrypted Realm for some rare\n    allocation patterns when the top ref was within ~50 bytes of the end of a\n    page. This could manifest as a DecryptionFailed exception or as an\n    assertion: `encrypted_file_mapping.hpp:183: Assertion failed: local_ndx <\n    m_page_state.size()`. ([Core #7319](https://github.com/realm/realm-core/issues/7319))\n* Schema initialization could hit an assertion failure if the sync client\n  applied a downloaded changeset while the Realm file was in the process of\n  being opened ([#7041](https://github.com/realm/realm-core/issues/7041), since v10.15.0).\n* The reported download progress for flexible sync Realms was incorrect. It is now replaced by a\n  progress estimate, which is derived by the server based on historical data and other heuristics.\n  ([#8476](https://github.com/realm/realm-swift/issues/8476))\n\n<!-- ### Breaking Changes - ONLY INCLUDE FOR NEW MAJOR version -->\n\n### Compatibility\n* Realm Studio: 15.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 15.3.0.\n* CocoaPods: 1.10 or later.\n* Xcode: 15.1.0-15.3.0.\n\n### Internal\n* Upgraded realm-core from v14.5.2 to 14.6.2",
    "createdAt" : "2024-05-03T08:26:51+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOAD24W84JLIoC",
    "owner" : "realm",
    "publishedAt" : "2024-05-03T08:27:48+09:00",
    "repository" : "realm-swift",
    "title" : "v10.50.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.50.0",
    "version" : "v10.50.0"
  },
  {
    "body" : "### Enhancements\n\n* Update release packaging for Xcode 15.4.\n\n### Fixed\n\n* `@AutoOpen` and `@AsyncOpen` failed to use the `initialSubscriptions` set in\n  the configuration passed to them ([PR #8572](https://github.com/realm/realm-swift/pull/8572), since v10.50.0).\n* `App.baseURL` was always `nil` ([PR #8573](https://github.com/realm/realm-swift/pull/8573), since it was introduced in v10.50.0).\n\n### Compatibility\n\n* Realm Studio: 15.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 15.4.0.\n* CocoaPods: 1.10 or later.\n* Xcode: 15.1.0-15.4.0.",
    "createdAt" : "2024-05-22T09:55:29+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOAD24W84JWFza",
    "owner" : "realm",
    "publishedAt" : "2024-05-22T09:56:37+09:00",
    "repository" : "realm-swift",
    "title" : "v10.50.1",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.50.1",
    "version" : "v10.50.1"
  },
  {
    "body" : "### Enhancements\n\n* Added support for storing nested collections (List and Map not ManagedSet) in a `AnyRealmValue`.\n  ```swift\n  class MixedObject: Object {\n    @Persisted var anyValue: AnyRealmValue\n  }\n\n  // You can build a AnyRealmValue from a Swift's Dictionary.\n  let dictionary: Dictionary<String, AnyRealmValue> = [\"key1\": .string(\"hello\"), \"key2\": .bool(false)]\n\n  // You can build a AnyRealmValue from a Swift's Map\n  // and nest a collection within another collection.\n  let list: Array<AnyRealmValue> = [.int(12), .double(14.17), AnyRealmValue.fromDictionary(dictionary)]\n\n  let realm = realmWithTestPath()\n  try realm.write {\n    let obj = MixedObject()\n    obj.anyValue = AnyRealmValue.fromArray(list)\n    realm.add(obj)\n  }\n  ```\n* Added new operators to Swift's Query API for supporting querying nested collections.\n  ```swift\n  realm.objects(MixedObject.self).where { $0.anyValue[0][0][1] == .double(76.54) }\n  ```\n  \n  The `.any` operator allows looking up in all keys or indexes.\n  ```swift\n  realm.objects(MixedObject.self).where { $0.anyValue[\"key\"].any == .bool(false) }\n  ```\n* Report the originating error that caused a client reset to occur. \n  ([Core #6154](https://github.com/realm/realm-core/issues/6154))\n\n### Fixed\n\n* Accessing `App.currentUser` from within a notification produced by `App.switchToUser()` \n  (which includes notifications for a newly logged in user) would deadlock. \n  ([Core #7670](https://github.com/realm/realm-core/issues/7670), since v10.50.0).\n* Inserting the same link to the same key in a dictionary more than once would incorrectly create \n  multiple backlinks to the object. This did not appear to cause any crashes later, but would \n  have affecting explicit backlink count queries and possibly notifications. \n  ([Core #7676](https://github.com/realm/realm-core/issues/7676), since v10.49.2).\n* A non-streaming progress notifier would not immediately call its callback after registration. \n  Instead you would have to wait for a download message to be received to get your first \n  update - if you were already caught up when you registered the notifier you could end up waiting a\n  long time for the server to deliver a download that would call/expire your notifier \n  ([Core #7627](https://github.com/realm/realm-core/issues/7627), since v10.50.0).\n* After compacting, a file upgrade would be triggered. This could cause loss of data \n  if `deleteRealmIfMigrationNeeded` is set to true.\n  ([Core #7747](https://github.com/realm/realm-core/issues/7747), since v10.49.0).\n\n### Compatibility\n\n* Realm Studio: 15.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 15.4.0.\n* CocoaPods: 1.10 or later.\n* Xcode: 15.1.0-15.4.0.\n\n### Internal\n\n* Upgraded realm-core from v14.6.2 to 14.9.0",
    "createdAt" : "2024-06-07T06:03:45+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOAD24W84Jfkp2",
    "owner" : "realm",
    "publishedAt" : "2024-06-07T06:04:54+09:00",
    "repository" : "realm-swift",
    "title" : "v10.51.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.51.0",
    "version" : "v10.51.0"
  },
  {
    "body" : "### Enhancements\n\n* Add `@ObservedSectionedResults.remove(atOffsets:section:)` which adds the ability to\n  remove a Realm Object when using `onDelete` on `ForEach` in a SwiftUI `List`.\n* Add support for Xcode 16 beta 1 and fix some of the new warnings. Note that\n  this does not yet include full support for Swift 6 language mode\n  ([#8618](https://github.com/realm/realm-swift/pull/8618)).\n* `Realm.asyncWrite()` and `Realm.asyncRefresh()` now use the new `#isolation`\n  feature to avoid sendability warnings when building with Xcode 16\n  ([#8618](https://github.com/realm/realm-swift/pull/8618)).\n* Include the originating client reset error message in errors reporting that\n  automatic client reset handling failed. ([Core #7761](https://github.com/realm/realm-core/pull/7761))\n* Improve the performance of insertion-heavy write transactions, particularly\n  when setting a large number of properties on each object created\n  ([Core #7734](https://github.com/realm/realm-core/pull/7734)).\n* App now trims trailing slashes from the base url rather than producing\n  confusing 404 errors. ([Core #7791](https://github.com/realm/realm-core/pull/7791)).\n\n### Fixed\n\n* Deleting a Realm Object used in a `@ObservedSectionedResults` collection in `SwiftUI`\n  would cause a crash during the diff on the `View`. ([#8294](https://github.com/realm/realm-swift/issues/8294), since v10.29.0)\n* Fix some client resets (such as migrating to flexible sync) potentially\n  failing if a new client reset condition (such as rolling back a flexible sync\n  migration) occurred before the first one completed.\n ([Core #7542](https://github.com/realm/realm-core/pull/7542), since v10.40.0)\n* The encryption code no longer behaves differently depending on the system\n  page size, which should entirely eliminate a recurring source of bugs related\n  to copying encrypted Realm files between platforms with different page sizes.\n  One known outstanding bug was ([RNET-1141](https://github.com/realm/realm-dotnet/issues/3592)),\n  where opening files on a system with a larger page size than the writing\n  system would attempt to read sections of the file which had never been\n  written to ([Core #7698](https://github.com/realm/realm-core/pull/7698)).\n* There were several complicated scenarios which could result in stale reads\n  from encrypted files in multiprocess scenarios. These were very difficult to\n  hit and would typically lead to a crash, either due to an assertion failure\n  or DecryptionFailure being thrown ([Core #7698](https://github.com/realm/realm-core/pull/7698), since v10.38.0).\n* Encrypted files have some benign data races where we can memcpy a block of\n  memory while another thread is writing to a limited range of it. It is\n  logically impossible to ever read from that range when this happens, but\n  Thread Sanitizer quite reasonably complains about this. We now perform a\n  slower operations when running with TSan which avoids this benign race\n  ([Core #7698](https://github.com/realm/realm-core/pull/7698)).\n* `Realm.asyncOpen()` on a flexible sync Realm would sometimes fail to wait for\n  pending subscriptions to complete, resulting in it not actually waiting for\n  all data to be downloaded. ([Core #7720](https://github.com/realm/realm-core/issues/7720),\n  since flexible sync was introduced).\n* `List<AnyRealmValue>.clear()` would hit an assertion failure when used on a\n  file originally created by a version of Realm older than v10.49.0.\n  ([Core #7771](https://github.com/realm/realm-core/issues/7771), since 10.49.0)\n\n### Compatibility\n\n* Realm Studio: 15.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 15.4.0.\n* CocoaPods: 1.10 or later.\n* Xcode: 15.1.0-16 beta\n\n### Internal\n\n* Upgraded realm-core from v14.9.0 to 14.10.1",
    "createdAt" : "2024-06-19T08:25:00+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOAD24W84Jm2Ax",
    "owner" : "realm",
    "publishedAt" : "2024-06-19T08:26:04+09:00",
    "repository" : "realm-swift",
    "title" : "v10.52.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.52.0",
    "version" : "v10.52.0"
  },
  {
    "body" : "### Fixed\n\n* Realm compaction (triggered by setting `shouldCompactOnLaunch`) on an\n  encrypted Realm file could produce an invalid file unless the encryption key\n  happened to be a valid nul-terminated string.\n  ([Core #7842](https://github.com/realm/realm-core/issues/7842), since v10.52.0.\n* Assigning a List or Dictionary to an AnyRealmValue property which already\n  stored that type of collection would only emit a clear instruction if the\n  collection was not already empty. This meant that assigning to the property\n  on two different clients would merge the collections if the property\n  initially stored an empty collection, but would pick one of the two\n  assignments to win if it was initially non-empty. If merging is the desired\n  behavior, appending to the List rather than assigning a new List will still\n  achieve that ([Core #7809](https://github.com/realm/realm-core/issues/7809), since v10.51.0).\n\n\n### Compatibility\n\n* Realm Studio: 15.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 15.4.0.\n* CocoaPods: 1.10 or later.\n* Xcode: 15.1.0-15.4.0.\n\n### Internal\n* Upgraded realm-core from v14.10.1 to 14.10.2",
    "createdAt" : "2024-06-29T05:19:03+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOAD24W84JuA7A",
    "owner" : "realm",
    "publishedAt" : "2024-06-29T05:20:12+09:00",
    "repository" : "realm-swift",
    "title" : "v10.52.1",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.52.1",
    "version" : "v10.52.1"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Improve performance of bulk object creation when the objects have embedded objects. This is particularly significant for applying sync bootstraps. ([Core #7945](https://github.com/realm/realm-core/issues/7945))\r\n* Client reset cycle detection now checks if the previous recovery attempt was made by the same version of Realm, and if not attempts recovery again ([Core #7944](https://github.com/realm/realm-core/pull/7944)).\r\n\r\n### Fixed\r\n\r\n* App change notifications were being sent too soon when a new user was logged in, resulting in the user's profile being empty if it was read from within the change notification (since v10.51.0).\r\n* A conflict resolution bug related to ArrayErase and Clear instructions could sometimes cause an \"Invalid prior_size\" exception when synchronizing ([Core #7893](https://github.com/realm/realm-core/issues/7893), since v10.51.0).\r\n* Sync merges which resulted in a changeset's reciprotal transformation being empty were handled incorrectly, possibly resulting in data divergence. No instances of this actually happening have been reported. ([Core #7955](https://github.com/realm/realm-core/pull/7955), since v10.51.0)\r\n* `Realm.writeCopy()` would sometimes incorrectly throw an exception claiming that there were unuploaded local changes when the source Realm is a synchronized Realm ([Core #7966](https://github.com/realm/realm-core/issues/7966), since v10.7.6).\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 15.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 15.4.0.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 15.1.0-16 beta 5.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from v14.11.1 to 14.12.0",
    "createdAt" : "2024-08-10T12:02:43+09:00",
    "fetchedFromAPIAt" : "2024-08-11T10:06:01+09:00",
    "id" : "RE_kwDOAD24W84KG_Rf",
    "owner" : "realm",
    "publishedAt" : "2024-08-10T12:03:57+09:00",
    "repository" : "realm-swift",
    "title" : "v10.52.3",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.52.3",
    "version" : "v10.52.3"
  },
  {
    "body" : "### Enhancements\n\n* Code sign our published xcframeworks. By Apple's requirements, we should sign our release\n  binaries so Xcode can validate it was signed by the same developer on every new version.\n  ([Apple](https://developer.apple.com/support/third-party-SDK-requirements/)).\n* Report sync warnings from the server such as sync being disabled server-side to the sync error handler.\n  ([#8020](https://github.com/realm/realm-swift/issues/8020)).\n* Add support for string comparison queries, which allows building string\n  queries with the following operators (`>`, `>=`, `<`, `<=`).\n  This is a case sensitive lexicographical comparison.\n  ([#8008](https://github.com/realm/realm-swift/issues/8008)).\n\n### Fixed\n\n* `-[RLMAsymmetricObject createObject:withValue:]` was marked as having a\n  non-null return value despite always returning `nil` (since v10.29.0).\n* Eliminate several clang static analyzer warnings which did not report actual\n  bugs.\n* The async and Future versions of `User.functions` only worked for functions\n  which took exactly one argument, which had to be an array ([#8669](https://github.com/realm/realm-swift/issues/8669), since 10.16.0).\n\n### Compatibility\n\n* Realm Studio: 15.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 15.4.0.\n* CocoaPods: 1.10 or later.\n* Xcode: 15.1.0-16 beta 5.",
    "createdAt" : "2024-08-21T06:39:42+09:00",
    "fetchedFromAPIAt" : "2024-08-21T10:00:49+09:00",
    "id" : "RE_kwDOAD24W84KM7HV",
    "owner" : "realm",
    "publishedAt" : "2024-08-21T06:41:03+09:00",
    "repository" : "realm-swift",
    "title" : "v10.53.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.53.0",
    "version" : "v10.53.0"
  },
  {
    "body" : "### Enhancements\n\n* Add the file path to the exception thrown by File::rw_lock() when it fails to\n  open the file. ([Core #7999](https://github.com/realm/realm-core/issues/7999))\n\n### Fixed\n\n* Filtering notifications with a LinkingObjects property as the final element\n  could sometimes give wrong results\n  ([Core #7530](https://github.com/realm/realm-core/issues/7530), since v10.11.0)\n* Fix a potential crash during process termination when Logger log level is set\n  higher than Info. ([Core #7969](https://github.com/realm/realm-core/issues/7969), since v10.45.0)\n* The check for maximum path length was incorrect and lengths between 240 and\n  250 would fail to use the hashed fallback ([Core #8007](https://github.com/realm/realm-core/issues/8007), since v10.0.0).\n* API misuse resulting in an exception being thrown from within a callback\n  would sometimes terminate due to hitting `REALM_UNREACHABLE()` rather than\n  the exception being propagated to the caller\n  ([Core #7836](https://github.com/realm/realm-core/issues/7836)).\n\n### Compatibility\n\n* Realm Studio: 15.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 15.4.0.\n* CocoaPods: 1.10 or later.\n* Xcode: 15.1.0-16 beta 5.\n\n### Internal\n\n* Upgraded realm-core from v14.12.0 to 14.12.1",
    "createdAt" : "2024-09-06T05:16:09+09:00",
    "fetchedFromAPIAt" : "2024-09-06T10:04:01+09:00",
    "id" : "RE_kwDOAD24W84KWta1",
    "owner" : "realm",
    "publishedAt" : "2024-09-06T05:17:36+09:00",
    "repository" : "realm-swift",
    "title" : "v10.53.1",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.53.1",
    "version" : "v10.53.1"
  },
  {
    "body" : "The minimum supported version of Xcode is now 15.3.\r\n\r\n### Enhancements\r\n\r\n* Build in Swift 6 language mode when using Xcode 16. Libraries build in Swift 6 mode can be consumed by apps built in Swift 5 mode, so this should not have any immediate effects beyond eliminating some warnings and ensuring that all Realm APIs can be used in Swift 6 mode. Some notes about using Realm Swift in Swift 6:\r\n  - `try await Realm(actor: actor)` has been replaced with `try await Realm.open()` to work around isolated parameters not being implemented for initializers (https://github.com/swiftlang/swift/issues/71174). The actor is now automatically inferred and should not be manually passed in.\r\n  - `@ThreadSafe` is not usable as a property wrapper on local variables and function arguments in Swift 6 mode. Sendability checking for property wrappers never got implemented due to them being quietly deprecated in favor of macros. It can still be used as a property wrapper for class properties and as a manual wrapper locally, but note that it does not combine well with actor-isolated Realms.\r\n* Some SwiftUI components are now explicitly marked as `@MainActor`. These types were implicitly `@MainActor` in Swift 5, but became nonisolated when using Xcode 16 in Swift 5 mode due to the removal of implicit isolation when using property wrappers on member variables. This resulted in some new sendability warnings in Xcode 16 (or errors in Swift 6 mode).\r\n* Add Xcode 16 and 16.1 binaries to the release packages (currently built with beta 6 and beta 1 respectively).\r\n\r\n### Breaking Changes\r\n\r\n* All Atlas App Services and Atlas Device Sync functionality has been removed. Users of Atlas Device Sync should pin to v10.\r\n* Queries on AnyRealmValue properties previously considered strings to be equivalent to Data containing the UTF-8 encoded string. Strings and Data are now considered different types and queries for one of them will not match the other.\r\n* Realms are no longer autoreleased when initialized. This means that code along the lines of the following will no longer work:\r\n\r\n  ```Swift\r\n  try! Realm().beginWrite()\r\n  try! Realm().create(MyObject.self, value: ...)\r\n  try! Realm().commitWrite()\r\n  ```\r\n\r\n  This was a pattern which was somewhat natural with the original version of the objective-c API, but only worked in debug builds and would fail in release builds. We decided to make it consistently work by forcing the Realm to be autoreleased rather than let users write code which appeared to work but was actually broken. In modern Swift this code is very strange, and autoreleasing the Realm made it much more difficult to ensure that the file is actually closed at predictable times.\r\n\r\n  Realms are now returned retained in both debug and release modes, so this will always break rather than appearing to work. Note that there is still a weak cache of Realms and `Realm()` will still return a reference to the existing Realm if there is one open on the current thread.\r\n* Iterating a Map now produces the tuple `(key: KeyType, value: ValueType)` rather than a very similar struct, and `.asKeyValueSequence()` has been removed. This aligns `Map` with `Dictionary` and makes many operations defined by `Sequence` work on `Map`.\r\n* Passing an empty array for notification keypaths to filter on (e.g. `obj.observe(keyPaths: [])`) was treated the same as passing `nil`, i.e. no filtering was done. It now instead observes no keypaths. For objects this means it will only report the object being deleted, and for collections it will only report collection-level changes and not changes to the objects inside the collection.\r\n* `Decimal128(string:)` was marked as `throws`, but it never actually threw an error and instead returned `NaN` if the string could not be parsed as a decimal128. That behavior was kept and it is no longer marked as `throws`.\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 15.0.0 or later.\r\n* Carthage release for Swift is built with Xcode 15.4.0.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 15.3.0-16.1 beta.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from v14.12.1 to v20.0.0.",
    "createdAt" : "2024-09-10T02:16:55+09:00",
    "fetchedFromAPIAt" : "2024-09-10T10:05:22+09:00",
    "id" : "RE_kwDOAD24W84KYbnw",
    "owner" : "realm",
    "publishedAt" : "2024-09-10T02:18:29+09:00",
    "repository" : "realm-swift",
    "title" : "v20.0.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v20.0.0",
    "version" : "v20.0.0"
  }
]