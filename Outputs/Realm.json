[
  {
    "body" : "### Enhancements\n\n* Sync logs now contain information about what object/changeset was being applied when the exception was thrown. \n  ([Core #4836](https://github.com/realm/realm-core/issues/4836))\n* Added ServiceErrorCode for wrong username/password when using '`App.login`. \n  ([Core #7380](https://github.com/realm/realm-cocoa/issues/7380)\n\n### Fixed\n\n* Fix crash in `MongoCollection.findOneDocument(filter:)` that occurred when no results were\n  found for a given filter. \n  ([Cocoa #7380](https://github.com/realm/realm-cocoa/issues/7380), since v10.0.0)\n* Some of the SwiftUI property wrappers incorrectly required objects to conform\n  to ObjectKeyIdentifiable rather than Identifiable.\n  ([Cocoa #7372](https://github.com/realm/realm-cocoa/issues/7372), since v10.6.0)\n* Work around Xcode 13 beta 3+ shipping a broken swiftinterface file for Combine on 32-bit iOS.\n  ([Cocoa #7368](https://github.com/realm/realm-cocoa/issues/7368))\n* Fixes history corruption when replacing an embedded object in a list.\n  ([Core #4845](https://github.com/realm/realm-core/issues/4845)), since v10.0.0)\n\n### Compatibility\n\n* Realm Studio: 11.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 12.5.1.\n* CocoaPods: 1.10 or later.\n* Xcode: 12.2-13.0 beta 5.\n\n### Internal\n\n* Upgraded realm-core from 11.2.0 to 11.3.0",
    "createdAt" : "2021-08-26T21:40:40+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "MDc6UmVsZWFzZTQ4NDk4MzQ1",
    "owner" : "realm",
    "publishedAt" : "2021-08-26T21:45:15+09:00",
    "repository" : "realm-swift",
    "title" : "v10.13.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.13.0",
    "version" : "v10.13.0"
  },
  {
    "body" : "### Enhancements\n\n* Add additional `observe` methods for Objects and RealmCollections which take\n  a `PartialKeyPath` type key path parameter.\n* The release package once again contains Xcode 13 binaries.\n* `PersistableEnum` properties can now be indexed or used as the primary key if\n  the RawValue is an indexable or primary key type.\n\n### Fixed\n\n* `Map<Key, Value>` did not conform to `Codable`.\n  ([Cocoa #7418](https://github.com/realm/realm-cocoa/pull/7418), since v10.8.0)\n* Fixed \"Invalid data type\" assertion failure in the sync client when the\n  client recieved an AddColumn instruction from the server for an AnyRealmValue\n  property when that property already exists locally. ([Core #4873](https://github.com/realm/realm-core/issues/4873), since v10.8.0)\n\n### Compatibility\n\n* Realm Studio: 11.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 12.5.1.\n* CocoaPods: 1.10 or later.\n* Xcode: 12.2-13.0 beta 5.\n\n### Internal\n\n* Upgraded realm-core from 11.3.0 to 11.3.1.",
    "createdAt" : "2021-09-04T07:10:08+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "MDc6UmVsZWFzZTQ4OTk2NDEz",
    "owner" : "realm",
    "publishedAt" : "2021-09-04T07:15:30+09:00",
    "repository" : "realm-swift",
    "title" : "v10.14.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.14.0",
    "version" : "v10.14.0"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Add `async` versions of the  `Realm.asyncOpen` and `App.login` methods.\r\n* ThreadSafeReference no longer pins the source transaction version for  anything other than a Results created by filtering a collection. This means that holding on to thread-safe references to other things (such as Objects) will no longer cause file size growth.\r\n* A ThreadSafeReference to a Results backed by a collection can now be created inside a write transaction as long as the collection was not created in the current write transaction.\r\n* Synchronized Realms are no longer opened twice, cutting the address space and file descriptors used in half. ([Core #4839](https://github.com/realm/realm-core/pull/4839))\r\n\r\n### Fixed\r\n\r\n* Adding an unmanaged object to a Realm that was declared with `@StateRealmObject` would throw the exception `\"Cannot add an object with observers to a Realm\"`.\r\n* The `RealmCollectionChange` docs referred to indices in modifications as the 'new' collection. This is incorrect and the docs now state that modifications refer to the previous version of the collection. ([Cocoa #7390](https://github.com/realm/realm-cocoa/issues/7390))\r\n* Fix crash in `RLMSyncConfiguration.initWithUser` error mapping when a user is disabled/deleted from MongoDB Realm dashboard.  ([Cocoa #7399](https://github.com/realm/realm-cocoa/issues/7399), since v10.0.0)\r\n* If the application crashed at the wrong point when logging a user in, the next run of the application could hit the assertion failure \"m_state == SyncUser::State::LoggedIn\" when a synchronized Realm is opened with that user. ([Core #4875](https://github.com/realm/realm-core/issues/4875), since v10.0.0)\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 12.5.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 12.2-13.0 beta 5.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 11.3.1 to 11.4.1",
    "createdAt" : "2021-09-11T04:04:05+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84C8WUX",
    "owner" : "realm",
    "publishedAt" : "2021-09-11T06:09:42+09:00",
    "repository" : "realm-swift",
    "title" : "v10.15.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.15.0",
    "version" : "v10.15.0"
  },
  {
    "body" : "### Enhancements\n\n* Switch to building the Carthage release with Xcode 13.\n\n### Fixed\n\n* Fix compilation error where Swift 5.5 is available but the macOS 12 SDK was\n  not. This was notable for the Xcode 13 RC. This fix adds a #canImport check\n  for the `_Concurrency` module that was not available before the macOS 12 SDK.\n\n### Compatibility\n\n* Realm Studio: 11.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 13.0.\n* CocoaPods: 1.10 or later.\n* Xcode: 12.2-13.0.",
    "createdAt" : "2021-09-16T05:14:58+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84C9UoE",
    "owner" : "realm",
    "publishedAt" : "2021-09-16T05:22:33+09:00",
    "repository" : "realm-swift",
    "title" : "v10.15.1",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.15.1",
    "version" : "v10.15.1"
  },
  {
    "body" : "### Fixed\r\n\r\n* Fixed various memory corruption bugs when encryption is used caused by not locking a mutex when needed. ([#7640](https://github.com/realm/realm-swift/issues/7640), [#7659](https://github.com/realm/realm-swift/issues/7659), since v10.21.1)\r\n* Changeset upload batching did not calculate the accumulated size correctly, resulting in “error reading body failed to read: read limited at 16777217 bytes” errors from the server when writing large amounts of data ([Core #5373](https://github.com/realm/realm-core/pull/5373), since 11.13.0).\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 13.3.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 12.4-13.3.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from v11.13.0 to v11.14.0.",
    "createdAt" : "2022-04-12T11:31:40+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84D01VK",
    "owner" : "realm",
    "publishedAt" : "2022-04-12T11:37:02+09:00",
    "repository" : "realm-swift",
    "title" : "v10.25.1",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.25.1",
    "version" : "v10.25.1"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Replace Xcode 13.3 binaries with 13.3.1 binaries.\r\n\r\n### Fixed\r\n\r\n* `List<AnyRealmValue>` would contain an invalidated object instead of null when the object linked to was deleted by a difference sync client ([Core #5215](https://github.com/realm/realm-core/pull/5215), since v10.8.0).\r\n* Adding an object to a Set, deleting the parent object of the Set, and then deleting the object which was added to the Set would crash ([Core #5387](https://github.com/realm/realm-core/issues/5387), since v10.8.0).\r\n* Synchronized Realm files which were first created using v10.0.0-beta.3 would be redownloaded instead of using the existing file, possibly resulting in the loss of any unsynchronized data in those files (since v10.20.0).\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 13.3.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 12.4-13.3.1.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from v11.14.0 to v11.15.0",
    "createdAt" : "2022-04-28T07:02:58+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84D57vq",
    "owner" : "realm",
    "publishedAt" : "2022-04-28T07:08:34+09:00",
    "repository" : "realm-swift",
    "title" : "v10.25.2",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.25.2",
    "version" : "v10.25.2"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Add `async` versions of `EmailPasswordAuth.callResetPasswordFunction` and `User.linkUser` methods.\r\n* Add `async` version of `MongoCollection` methods.\r\n* Add `async` support for user functions.\r\n\r\n### Fixed\r\n\r\n* A race condition in Realm.asyncOpen() sometimes resulted in subsequent writes from Realm Sync failing to produce notifications  ([#7447](https://github.com/realm/realm-cocoa/issues/7447), [#7453](https://github.com/realm/realm-cocoa/issues/7453), [Core #4909](https://github.com/realm/realm-core/issues/4909), since v10.15.0).\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 13.0.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 12.2-13.0.",
    "createdAt" : "2021-09-30T08:26:06+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84DAsDK",
    "owner" : "realm",
    "publishedAt" : "2021-09-30T08:31:46+09:00",
    "repository" : "realm-swift",
    "title" : "v10.16.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.16.0",
    "version" : "v10.16.0"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Add a new `@ThreadSafe` property wrapper. Objects and collections wrapped by `@ThreadSafe` may be passed between threads. It's\r\n  intended to allow local variables and function parameters to be used across threads when needed.\r\n\r\n### Fixed\r\n\r\n* None.\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 13.0.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 12.2-13.0.",
    "createdAt" : "2021-10-07T04:38:18+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84DCO4M",
    "owner" : "realm",
    "publishedAt" : "2021-10-07T04:44:10+09:00",
    "repository" : "realm-swift",
    "title" : "v10.17.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.17.0",
    "version" : "v10.17.0"
  },
  {
    "body" : "### Enhancements\n\n* Add support for using multiple users with `@AsyncOpen` and `@AutoOpen`.\n  Setting the current user to a new user will now automatically reopen the\n  Realm with the new user.\n* Add prebuilt binary for Xcode 13.1 to the release package.\n\n### Fixed\n\n* Fix `@AsyncOpen` and `@AutoOpen` using `defaultConfiguration` by default if\n  the user's doesn't provide one, will set an incorrect path which doesn't\n  correspond to the users configuration one. (since v10.12.0)\n* Adding missing subscription completion for `AsyncOpenPublisher` after\n  successfully returning a realm.\n\n### Compatibility\n\n* Realm Studio: 11.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 13.1.\n* CocoaPods: 1.10 or later.\n* Xcode: 12.2-13.1.",
    "createdAt" : "2021-10-26T04:39:15+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84DGYPF",
    "owner" : "realm",
    "publishedAt" : "2021-10-26T04:45:07+09:00",
    "repository" : "realm-swift",
    "title" : "v10.18.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.18.0",
    "version" : "v10.18.0"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Add `.searchable()` SwiftUI View Modifier which allows filtering `@ObservedResult` results from a search field component by a key path.\r\n  ```swift\r\n  List {\r\n      ForEach(reminders) { reminder in\r\n        ReminderRowView(reminder: reminder)\r\n      }\r\n  }.searchable(text: $searchFilter,\r\n               collection: $reminders,\r\n               keyPath: \\.name) {\r\n    ForEach(reminders) { remindersFiltered in\r\n      Text(remindersFiltered.name).searchCompletion(remindersFiltered.name)\r\n    }\r\n  }\r\n  ```\r\n* Add an api for a type safe query syntax. This allows you to filter a Realm and collections managed by a Realm with Swift style expressions. Here is a brief example:\r\n  ```swift\r\n  class Person: Object {\r\n    @Persisted var name: String\r\n    @Persisted var hobbies: MutableSet<String>\r\n    @Persisted var pets: List<Pet>\r\n  }\r\n  class Pet: Object {\r\n    @Persisted var name: String\r\n    @Persisted var age: Int\r\n  }\r\n\r\n  let persons = realm.objects(Person.self).where {\r\n    $0.hobbies.contains(\"music\") || $0.hobbies.contains(\"baseball\")\r\n  }\r\n\r\n  persons = realm.objects(Person.self).where {\r\n    ($0.pets.age >= 2) && $0.pets.name.starts(with: \"L\")\r\n  }\r\n  ```\r\n  ([#7419](https://github.com/realm/realm-cocoa/pull/7419))\r\n* Add support for dictionary subscript expressions (e.g. `\"phoneNumbers['Jane'] == '123-3456-123'\"`) when querying with an\r\n  NSPredicate.\r\n* Add UserProfile to User. This contains metadata from social logins with MongoDB Realm.\r\n* Slightly reduce the peak memory usage when processing sync changesets.\r\n\r\n### Fixed\r\n\r\n* Change default request timeout for `RLMApp` from 6 seconds to 60 seconds.\r\n* Async `Realm` init would often give a Realm instance which could not actually be used and would throw incorrect thread exceptions. It now is `@MainActor` and gives a Realm instance which always works on the main actor. The non-functional `queue:` parameter has been removed (since v10.15.0).\r\n* Restore the pre-v10.12.0 behavior of calling `writeCopy()` on a synchronized Realm which produced a local non-synchronized Realm\r\n  ([#7513](https://github.com/realm/realm-cocoa/issues/7513)).\r\n* Decimal128 did not properly normalize the value before hashing and so could have multiple values which are equal but had different hash values (since v10.8.0).\r\n* Fix a rare assertion failure or deadlock when a sync session is racing to close at the same time that external reference to the Realm is being released. ([Core #4931](https://github.com/realm/realm-core/issues/4931))\r\n* Fix a assertion failure when opening a sync Realm with a user who had been removed. Instead an exception will be thrown. ([Core #4937](https://github.com/realm/realm-core/issues/4937), since v10.0.0)\r\n* Fixed a rare segfault which could trigger if a user was being logged out while the access token refresh response comes in. ([Core #4944](https://github.com/realm/realm-core/issues/4944), since v10.0.0)\r\n* Fixed a bug where progress notifiers on an AsyncOpenTask could be called after the open completed. ([Core #4919](https://github.com/realm/realm-core/issues/4919))\r\n* SecureTransport was not enabled for macCatalyst builds when installing via SPM, resulting in `'SSL/TLS protocol not supported'` exceptions when using Realm Sync. ([#7474](https://github.com/realm/realm-cocoa/issues/7474))\r\n* Users were left in the logged in state when their refresh token expired. ([Core #4882](https://github.com/realm/realm-core/issues/4882), since v10)\r\n* Calling `.count` on a distinct collection would return the total number of objects in the collection rather than the distinct count the first time it is called. ([#7481](https://github.com/realm/realm-cocoa/issues/7481), since v10.8.0).\r\n* `realm.delete(collection.distinct(...))` would delete all objects in the collection rather than just the first object with each distinct value in the property being distincted on, unless the distinct Results were read from at least once first (since v10.8.0).\r\n* Calling `.distinct()` on a collection, accessing the Results, then passing the Results to `realm.delete()` would delete the correct objects, but afterwards report a count of zero even if there were still objects in the Results (since v10.8.0).\r\n* Download compaction could result in non-streaming sync download notifiers never reporting completion (since v10.0.0, [Core #4989](https://github.com/realm/realm-core/pull/4989)).\r\n* Fix a deadlock in SyncManager that was probably not possible to hit in real-world code (since v10.0.0).\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 13.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 12.2-13.1.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from v11.4.1 to v11.6.0",
    "createdAt" : "2021-11-05T13:12:13+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84DJQed",
    "owner" : "realm",
    "publishedAt" : "2021-11-05T13:18:13+09:00",
    "repository" : "realm-swift",
    "title" : "v10.19.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.19.0",
    "version" : "v10.19.0"
  },
  {
    "body" : "### Enhancements\n\n* Conform `@ThreadSafe` and `ThreadSafeReference` to `Sendable`.\n* Allow using Swift enums which conform to `PersistableEnum` as the value type\n  for all Realm collections.\n\n### Fixed\n\n* `@AutoOpen` will open the existing local Realm file on any connection error\n  rather than only when the connection specifically times out.\n* Do not allow `progress` state changes for `@AutoOpen` and `@AsyncOpen` after\n  changing state to `open(let realm)` or `error(let error)`.\n* Logging out a sync user failed to remove the local Realm file for partitions\n  with very long partition values that would have exceeded the maximum path\n  length. ([Core #4187](https://github.com/realm/realm-core/issues/4187), since v10.0.0)\n* Don't keep trying to refresh the access token if the client's clock is more\n  than 30 minutes fast. ([Core #4941](https://github.com/realm/realm-core/issues/4941))\n* Failed auth requests used a fixed long sleep rather than exponential backoff\n  like other sync requests, which could result in very delayed reconnects after\n  a device was offline long enough for the access token to expire (since v10.0.0).\n\n### Compatibility\n\n* Realm Studio: 11.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 13.1.\n* CocoaPods: 1.10 or later.\n* Xcode: 12.2-13.1.\n\n### Internal\n\n* Upgraded realm-core from 11.6.0 to 11.6.1.",
    "createdAt" : "2021-11-17T08:36:01+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84DMIuz",
    "owner" : "realm",
    "publishedAt" : "2021-11-17T08:41:45+09:00",
    "repository" : "realm-swift",
    "title" : "v10.20.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.20.0",
    "version" : "v10.20.0"
  },
  {
    "body" : "Xcode 12.4 is now the minimum supported version of Xcode.\n\n### Fixed\n\n* Add missing `Indexable` support for UUID.\n  ([Cocoa #7545](https://github.com/realm/realm-cocoa/issues/7545), since v10.10.0)\n\n### Breaking Changes\n\n* All `async` functions now require Xcode 13.2 to work around an App\n  Store/TestFlight bug that results in apps built with 13.0/13.1 which do not\n  use libConcurrency but link a library which does crashing on startup.\n\n### Compatibility\n\n* Realm Studio: 11.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 13.2.\n* CocoaPods: 1.10 or later.\n* Xcode: 12.2-13.2.",
    "createdAt" : "2021-12-15T02:10:04+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84DS76o",
    "owner" : "realm",
    "publishedAt" : "2021-12-15T02:16:02+09:00",
    "repository" : "realm-swift",
    "title" : "v10.20.1",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.20.1",
    "version" : "v10.20.1"
  },
  {
    "body" : "Rebuild 10.20.1 with Xcode 13.2.1 rather than 13.2.0. This version has no\nchanges if you are not using a prebuilt binary for Realm.\n\n### Compatibility\n\n* Realm Studio: 11.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 13.2.1.\n* CocoaPods: 1.10 or later.\n* Xcode: 12.4-13.2.1.",
    "createdAt" : "2021-12-21T02:21:02+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84DUc-l",
    "owner" : "realm",
    "publishedAt" : "2021-12-21T03:41:32+09:00",
    "repository" : "realm-swift",
    "title" : "v10.20.2",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.20.2",
    "version" : "v10.20.2"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Add `metadata` property to `RLMUserProfile`/`UserProfile`.\r\n* Add class `Projection` to allow creation of light weight view models out of Realm Objects.  \r\n```swift\r\npublic class Person: Object {\r\n    @Persisted var firstName = \"\"\r\n    @Persisted var lastName = \"\"\r\n    @Persisted var address: Address? = nil\r\n    @Persisted var friends = List<Person>()\r\n}\r\n\r\npublic class Address: EmbeddedObject {\r\n    @Persisted var city: String = \"\"\r\n    @Persisted var country = \"\"\r\n}\r\n\r\nclass PersonProjection: Projection<Person> {\r\n    // `Person.firstName` will have same name and type\r\n    @Projected(\\Person.firstName) var firstName\r\n    // There will be the only String for `city` of the original object `Address`\r\n    @Projected(\\Person.address.city) var homeCity\r\n    // List<Person> will be mapped to list of firstNames\r\n    @Projected(\\Person.friends.projectTo.firstName) var firstFriendsName: ProjectedCollection<String>\r\n}\r\n\r\n// `people` will contain projections for every `Person` object in the `realm`\r\nlet people: Results<PersonProjection> = realm.objects(PersonProjection.self)\r\n```\r\n* Greatly improve performance of reading AnyRealmValue and enum types from Realm collections.\r\n* Allow using Swift enums which conform to `PersistableEnum` as the value type for all Realm collections.\r\n* `AnyRealmCollection` now conforms to `Encodable`.\r\n* AnyRealmValue and PersistableEnum values can now be passed directly to an NSPredicate used in a filter() call rather than having to pass the rawValue (the rawValue is still allowed).\r\n* Queries on collections of PersistableEnums can now be performed with `where()`.\r\n* Add support for querying on the rawValue of an enum with `where()`.\r\n* `.count` is supported for Maps of all types rather than just numeric types in `where()`.\r\n* Add support for querying on the properties of objects contained in dictionaries (e.g. \"dictProperty.@allValues.name CONTAINS 'a'\").\r\n* Improve the error message for many types of invalid predicates in queries.\r\n* Add support for comparing `@allKeys` to another property on the same object.\r\n* Add `Numeric` conformance to `Decimal128`.\r\n* Make some invalid property declarations such as `List<AnyRealmValue?>` a compile-time error instead of a runtime error.\r\n* Calling `.sorted(byKeyPath:)` on a collection with an Element type which does not support sorting by keypaths is now a compile-time error instead of a runtime error.\r\n* `RealmCollection.sorted(ascending:)` can now be called on all non-Object/EmbeddedObject collections rather than only ones where the `Element` conforms to `Comparable`.\r\n* Add support for using user-defined types with `@Persistable` and in Realm collections by defining a mapping to and from a type which Realm knows how to store. For example, `URL` can be made persistable with:\r\n  ```swift\r\n  extension URL: FailableCustomPersistable {\r\n      // Store URL values as a String in Realm\r\n      public typealias PersistedType = String\r\n      // Convert a String to a URL\r\n      public init?(persistedValue: String) { self.init(string: persistedValue) }\r\n      // Convert a URL to a String\r\n      public var persistableValue: String { self.absoluteString }\r\n  }\r\n  ```\r\n  After doing this, `@Persisted var url: URL` is a valid property declaration on a Realm object. More advanced mappings can be done by mapping to an EmbeddedObject which can store multiple values.\r\n\r\n### Fixed\r\n\r\n* Accessing a non object collection inside a migration would cause a crash\r\n* [#5633](https://github.com/realm/realm-cocoa/issues/5633).\r\n* Accessing a `Map` of objects dynamically would not handle nulled values correctly (since v10.8.0).\r\n* `where()` allowed constructing some nonsensical queries due to boolean comparisons returning `Query<T>` rather than `Query<Bool>` (since v10.19.0).\r\n* `@allValues` queries on dictionaries accidentally did not require \"ANY\".\r\n* Case-insensitive and diacritic-insensitive modifiers were ignored when comparing the result of an aggregate operation to another property in a query.\r\n* `Object.init(value:)` did not allow initializing `RLMDictionary<NSString, RLMObject>`/`Map<String, Object?>` properties with null values for map entries (since v10.8.0).\r\n* `@ObservedResults` did not refresh when changes were made to the observed collection. (since v10.6.0)\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 13.2.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 12.4-13.2.1.",
    "createdAt" : "2022-01-11T08:57:13+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84DYnKU",
    "owner" : "realm",
    "publishedAt" : "2022-01-11T09:03:26+09:00",
    "repository" : "realm-swift",
    "title" : "v10.21.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.21.0",
    "version" : "v10.21.0"
  },
  {
    "body" : "### Fixed\r\n\r\n* The sync client will now drain the receive queue when a send fails with ECONNRESET, ensuring that any error message from the server gets received and processed. ([#5078](https://github.com/realm/realm-core/pull/5078))\r\n* Schema validation was missing for embedded objects in sets, resulting in an unhelpful error being thrown if a Realm object subclass contained one (since v10.0.0).\r\n* Opening a Realm with a schema that has an orphaned embedded object type performed an extra empty write transaction (since v10.0.0).\r\n* Freezing a Realm with a schema that has orphaned embedded object types threw a \"Wrong transactional state\" exception (since v10.19.0).\r\n* `@sum` and `@avg` queries on Dictionaries of floats or doubles used too much precision for intermediates, resulting in incorrect rounding (since v10.5.0).\r\n* Change the exception message for calling refresh on an immutable Realm from \"Continuous transaction through DB object without history information.\" to \"Can't refresh a read-only Realm.\" ([#5061](https://github.com/realm/realm-core/issues/5061), since v10.8.0).\r\n* Queries of the form \"link.collection.@sum = 0\" where `link` is null matched when `collection` was a List or Set, but not a Dictionary\r\n  ([#5080](https://github.com/realm/realm-core/pull/5080), since v10.8.0).\r\n* Types which require custom obj-c bridging (such as `PersistableEnum` or `CustomPersistable`) would crash with exceptions mentioning `__SwiftValue` in a variety of places on iOS versions older than iOS 14 ([#7604](https://github.com/realm/realm-swift/issues/7604), since v10.21.0)\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 13.2.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 12.4-13.2.1.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 11.6.1 to 11.8.0.",
    "createdAt" : "2022-01-13T05:35:00+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84DZQ1w",
    "owner" : "realm",
    "publishedAt" : "2022-01-13T05:41:22+09:00",
    "repository" : "realm-swift",
    "title" : "v10.21.1",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.21.1",
    "version" : "v10.21.1"
  },
  {
    "body" : "### Enhancements\n\n* Add beta support for flexible sync. See the [backend](https://docs.mongodb.com/realm/sync/data-access-patterns/flexible-sync/) and [SDK](https://docs.mongodb.com/realm/sdk/swift/examples/flexible-sync/) documentation for more information. Please report any issues with the beta through Github.\n\n### Fixed\n\n* UserIdentity metadata table grows indefinitely. ([#5152](https://github.com/realm/realm-core/issues/5152), since v10.20.0)\n* We now report a useful error message when opening a sync Realm in non-sync mode or vice-versa.([#5161](https://github.com/realm/realm-core/pull/5161), since v5.0.0).\n\n### Compatibility\n\n* Realm Studio: 11.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 13.2.1.\n* CocoaPods: 1.10 or later.\n* Xcode: 12.4-13.2.1.\n\n### Internal\n\n* Upgraded realm-core from 11.8.0 to 11.9.0",
    "createdAt" : "2022-01-25T11:28:08+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84Dcz5t",
    "owner" : "realm",
    "publishedAt" : "2022-01-25T11:34:34+09:00",
    "repository" : "realm-swift",
    "title" : "v10.22.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.22.0",
    "version" : "v10.22.0"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Add `Realm.writeCopy(configuration:)`/`[RLMRealm writeCopyForConfiguration:]` which gives the following functionality:\r\n    - Export a local non-sync Realm to be used with MongoDB Realm Sync when the configuration is derived from a sync `RLMUser`/`User`.\r\n    - Write a copy of a local Realm to a destination specified in the configuration.\r\n    - Write a copy of a synced Realm in use with user A, and open it with user B.\r\n    - Note that migrations may be required when using a local realm configuration to open a realm file that was copied from a synchronized realm.\r\n  An exception will be thrown if a Realm exists at the destination.\r\n* Add a `seedFilePath` option to `RLMRealmConfiguration` and `Configuration`. If this option is set then instead of creating an empty Realm, the realm at the `seedFilePath` will be copied to the `fileURL` of the new Realm. If a Realm file already exists at the\r\n  destination path, the seed file will not be copied and the already existing Realm will be opened instead. Note that to use this parameter with a synced Realm configuration the seed Realm must be appropriately copied to a destination with  `Realm.writeCopy(configuration:)`/`[RLMRealm writeCopyForConfiguration:]` first.\r\n* Add ability to permanently delete a User from a MongoDB Realm app. This can be invoked with `User.delete()`/`[RLMUser deleteWithCompletion:]`.\r\n* Add `NSCopying` conformance to `RLMDecimal128` and `RLMObjectId`.\r\n* Add Xcode 13.3 binaries to the release package (and remove 13.0).\r\n\r\n### Fixed\r\n\r\n* Add support of arm64 in Carthage build ([#7154](https://github.com/realm/realm-cocoa/issues/7154)\r\n* Adding missing support for `IN` queries to primitives types on Type Safe Queries.\r\n  ```swift\r\n  let persons = realm.objects(Person.self).where {\r\n    let acceptableNames = [\"Tom\", \"James\", \"Tyler\"]\r\n    $0.name.in([acceptableNames])\r\n  }\r\n  ```\r\n  ([Cocoa #7633](https://github.com/realm/realm-swift/issues/7633), since v10.19.0)\r\n* Work around a compiler crash when building with Swift 5.6 / Xcode 13.3. CustomPersistable's PersistedType must now always be a built-in type rather than possibly another CustomPersistable type as Swift 5.6 has removed support for infinitely-recursive associated types ([#7654](https://github.com/realm/realm-swift/issues/7654)).\r\n* Fix redundant call to filter on `@ObservedResults` from `searchable` component (since v10.19.0).\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 13.2.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 12.4-13.3 beta 3.",
    "createdAt" : "2022-03-01T12:11:02+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84DncP8",
    "owner" : "realm",
    "publishedAt" : "2022-03-01T12:18:02+09:00",
    "repository" : "realm-swift",
    "title" : "v10.23.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.23.0",
    "version" : "v10.23.0"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Add ability to use Swift Query syntax in `@ObservedResults`, which allows you to filter results using the `where` parameter.\r\n\r\n### Fixed\r\n\r\n* If a list of objects contains links to objects not included in the synchronized partition, collection change notifications for that list could be incorrect ([Core #5164](https://github.com/realm/realm-core/issues/5164), since v10.0.0).\r\n* Adding a new flexible sync subscription could crash with \"Assertion failed: !m_unbind_message_sent\" in very specific timing scenarios ([Core #5149](https://github.com/realm/realm-core/pull/5149), since v10.22.0).\r\n* Converting floats/doubles into Decimal128 would yield imprecise results ([Core #5184](https://github.com/realm/realm-core/pull/5184), since v10.0.0)\r\n* Using accented characters in class and field names in a synchronized Realm could result in sync errors ([Core #5196](https://github.com/realm/realm-core/pull/5196), since v10.0.0).\r\n* Calling `Realm.invalidate()` from inside a Realm change notification could result in the write transaction which produced the notification not being persisted to disk (since v10.22.0).\r\n* When a client reset error which results in the current Realm file being backed up and then deleted, deletion errors were ignored as long as the copy succeeded. When this happens the deletion of the old file is now scheduled for the next launch of the app. ([Core #5180](https://github.com/realm/realm-core/issues/5180), since v2.0.0)\r\n* Fix an error when compiling a watchOS Simulator target not supporting Thread-local storage ([#7623](https://github.com/realm/realm-swift/issues/7623), since v10.21.0).\r\n* Add a validation check to report a sensible error if a Realm configuration indicates that an in-memory Realm should be encrypted. ([Core #5195](https://github.com/realm/realm-core/issues/5195))\r\n* The Swift package set the linker flags on the wrong target, resulting in linker errors when SPM decides to build the core library as a dynamic library ([#7266](https://github.com/realm/realm-swift/issues/7266)).\r\n* The download-core task failed if run in an environment without TMPDIR set ([#7688](https://github.com/realm/realm-swift/issues/7688), since v10.23.0).\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 13.2.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 12.4-13.3 beta 3.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 11.9.0 to 11.11.0\r\n",
    "createdAt" : "2022-03-06T11:19:11+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84Do-18",
    "owner" : "realm",
    "publishedAt" : "2022-03-06T11:24:32+09:00",
    "repository" : "realm-swift",
    "title" : "v10.24.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.24.0",
    "version" : "v10.24.0"
  },
  {
    "body" : "Switch to building the Carthage binary with Xcode 13.3. This release contains\nno functional changes from 10.24.0.\n\n### Compatibility\n\n* Realm Studio: 11.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 13.3.\n* CocoaPods: 1.10 or later.\n* Xcode: 12.4-13.3.",
    "createdAt" : "2022-03-15T08:46:20+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84Dr249",
    "owner" : "realm",
    "publishedAt" : "2022-03-15T08:51:51+09:00",
    "repository" : "realm-swift",
    "title" : "v10.24.1",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.24.1",
    "version" : "v10.24.1"
  },
  {
    "body" : "### Fixed\n\n* Application would sometimes crash with exceptions like 'KeyNotFound' or\n  assertion \"has_refs()\". Other issues indicating file corruption may also be\n  fixed by this. The one mentioned here is the one that lead to solving the\n  problem.\n  ([Core #5283](https://github.com/realm/realm-core/issues/5283), since v5.0.0)\n\n### Compatibility\n\n* Realm Studio: 11.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 13.3.\n* CocoaPods: 1.10 or later.\n* Xcode: 12.4-13.3.\n\n### Internal\n\n* Upgraded realm-core from 11.11.0 to 11.12.0",
    "createdAt" : "2022-03-19T11:11:57+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84Dtar8",
    "owner" : "realm",
    "publishedAt" : "2022-03-19T11:17:34+09:00",
    "repository" : "realm-swift",
    "title" : "v10.24.2",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.24.2",
    "version" : "v10.24.2"
  },
  {
    "body" : "Synchronized Realm files written by this version cannot be opened by older versions of Realm. Existing files will be automatically upgraded when opened.\r\n\r\nNon-synchronized Realm files remain backwards-compatible.\r\n\r\n### Enhancements\r\n\r\n* Add ability to use Swift Query syntax in `@ObservedResults`, which allows you to filter results using the `where` parameter.\r\n* Add ability to use `MutableSet` with `StateRealmObject` in SwiftUI.\r\n* Async/Await extensions are now compatible with iOS 13 and above when building with Xcode 13.3.\r\n* Sync changesets waiting to be uploaded to the server are now compressed, reducing the disk space needed when large write transactions are performed while offline or limited in bandwidth.([Core #5260](https://github.com/realm/realm-core/pull/5260)).\r\n* Added new `SyncConfiguration.clientResetMode` and `RLMSyncConfiguration.clientResetMode` properties.\r\n  - The values of these properties will dictate client behavior in the event of a [client reset](https://docs.mongodb.com/realm/sync/error-handling/client-resets/).\r\n  - See below for information on `ClientResetMode` values.\r\n  - `clientResetMode` defaults to `.manual` if not set otherwise.\r\n* Added new `ClientResetMode` and `RLMClientResetMode` enums.\r\n  - These enums represent possible client reset behavior for `SyncConfiguration.clientResetMode` and `RLMSyncConfiguration.clientResetMode`, respectively.\r\n  - `.manual` and `RLMClientResetModeManual`\r\n    - The local copy of the Realm is copied into a recovery directory for safekeeping, and then deleted from the original location. The next time the Realm for that partition value is opened, the Realm will automatically be re-downloaded from MongoDB Realm, and can be used as normal.\r\n    - Data written to the Realm after the local copy of the Realm diverged from the backup remote copy will be present in the local recovery copy of the Realm file. The re-downloaded Realm will initially contain only the data present at the time the Realm was backed up on the server.\r\n    -  `rlmSync_clientResetBackedUpRealmPath` and `SyncError.clientResetInfo()` are used for accessing the recovery directory.\r\n  - `.discardLocal` and `RLMClientResetDiscardLocal`\r\n    - All unsynchronized local changes are automatically discarded and the local state is automatically reverted to the most recent state from the server. Unsynchronized changes can then be recovered in a post-client-reset callback block (See changelog below for more details).\r\n    - If RLMClientResetModeDiscardLocal is enabled but the client reset operation is unable to complete then the client reset process reverts to manual mode.\r\n    - The realm's underlying object accessors remain bound so the UI may be updated in a non-disruptive way.\r\n* Added support for client reset notification blocks for `.discardLocal` and `RLMClientResetDiscardLocal`\r\n  - **RealmSwift implementation**: `discardLocal(((Realm) -> Void)? = nil, ((Realm, Realm) -> Void)? = nil)` \r\n    - RealmSwift client reset blocks are set when initializing the user configuration\r\n    ```swift\r\n    var configuration = user.configuration(partitionValue: \"myPartition\", clientResetMode: .discardLocal(beforeClientResetBlock, afterClientResetBlock))\r\n    ```\r\n    - The before client reset block -- `((Realm) -> Void)? = nil` -- is executed prior to a client reset. Possible usage includes:\r\n    ```swift\r\n    let beforeClientResetBlock: (Realm) -> Void = { beforeRealm in\r\n      var recoveryConfig = Realm.Configuration()\r\n        recoveryConfig.fileURL = myRecoveryPath\r\n        do {\r\n          beforeRealm.writeCopy(configuration: recoveryConfig)\r\n            /* The copied realm could be used later for recovery, debugging, reporting, etc. */\r\n        } catch {\r\n            /* handle error */\r\n        }\r\n    }\r\n    ```\r\n    - The after client reset block -- `((Realm, Realm) -> Void)? = nil)` -- is executed after a client reset. Possible usage includes:\r\n    ```Swift\r\n    let afterClientResetBlock: (Realm, Realm) -> Void = { before, after in\r\n    /* This block could be used to add custom recovery logic, back-up a realm file, send reporting, etc. */\r\n    for object in before.objects(myClass.self) {\r\n        let res = after.objects(myClass.self)\r\n        if (res.filter(\"primaryKey == %@\", object.primaryKey).first != nil) {\r\n             /* ...custom recovery logic... */\r\n        } else {\r\n             /* ...custom recovery logic... */\r\n        }\r\n    }\r\n    ```\r\n  - **Realm Obj-c implementation**: Both before and after client reset callbacks exist as properties on `RLMSyncConfiguration` and are set at initialization.\r\n    ```objective-c\r\n      RLMRealmConfiguration *config = [user configurationWithPartitionValue:partitionValue\r\n                                                            clientResetMode:RLMClientResetModeDiscardLocal\r\n                                                          notifyBeforeReset:beforeBlock\r\n                                                           notifyAfterReset:afterBlock];\r\n    ```\r\n    where `beforeBlock` is of type `RLMClientResetBeforeBlock`. And `afterBlock` is of type `RLMClientResetAfterBlock`.\r\n\r\n### Breaking Changes\r\n\r\n* Xcode 13.2 is no longer supported when building with Async/Await functions. Use Xcode 13.3 to build with Async/Await functionality.\r\n\r\n### Fixed\r\n\r\n* Adding a Realm Object to a `ObservedResults` or a collections using `StateRealmObject` that is managed by the same Realm would throw if the Object was frozen and not thawed before hand.\r\n* Setting a Realm Configuration for @ObservedResults using it's initializer would be overrode by the Realm Configuration stored in `.environment(\\.realmConfiguration, ...)` if they did not match ([Cocoa #7463](https://github.com/realm/realm-swift/issues/7463), since v10.6.0).\r\n* Fix searchable component filter overriding the initial filter on `@ObservedResults`, (since v10.23.0).\r\n* Comparing `Results`, `LinkingObjects` or `AnyRealmCollection` when using Realm via XCFramework would result in compile time errors ([Cocoa #7615](https://github.com/realm/realm-swift/issues/7615), since v10.21.0)\r\n* Opening an encrypted Realm while the keychain is locked on macOS would crash ([#7438](https://github.com/realm/realm-swift/issues/7438)).\r\n* Updating subscriptions while refreshing the access token would crash ([Core #5343](https://github.com/realm/realm-core/issues/5343), since v10.22.0)\r\n* Fix several race conditions in `SyncSession` related to setting `customRequestHeaders` while using the `SyncSession` on a different thread.\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 13.3.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 12.4-13.3.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from v11.12.0 to v11.13.0\r\n",
    "createdAt" : "2022-03-30T10:36:21+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84Dwswk",
    "owner" : "realm",
    "publishedAt" : "2022-03-30T10:41:56+09:00",
    "repository" : "realm-swift",
    "title" : "v10.25.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.25.0",
    "version" : "v10.25.0"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Improve performance of client reset with automatic recovery and converting top-level tables into embedded tables ([Core #5897](https://github.com/realm/realm-core/pull/5897)).\r\n* `Realm.Error` is now a typealias for `RLMError` rather than a manually-defined version of what the automatic bridging produces. This should have no effect on existing working code, but the manual definition was missing a few things supplied by the automatic bridging.\r\n* Some sync errors sent by the server include a link to the server-side logs associated with that error. This link is now exposed in the `serverLogURL` property on `SyncError` (or `RLMServerLogURLKey` userInfo field when using NSError).\r\n\r\n### Fixed\r\n\r\n* Many sync and app errors were reported using undocumented internal error codes and/or domains and could not be programmatically handled. Some notable things which now have public error codes instead of unstable internal ones:\r\n  - `Realm.Error.subscriptionFailed`: The server rejected a flexible sync subscription.\r\n  - `AppError.invalidPassword`: A login attempt failed due to a bad password.\r\n  - `AppError.accountNameInUse`: A registration attempt failed due to the account name being in use.\r\n  - `AppError.httpRequestFailed`: A HTTP request to Atlas App Services\r\n    completed with an error HTTP code. The failing code is available in the\r\n    `httpStatusCode` property.\r\n  - Many other less common error codes have been added to `AppError`.\r\n  - All sync errors other than `SyncError.clientResetError` reported incorrect\r\n    error codes.\r\n  (since v10.0.0).\r\n* `UserAPIKey.objectId` was incorrectly bridged to Swift as `RLMObjectId` to `ObjectId`. This may produce warnings about an unneccesary cast if you were previously casting it to the correct type (since v10.0.0).\r\n* Fixed an assertion failure when observing change notifications on a sectioned result, if the first modification was to a linked property that did not cause the state of the sections to change. ([Core #5912](https://github.com/realm/realm-core/issues/5912), since the introduction of sectioned results in v10.29.0)\r\n* Fix a use-after-free if the last external reference to an encrypted synchronized Realm was closed between when a client reset error was received and when the download of the new Realm began. ([Core #5949](https://github.com/realm/realm-core/pull/5949), since 10.28.4).\r\n* Fix an assertion failure during client reset with recovery when recovering a list operation on an embedded object that has a link column in the path prefix to the list from the top level object. ([Core #5957](https://github.com/realm/realm-core/issues/5957), since introduction of automatic recovery in v10.32.0).\r\n* Creating a write transaction which is rejected by the server due to it exceeding the maximum transaction size now results in a client reset error instead of synchronization breaking and becoming stuck forever ([Core #5209](https://github.com/realm/realm-core/issues/5209), since v10).\r\n* Opening an unencrypted file with an encryption key would sometimes report a misleading error message that indicated that the problem was something other than a decryption failure ([Core #5915](https://github.com/realm/realm-core/pull/5915), since 0.89.0).\r\n* Fix a rare deadlock which could occur when closing a synchronized Realm immediately after committing a write transaction when the sync worker thread has also just finished processing a changeset from the server ([Core #5948](https://github.com/realm/realm-core/pull/5948)).\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 14.0.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 13.1-14.1.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 12.9.0 to 12.11.0.\r\n",
    "createdAt" : "2022-10-26T13:27:28+09:00",
    "fetchedFromAPIAt" : "2022-10-27T09:57:41+09:00",
    "id" : "RE_kwDOAD24W84E0-lH",
    "owner" : "realm",
    "publishedAt" : "2022-10-26T13:32:04+09:00",
    "repository" : "realm-swift",
    "title" : "v10.32.1",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.32.1",
    "version" : "v10.32.1"
  },
  {
    "body" : "Switch to building the Carthage release with Xcode 14.1.\n\n### Fixed\n\n* Fix linker errors when building a release build with Xcode 14.1 when\n installing via SPM ([#7995](https://github.com/realm/realm-swift/issues/7995)).\n\n### Compatibility\n\n* Realm Studio: 11.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 14.1.\n* CocoaPods: 1.10 or later.\n* Xcode: 13.1-14.1.",
    "createdAt" : "2022-11-03T10:56:11+09:00",
    "fetchedFromAPIAt" : "2022-11-04T09:57:32+09:00",
    "id" : "RE_kwDOAD24W84E4bZU",
    "owner" : "realm",
    "publishedAt" : "2022-11-03T11:01:08+09:00",
    "repository" : "realm-swift",
    "title" : "v10.32.2",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.32.2",
    "version" : "v10.32.2"
  },
  {
    "body" : "### Fixed\r\n\r\n* Fix name lookup errors when importing Realm Swift built in library evolution mode (([#8014](https://github.com/realm/realm-swift/issues/8014)).\r\n* The prebuilt watchOS library in the objective-c release package was missing an arm64 slice. The Swift release package was uneffected ([PR #8016](https://github.com/realm/realm-swift/pull/8016)).\r\n* Fix issue where `RLMUserAPIKey.key`/`UserAPIKey.key` incorrectly returned the name of the API key instead of the key itself. ([#8021](https://github.com/realm/realm-swift/issues/8021), since v10.0.0)\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 14.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 13.1-14.1.",
    "createdAt" : "2022-11-11T09:53:47+09:00",
    "fetchedFromAPIAt" : "2022-11-12T09:54:01+09:00",
    "id" : "RE_kwDOAD24W84E7qiX",
    "owner" : "realm",
    "publishedAt" : "2022-11-11T09:59:15+09:00",
    "repository" : "realm-swift",
    "title" : "v10.32.3",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.32.3",
    "version" : "v10.32.3"
  },
  {
    "body" : "Xcode 13.1 is now the minimum supported version of Xcode, as Apple no longer allows submitting to the app store with Xcode 12.\r\n\r\n### Enhancements\r\n\r\n* Add Xcode 13.4 binaries to the release package.\r\n* Add Swift API for asynchronous transactions\r\n```swift\r\n    try? realm.writeAsync {\r\n        realm.create(SwiftStringObject.self, value: [\"string\"])\r\n    } onComplete: { error in\r\n        // optional handling on write complete\r\n    }\r\n\r\n    try? realm.beginAsyncWrite {\r\n        realm.create(SwiftStringObject.self, value: [\"string\"])\r\n        realm.commitAsyncWrite()\r\n    }\r\n\r\n    let asyncTransactionId = try? realm.beginAsyncWrite {\r\n        // ...\r\n    }\r\n    try! realm.cancelAsyncWrite(asyncTransactionId)\r\n```\r\n* Add Obj-C API for asynchronous transactions\r\n```\r\n   [realm asyncTransactionWithBlock:^{\r\n        [StringObject createInRealm:realm withValue:@[@\"string\"]];\r\n    } onComplete:^(NSError *error) {\r\n        // optional handling\r\n    }];\r\n\r\n    [realm beginAsyncWriteTransaction:^{\r\n        [StringObject createInRealm:realm withValue:@[@\"string\"]];\r\n        [realm commitAsyncWriteTransaction];\r\n    }];\r\n\r\n    RLMAsyncTransactionId asyncTransactionId = [realm beginAsyncWriteTransaction:^{\r\n        // ...\r\n    }];\r\n    [realm cancelAsyncTransaction:asyncTransactionId];\r\n```\r\n* Improve performance of opening a Realm with `objectClasses`/`objectTypes` set in the configuration.\r\n* Implement the Realm event recording API for reporting reads and writes on a Realm file to Atlas.\r\n\r\n### Fixed\r\n\r\n* Lower minimum OS version for `async` login and FunctionCallables to match the rest of the `async` functions. ([#7791]https://github.com/realm/realm-swift/issues/7791)\r\n* Consuming a RealmSwift XCFramework with library evolution enabled would give the error `'Failed to build module 'RealmSwift'; this SDK is not supported by the compiler'` when the XCFramework was built with an older XCode version and is then consumed with a later version. ([#7313](https://github.com/realm/realm-swift/issues/7313), since v3.18.0)\r\n* A data race would occur when opening a synchronized Realm with the client reset mode set to `discardLocal` on one thread at the same time as a client reset was being processed on another thread. This probably did not cause any functional problems in practice and the broken timing window was very tight (since 10.25.0).\r\n* If an async open of a Realm triggered a client reset, the callbacks for `discardLocal` could theoretically fail to be called due to a race condition. The timing for this was probably not possible to hit in practice (since 10.25.0).\r\n* Calling `[RLMRealm freeze]`/`Realm.freeze` on a Realm which had been created from `writeCopy` would not produce a frozen Realm. ([#7697](https://github.com/realm/realm-swift/issues/7697), since v5.0.0)\r\n* Using the dynamic subscript API on unmanaged objects before first opening a Realm or if `objectTypes` was set when opening a Realm would throw an exception ([#7786](https://github.com/realm/realm-swift/issues/7786)).\r\n* The sync client may have sent a corrupted upload cursor leading to a fatal error from the server due to an uninitialized variable. ([#5460](https://github.com/realm/realm-core/pull/5460), since v10.25.1)\r\n* Flexible sync would not correctly resume syncing if a bootstrap was interrupted ([#5466](https://github.com/realm/realm-core/pull/5466), since v10.21.1).\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 13.4.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 13.1-13.4.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from v11.15.0 to v11.17.0",
    "createdAt" : "2022-05-20T08:05:01+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84EA2n8",
    "owner" : "realm",
    "publishedAt" : "2022-05-20T08:10:25+09:00",
    "repository" : "realm-swift",
    "title" : "v10.26.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.26.0",
    "version" : "v10.26.0"
  },
  {
    "body" : "### Enhancements\r\n\r\n* `@AsyncOpen`/`@AutoOpen` property wrappers can be used with flexible sync.\r\n\r\n### Fixed\r\n\r\n* When installing via SPM, debug builds could potentially hit an assertion failure during flexible sync bootstrapping. ([Core #5527](https://github.com/realm/realm-core/pull/5527))\r\n* Flexible sync now only applies bootstrap data if the entire bootstrap is received. Previously orphaned objects could result from the read snapshot on the server changing. ([Core #5331](https://github.com/realm/realm-core/pull/5331))\r\n* Partially fix a performance regression in write performance introduced in v10.21.1. v10.21.1 fixed a case where a kernel panic or device's battery dying at the wrong point in a write transaction could potentially result in a corrected Realm file, but at the cost of a severe performance hit. This version adjusts how file synchronization is done to provide the same safety at a much smaller performance hit. ([#7740](https://github.com/realm/realm-swift/issues/7740)).\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later (but see note below).\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 13.4.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 13.1-13.4.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 11.17.0 to 12.0.0.\r\n* Bump the version number for the lockfile used for interprocess synchronization. This has no effect on persistent data, but means that versions of Realm which use pre-12.0.0 realm-core cannot open Realm files at the same time as they are opened by this version. Notably this includes Realm Studio, and v11.1.2 (the latest at the time of this release) cannot open Realm files which are simultaneously open in the simulator.",
    "createdAt" : "2022-05-27T12:45:11+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84EDVel",
    "owner" : "realm",
    "publishedAt" : "2022-05-27T12:50:15+09:00",
    "repository" : "realm-swift",
    "title" : "v10.27.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.27.0",
    "version" : "v10.27.0"
  },
  {
    "body" : "### Enhancements\n\n* Replace mentions of 'MongoDB Realm' with 'Atlas App Services' in the documentation and update appropriate links to documentation.\n* Allow adding a subscription querying for all documents of a type in swift for flexible sync.\n```\n   try await subscriptions.update {\n      subscriptions.append(QuerySubscription<SwiftPerson>(name: \"all_people\"))\n   }\n```\n* Add Combine API support for flexible sync beta.\n* Add an `initialSubscriptions` parameter when retrieving the flexible sync configuration from a user, \n  which allows to specify a subscription update block, to bootstrap a set of flexible sync subscriptions \n  when the Realm is first opened.\n  There is an additional optional parameter flag `rerunOnOpen`, which allows to run this initial \n  subscriptions on every app startup.\n\n```swift\n    let config = user.flexibleSyncConfiguration(initialSubscriptions: { subs in\n        subs.append(QuerySubscription<SwiftPerson>(name: \"people_10\") {\n            $0.age > 10\n        })\n    }, rerunOnOpen: true)\n    let realm = try Realm(configuration: config)\n```\n* The sync client error handler will report an error, with detailed info about which object caused it, when writing an object to a flexible sync Realm outside of any query subscription. ([#5528](https://github.com/realm/realm-core/pull/5528))\n* Adding an object to a flexible sync Realm for a type that is not within a query subscription will now throw an exception. ([#5488](https://github.com/realm/realm-core/pull/5488)).\n\n### Fixed\n\n* Flexible Sync query subscriptions will correctly complete when data is synced to the local Realm. ([#5553](https://github.com/realm/realm-core/pull/5553), since v12.0.0)\n\n### Breaking Changes\n\n* Rename `SyncSubscriptionSet.write` to `SyncSubscriptionSet.update` to avoid confusion with `Realm.write`.\n* Rename `SyncSubscription.update` to `SyncSubscription.updateQuery` to avoid confusion with `SyncSubscriptionSet.update`.\n* Rename `RLMSyncSubscriptionSet.write` to `RLMSyncSubscriptionSet.update` to align it with swift API.\n\n### Compatibility\n\n* Realm Studio: 11.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 13.4.\n* CocoaPods: 1.10 or later.\n* Xcode: 13.1-13.4.\n\n### Internal\n\n* Upgraded realm-core from 12.0.0 to 12.1.0.",
    "createdAt" : "2022-06-04T04:08:38+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84EFo7C",
    "owner" : "realm",
    "publishedAt" : "2022-06-04T04:14:05+09:00",
    "repository" : "realm-swift",
    "title" : "v10.28.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.28.0",
    "version" : "v10.28.0"
  },
  {
    "body" : "### Enhancements\n\n* Add support for Xcode 14. When building with Xcode 14, the minimum deployment\n  target is now iOS 11.\n\n### Compatibility\n\n* Realm Studio: 11.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 13.4.1.\n* CocoaPods: 1.10 or later.\n* Xcode: 13.1-14 beta 1.",
    "createdAt" : "2022-06-11T03:13:17+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84EH6SC",
    "owner" : "realm",
    "publishedAt" : "2022-06-11T03:18:09+09:00",
    "repository" : "realm-swift",
    "title" : "v10.28.1",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.28.1",
    "version" : "v10.28.1"
  },
  {
    "body" : "### Fixed\r\n\r\n* Using `seedFilePath` threw an exception if the Realm file being opened already existed ([#7840](https://github.com/realm/realm-swift/issues/7840), since v10.26.0).\r\n* The `intialSubscriptions` callback was invoked every time a Realm was opened regardless of the value of `rerunOnOpen` and if the Realm was already open on another thread (since v10.28.0).\r\n* Allow using `RLMSupport.Swift` from RealmSwift's Cocoapods ([#6886](https://github.com/realm/realm-swift/pull/6886)).\r\n* Fix a UBSan failure when mapping encrypted pages. Fixing this did not change the resulting assembly, so there were probably no functional problems resulting from this (since v5.0.0).\r\n* Improved performance of sync clients during integration of changesets with many small strings (totalling > 1024 bytes per changeset) on iOS 14, and devices which have restrictive or fragmented memory. ([Core #5614](https://github.com/realm/realm-core/issues/5614))\r\n* Fix a data race when opening a flexible sync Realm (since v10.28.0).\r\n* Add a missing backlink removal when assigning null or a non-link value to an `AnyRealmValue` property which previously linked to an object. This could have resulted in \"key not found\" exceptions or assertion failures such as `mixed.hpp:165: [realm-core-12.1.0] Assertion failed: m_type` when removing the destination link object. ([Core #5574](https://github.com/realm/realm-core/pull/5573), since the introduction of AnyRealmValue in v10.8.0)\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 12.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 13.4.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 13.1-14 beta 2.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 12.1.0 to 12.3.0.\r\n",
    "createdAt" : "2022-07-01T00:59:08+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84EO2f3",
    "owner" : "realm",
    "publishedAt" : "2022-07-01T02:12:05+09:00",
    "repository" : "realm-swift",
    "title" : "v10.28.2",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.28.2",
    "version" : "v10.28.2"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Greatly improve the performance of obtaining cached Realm instances in Swift when using a sync configuration.\r\n\r\n### Fixed\r\n\r\n* Add missing `initialSubscription` and `rerunOnOpen` to copyWithZone method on `RLMRealmConfiguration`. This resulted in incorrect values when using `RLMRealmConfiguration.defaultConfiguration`.\r\n* The sync error handler did not hold a strong reference to the sync session while dispatching the error from the worker thread to the main thread, resulting in the session passed to the error handler being invalid if there were no other remaining strong references elsewhere.\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 13.4.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 13.1-14 beta 3.\r\n",
    "createdAt" : "2022-07-28T04:22:50+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84EWdcT",
    "owner" : "realm",
    "publishedAt" : "2022-07-28T04:27:56+09:00",
    "repository" : "realm-swift",
    "title" : "v10.28.3",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.28.3",
    "version" : "v10.28.3"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Add support for building arm64 watchOS when installing Realm via CocoaPods.\r\n* Reduce the amount of virtual address space used ([Core #5645](https://github.com/realm/realm-core/pull/5645)).\r\n\r\n### Fixed\r\n\r\n* Fix some warnings when building with Xcode 14 ([Core #5577](https://github.com/realm/realm-core/pull/5577)).\r\n* Fix compilation failures on watchOS platforms which do not support thread-local storage. ([#7694](https://github.com/realm/realm-swift/issues/7694), [#7695](https://github.com/realm/realm-swift/issues/7695) since v10.21.1)\r\n* Fix a data race when committing a transaction while multiple threads are waiting to begin write transactions. This appears to not have caused any functional problems.\r\n* Fix a data race when writing audit events which could occur if the sync client thread was busy with other work when the event Realm was opened.\r\n* Fix some cases of running out of virtual address space (seen/reported as mmap failures) ([Core #5645](https://github.com/realm/realm-core/pull/5645)).\r\n* Audit event scopes containing only write events and no read events would occasionally throw a `BadVersion` exception when a write transaction was committed (since v10.26.0).\r\n* The client reset callbacks for the DiscardLocal mode would be passed invalid Realm instances if the callback was invoked at a point where the Realm was not otherwise open. ([Core #5654](https://github.com/realm/realm-core/pull/5654), since the introduction of DiscardLocal reset mode in v10.25.0)\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 13.4.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 13.1-14 beta 4.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 12.3.0 to 12.4.0.",
    "createdAt" : "2022-08-04T06:46:36+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84EYtos",
    "owner" : "realm",
    "publishedAt" : "2022-08-04T06:51:50+09:00",
    "repository" : "realm-swift",
    "title" : "v10.28.4",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.28.4",
    "version" : "v10.28.4"
  },
  {
    "body" : "### Enhancements\n\n* Improve performance of accessing `SubscriptionSet` properties when no writes\n  have been made to the Realm since the last access.\n\n### Fixed\n\n* A use-after-free could occur if a Realm with audit events enabled was\n  destroyed while processing an upload completion for the events Realm on a\n  different thread. ([Core PR #5714](https://github.com/realm/realm-core/pull/5714))\n* Opening a read-only synchronized Realm for the first time via asyncOpen did\n  not set the schema version, which could lead to `m_schema_version !=\n  ObjectStore::NotVersioned` assertion failures later on.\n\n### Compatibility\n\n* Realm Studio: 11.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 13.4.1.\n* CocoaPods: 1.10 or later.\n* Xcode: 13.1-14 beta 4.\n\n### Internal\n\n* Upgraded realm-core from 12.4.0 to 12.5.0",
    "createdAt" : "2022-08-10T06:58:21+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84Eac8O",
    "owner" : "realm",
    "publishedAt" : "2022-08-10T07:03:31+09:00",
    "repository" : "realm-swift",
    "title" : "v10.28.5",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.28.5",
    "version" : "v10.28.5"
  },
  {
    "body" : "### Fixed\n* Fixed an issue where having realm-swift as SPM sub-target dependency leads to missing symbols error during iOS archiving ([Core #7645](https://github.com/realm/realm-core/pull/7645)).\n\n### Compatibility\n* Realm Studio: 11.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 13.4.1.\n* CocoaPods: 1.10 or later.\n* Xcode: 13.1-14 beta 5.\n\n### Internal\n\n* Upgraded realm-core from 12.5.0 to 12.5.1",
    "createdAt" : "2022-08-19T19:45:43+09:00",
    "fetchedFromAPIAt" : "2022-08-22T09:56:31+09:00",
    "id" : "RE_kwDOAD24W84EdbFd",
    "owner" : "realm",
    "publishedAt" : "2022-08-19T19:50:56+09:00",
    "repository" : "realm-swift",
    "title" : "v10.28.6",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.28.6",
    "version" : "v10.28.6"
  },
  {
    "body" : "### Enhancements\n\n* Add prebuilt binaries for Xcode 14 to the release package.\n\n### Fixed\n\n* Fix archiving watchOS release builds with Xcode 14.\n\n### Compatibility\n\n* Realm Studio: 11.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 13.4.1.\n* CocoaPods: 1.10 or later.\n* Xcode: 13.1-14 beta 6.",
    "createdAt" : "2022-09-03T04:23:47+09:00",
    "fetchedFromAPIAt" : "2022-09-03T09:54:10+09:00",
    "id" : "RE_kwDOAD24W84EimFt",
    "owner" : "realm",
    "publishedAt" : "2022-09-03T04:29:23+09:00",
    "repository" : "realm-swift",
    "title" : "v10.28.7",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.28.7",
    "version" : "v10.28.7"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Add support for asymmetric sync. When a class inherits from `AsymmetricObject`, objects created are synced unidirectionally to the server and cannot be queried or read locally.\r\n\r\n```swift\r\n    class PersonObject: AsymmetricObject {\r\n       @Persisted(primaryKey: true) var _id: ObjectId\r\n       @Persisted var name: String\r\n       @Persisted var age: Int\r\n    }\r\n\r\n    try realm.write {\r\n       // This will create the object on the server but not locally.\r\n       realm.create(PersonObject.self, value: [\"_id\": ObjectId.generate(),\r\n                                               \"name\": \"Dylan\",\r\n                                               \"age\": 20])\r\n    }\r\n```\r\n* Add ability to section a collection which conforms to `RealmCollection`, `RLMCollection`. Collections can be sectioned by a unique key retrieved from a keyPath or a callback and will return an instance of `SectionedResults`/`RLMSectionedResults`. Each section in the collection will be an instance of `ResultsSection`/`RLMSection` which gives access to the elements corresponding to the section key. `SectionedResults`/`RLMSectionedResults` and `ResultsSection`/`RLMSection` have the ability to be observed.\r\n  ```swift\r\n  class DemoObject: Object {\r\n      @Persisted var title: String\r\n      @Persisted var date: Date\r\n      var firstLetter: String {\r\n          return title.first.map(String.init(_:)) ?? \"\"\r\n      }\r\n  }\r\n  var sectionedResults: SectionedResults<String, DemoObject>\r\n  // ...\r\n  sectionedResults = realm.objects(DemoObject.self)\r\n      .sectioned(by: \\.firstLetter, ascending: true)\r\n  ```\r\n* Add `@ObservedSectionedResults` for SwiftUI support. This property wrapper type retrieves sectioned results from a Realm using a keyPath or callback to determine the section key.\r\n  ```swift\r\n  struct DemoView: View {\r\n      @ObservedSectionedResults(DemoObject.self,\r\n                                sectionKeyPath: \\.firstLetter) var demoObjects\r\n\r\n      var body: some View {\r\n          VStack {\r\n              List {\r\n                  ForEach(demoObjects) { section in\r\n                      Section(header: Text(section.key)) {\r\n                          ForEach(section) { object in\r\n                              MyRowView(object: object)\r\n                          }\r\n                      }\r\n                  }\r\n              }\r\n          }\r\n      }\r\n  }\r\n  ```\r\n* Add automatic handing for changing top-level objects to embedded objects in migrations. Any objects of the now-embedded type which have zero incoming links are deleted, and objects with multiple incoming links are duplicated. This happens after the migration callback function completes, so there is no functional change if you already have migration logic which correctly handles this. ([Core #5737](https://github.com/realm/realm-core/pull/5737)).\r\n* Improve performance when a new Realm file connects to the server for the first time, especially when significant amounts of data has been written while offline. ([Core #5772](https://github.com/realm/realm-core/pull/5772))\r\n* Shift more of the work done on the sync worker thread out of the write transaction used to apply server changes, reducing how long it blocks other threads from writing. ([Core #5772](https://github.com/realm/realm-core/pull/5772))\r\n* Improve the performance of the sync changeset parser, which speeds up applying changesets from the server. ([Core #5772](https://github.com/realm/realm-core/pull/5772))\r\n\r\n### Fixed\r\n\r\n* Fix all of the UBSan failures hit by our tests. It is unclear if any of these manifested as visible bugs. ([Core #5665](https://github.com/realm/realm-core/pull/5665))\r\n* Upload completion callbacks were sometimes called before the final step of interally marking the upload as complete, which could result in calling `Realm.writeCopy()` from the completion callback failing due to there being unuploaded changes. ([Core #4865](https://github.com/realm/realm-core/issues/4865)).\r\n* Writing to a Realm stored on an exFAT drive threw the exception \"fcntl() with F_BARRIERFSYNC failed: Inappropriate ioctl for device\" when a write transaction needed to expand the file. ([Core #5789](https://github.com/realm/realm-core/issues/5789), since 10.27.0)\r\n* Syncing a Decimal128 with big significand could result in a crash. ([Core #5728](https://github.com/realm/realm-core/issues/5728))\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 13.4.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 13.1-14 RC.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 12.5.1 to 12.6.0\r\n",
    "createdAt" : "2022-09-10T10:40:29+09:00",
    "fetchedFromAPIAt" : "2022-09-11T09:59:29+09:00",
    "id" : "RE_kwDOAD24W84Ek4b9",
    "owner" : "realm",
    "publishedAt" : "2022-09-10T10:45:43+09:00",
    "repository" : "realm-swift",
    "title" : "v10.29.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.29.0",
    "version" : "v10.29.0"
  },
  {
    "body" : "### Fixed\r\n\r\n* Incoming links from `RealmAny` properties were not handled correctly when migrating an object type from top-level to embedded. `RealmAny` properties currently cannot link to embedded objects. ([Core #5796](https://github.com/realm/realm-core/pull/5796), since 10.8.0).\r\n* `Realm.refresh()` sometimes did not actually advance to the latest version. It attempted to be semi-non-blocking in a very confusing way which resulted in it sometimes advancing to a newer version that is not the latest version, and sometimes blocking until notifiers are ready so that it could advance to the latest version. This behavior was undocumented and didn't work correctly, so it now always blocks if needed to advance to the latest version. ([#7625](https://github.com/realm/realm-swift/issues/7625), since v0.98.0).\r\n* Fix the most common cause of thread priority inversions when performing writes on the main thread. If beginning the write transaction has to wait for the background notification calculations to complete, that wait is now done in a QoS-aware way. ([#7902](https://github.com/realm/realm-swift/issues/7902))\r\n* Subscribing to link properties in a flexible sync Realm did not work due to a mismatch between what the client sent and what the server needed. ([Core #5409](https://github.com/realm/realm-core/issues/5409))\r\n* Attempting to use `AsymmetricObject` with partition-based sync now reports a sensible error much earlier in the process. Asymmetric sync requires using flexible sync. ([Core #5691](https://github.com/realm/realm-core/issues/5691), since 10.29.0).\r\n* Case-insensitive but diacritic-sensitive queries would crash on 4-byte UTF-8 characters ([Core #5825](https://github.com/realm/realm-core/issues/5825), since v2.2.0)\r\n* Accented characters are now handled by case-insensitive but diacritic-sensitive queries. ([Core #5825](https://github.com/realm/realm-core/issues/5825), since v2.2.0)\r\n\r\n### Breaking Changes\r\n\r\n* `-[RLMASLoginDelegate authenticationDidCompleteWithError:]` has been renamed to `-[RLMASLoginDelegate authenticationDidFailWithError:]` to comply with new app store requirements. This only effects the obj-c API. ([#7945](https://github.com/realm/realm-swift/issues/7945))\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 13.4.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 13.1 - 14.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 12.6.0 to 12.7.0\r\n",
    "createdAt" : "2022-09-21T06:03:34+09:00",
    "fetchedFromAPIAt" : "2022-09-21T10:02:34+09:00",
    "id" : "RE_kwDOAD24W84EoaQs",
    "owner" : "realm",
    "publishedAt" : "2022-09-21T06:09:29+09:00",
    "repository" : "realm-swift",
    "title" : "v10.30.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.30.0",
    "version" : "v10.30.0"
  },
  {
    "body" : "The prebuilt binary for Carthage is now build with Xcode 14.0.1.\r\n\r\n### Enhancements\r\n\r\n* Cut the runtime of aggregate operations on large dictionaries in half ([Core #5864](https://github.com/realm/realm-core/pull/5864)).\r\n* Improve performance of aggregate operations on collections of objects by 2x to 10x ([Core #5864](https://github.com/realm/realm-core/pull/5864)). Greatly improve the performance of sorting or distincting a Dictionary's keys or values. The most expensive operation is now performed O(log N) rather than O(N log N) times, and large Dictionaries can see upwards of 99% reduction in time to sort. ([Core #5166](https://github.com/realm/realm-core/pulls/5166))\r\n* Add support for changing the deployment location for Atlas Apps. Previously this was assumed to be immutable ([Core #5648](https://github.com/realm/realm-core/issues/5648)).\r\n* The sync client will now yield the write lock to other threads which are waiting to perform a write transaction even if it still has remaining work to do, rather than always applying all changesets received from the server even when other threads are trying to write. ([Core #5844](https://github.com/realm/realm-core/pull/5844)).\r\n* The sync client no longer writes an unused temporary copy of the changesets received from the server to the Realm file ([Core #5844](https://github.com/realm/realm-core/pull/5844)).\r\n\r\n### Fixed\r\n\r\n* Setting a `List` property with `Results` no longer throws an unrecognized selector exception (since 10.8.0-beta.2)\r\n* `RLMProgressNotificationToken` and `ProgressNotificationToken` now hold a strong reference to the sync session, keeping it alive until the token is deallocated or invalidated, as the other notification tokens do. ([#7831](https://github.com/realm/realm-swift/issues/7831), since v2.3.0).\r\n* Results permitted some nonsensical aggregate operations on column types which do not make sense to aggregate, giving garbage results rather than reporting an error ([Core #5876](https://github.com/realm/realm-core/pull/5876), since v5.0.0).\r\n* Upserting a document in a Mongo collection would crash if the document's id type was anything other than ObjectId (since v10.0.0).\r\n* Fix a use-after-free when a sync session is closed and the app is destroyed at the same time ([Core #5752](https://github.com/realm/realm-core/issues/5752), since v10.19.0).\r\n\r\n### Deprecations\r\n\r\n* `RLMUpdateResult.objectId` has been deprecated in favor of `RLMUpdateResult.documentId` to support reporting document ids which are not object ids.\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 14.0.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 13.1-14.1.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 12.7.0 to 12.9.0\r\n",
    "createdAt" : "2022-10-06T05:09:52+09:00",
    "fetchedFromAPIAt" : "2022-10-06T10:03:42+09:00",
    "id" : "RE_kwDOAD24W84EtvCs",
    "owner" : "realm",
    "publishedAt" : "2022-10-06T05:14:13+09:00",
    "repository" : "realm-swift",
    "title" : "v10.31.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.31.0",
    "version" : "v10.31.0"
  },
  {
    "body" : "### Enhancements\n\n* Add `.recoverUnsyncedChanges` (`RLMClientResetModeRecoverUnsyncedChanges`) and\n`.recoverOrDiscardUnsyncedChanges` (`RLMClientResetModeRecoverOrDiscardUnsyncedChanges`) behaviors to `ClientResetMode` (`RLMClientResetMode`).\n  - The newly added recover modes function by downloading a realm which reflects the latest\n    state of the server after a client reset. A recovery process is run locally in an\n    attempt to integrate the server state with any local changes from before the\n    client reset occurred.\n    The changes are integrated with the following rules:\n    1. Objects created locally that were not synced before client reset, will be integrated.\n    2. If an object has been deleted on the server, but was modified on the client, the delete takes precedence and the update is discarded.\n    3. If an object was deleted on the client, but not the server, then the client delete instruction is applied.\n    4. In the case of conflicting updates to the same field, the client update is applied.\n  - The client reset process will fallback to `ClientResetMode.discardUnsyncedChanges` if the recovery process fails in `.recoverOrDiscardUnsyncedChanges`.\n  - The client reset process will fallback to `ClientResetMode.manual` if the recovery process fails in `.recoverUnsyncedChanges`.\n  - The two new swift recovery modes support client reset callbacks: `.recoverUnsyncedChanges(beforeReset: ((Realm) -> Void)? = nil, afterReset: ((Realm, Realm) -> Void)? = nil)`.\n  - The two new Obj-C recovery modes support client reset callbacks in `notifyBeforeReset`\n    and `notifyAfterReset`for both `[RLMUser configurationWithPartitionValue]` and `[RLMUser flexibleSyncConfigurationWithClientResetMode]`\n    For more detail on client reset callbacks, see `ClientResetMode`, `RLMClientResetBeforeBlock`,\n    `RLMClientResetAfterBlock`, and the 10.25.0 changelog entry.\n* Add two new additional interfaces to define a manual client reset handler:\n  - Add a manual callback handler to `ClientResetMode.manual` -> `ClientResetMode.manual(ErrorReportingBlock? = nil)`.\n  - Add the `RLMSyncConfiguration.manualClientResetHandler` property (type `RLMSyncErrorReportingBlock`).\n  - These error reporting blocks are invoked in the event of a `RLMSyncErrorClientResetError`.\n  - See `ErrorReportingBlock` (`RLMSyncErrorReportingBlock`), and `ClientResetInfo` for more detail.\n  - Previously, manual client resets were handled only through the `SyncManager.ErrorHandler`. You have the\n    option, but not the requirement, to define manual reset handler in these interfaces.\n    Otherwise, the `SyncManager.ErrorHandler` is still invoked during the manual client reset process.\n  - These new interfaces are only invoked during a `RLMSyncErrorClientResetError`. All other sync errors\n    are still handled in the `SyncManager.ErrorHandler`.\n  - See 'Breaking Changes' for information how these interfaces interact with an already existing\n    `SyncManager.ErrorHandler`.\n\n### Breaking Changes\n\n* The default `clientResetMode` (`RLMClientResetMode`) is switched from `.manual` (`RLMClientResetModeManual`)\n  to `.recoverUnsyncedChanges` (`RLMClientResetModeRecoverUnsyncedChanges`).\n  - If you are currently using `.manual` and continue to do so, the only change\n    you must explicitly make is designating manual mode in\n    your `Realm.Configuration.SyncConfiguration`s, since they will now default to `.recoverUnsyncedChanges`.\n  - You may choose to define your manual client reset handler in the newly\n    introduced `manual(ErrorReportingBlock? = nil)`\n    or `RLMSyncConfiguration.manualClientResetHandler`, but this is not required.\n    The `SyncManager.errorHandler` will still be invoked during a client reset if\n    no callback is passed into these new interfaces.\n\n### Deprecations\n\n* `ClientResetMode.discardLocal` is deprecated in favor of `ClientResetMode.discardUnsyncedChanges`.\n  The reasoning is that the name better reflects the effect of this reset mode. There is no actual\n  difference in behavior.\n\n### Compatibility\n\n* Realm Studio: 11.0.0 or later.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 14.0.1.\n* CocoaPods: 1.10 or later.\n* Xcode: 13.1-14.1.",
    "createdAt" : "2022-10-11T02:35:32+09:00",
    "fetchedFromAPIAt" : "2022-10-11T09:59:43+09:00",
    "id" : "RE_kwDOAD24W84EvGex",
    "owner" : "realm",
    "publishedAt" : "2022-10-11T02:45:18+09:00",
    "repository" : "realm-swift",
    "title" : "v10.32.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.32.0",
    "version" : "v10.32.0"
  },
  {
    "body" : "### Enhancements\r\n\r\n* Flexible sync subscription state will change to `SyncSubscriptionState.pending` (`RLMSyncSubscriptionStatePending`) while waiting for the server to have sent all pending history after a bootstrap and before marking a subscription as Complete. ([#5795](https://github.com/realm/realm-core/pull/5795))\r\n* Add custom column names API, which allows to set a different column name in the realm from the one used in your object declaration.\r\n  ```swift\r\n  class Person: Object {\r\n      @Persisted var firstName: String\r\n      @Persisted var birthDate: Date\r\n      @Persisted var age: Int\r\n\r\n      override class public func propertiesMapping() -> [String: String] {\r\n          [\"firstName\": \"first_name\",\r\n           \"birthDate\": \"birth_date\"]\r\n      }\r\n  }\r\n  ```\r\n  This is very helpful in cases where you want to name a property differently from your `Device Sync` JSON schema. This API is only available for old and modern object declaration syntax on the `RealmSwift` SDK.\r\n* Flexible sync bootstraps now apply 1MB of changesets per write transaction rather than applying all of them in a single write transaction. ([Core PR #5999](https://github.com/realm/realm-core/pull/5999)).\r\n\r\n### Fixed\r\n\r\n* Fix a race condition which could result in \"operation cancelled\" errors being delivered to async open callbacks rather than the actual sync error which caused things to fail ([Core PR #5968](https://github.com/realm/realm-core/pull/5968), since the introduction of async open).\r\n* Fix database corruption issues which could happen if an application was terminated at a certain point in the process of comitting a write transaciton. ([Core PR #5993](https://github.com/realm/realm-core/pull/5993), since v10.21.1)\r\n* `@AsyncOpen` and `@AutoOpen` would begin and then cancel a second async open operation ([PR #8038](https://github.com/realm/realm-swift/pull/8038), since v10.12.0).\r\n* Changing the search text when using the searchable SwiftUI extension would trigger multiple updates on the View for each change ([PR #8038](https://github.com/realm/realm-swift/pull/8038), since v10.19.0).\r\n* Changing the filter or search properties of an `@ObservedResults` or `@ObservedSectionedResults` would trigger up to three updates on the View ([PR #8038](https://github.com/realm/realm-swift/pull/8038), since v10.6.0).\r\n* Fetching a user's profile while the user logs out would result in an assertion failure. ([Core PR #6017](https://github.com/realm/realm-core/issues/5571), since v10.8.0)\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 14.1.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 13.1-14.1.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 12.11.0 to 12.13.0\r\n",
    "createdAt" : "2022-12-02T08:12:39+09:00",
    "fetchedFromAPIAt" : "2022-12-02T09:43:30+09:00",
    "id" : "RE_kwDOAD24W84FDV1S",
    "owner" : "realm",
    "publishedAt" : "2022-12-02T08:17:30+09:00",
    "repository" : "realm-swift",
    "title" : "v10.33.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.33.0",
    "version" : "v10.33.0"
  },
  {
    "body" : "Swift 5.5 is no longer supported. Swift 5.6 (Xcode 13.3) is now the minimum supported version.\r\n\r\nThe prebuilt binary for Carthage is now build with Xcode 14.2.\r\n\r\n### Enhancements\r\n\r\n* Improve performance of creating Projection objects and of change notifications on projections ([PR #8050](https://github.com/realm/realm-swift/pull/8050)).\r\n* Allow initialising any sync configuration with `cancelAsyncOpenOnNonFatalErrors`.\r\n* Improve performance of Combine value publishers which do not use the object/collection changesets a little.\r\n* All public types have been audited for sendability and are now marked as Sendable when applicable. A few types which were incidentally not thread-safe but make sense to use from multiple threads are now thread-safe.\r\n* Add support for building Realm with strict concurrency checking enabled.\r\n\r\n### Fixed\r\n\r\n* Fix bad memory access exception that can occur when watching change streams. [PR #8039](https://github.com/realm/realm-swift/pull/8039).\r\n* Object change notifications on projections only included the first projected property for each source property ([PR #8050](https://github.com/realm/realm-swift/pull/8050), since v10.21.0).\r\n* `@AutoOpen` failed to open flexible sync Realms while offline ([#7986](https://github.com/realm/realm-swift/issues/7986), since v10.27.0).\r\n* Fix \"Publishing changes from within view updates is not allowed\" warnings when using `@ObservedResults` or `@ObservedSectionedResults` ([#7908](https://github.com/realm/realm-swift/issues/7908)).\r\n* Fix \"Publishing changes from within view updates is not allowed\" warnings when using `@AutoOpen` or `@AsyncOpen`. ([#7908](https://github.com/realm/realm-swift/issues/7908)).\r\n* Defer `Realm.asyncOpen` execution on `@AsyncOpen` and `@AutoOpen` property wrappers until all the environment values are set. This will guarantee the configuration and partition value are set set before opening the realm. ([#7931](https://github.com/realm/realm-swift/issues/7931), since v10.12.0).\r\n* `@ObservedResults.remove()` could delete the wrong object if a write on a background thread which changed the index of the object being removed occurred at a very specific time (since v10.6.0).\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 11.0.0 - 12.0.0. 13.0.0 is currently incompatible.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 14.2.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 13.3-14.2.",
    "createdAt" : "2023-01-14T09:17:52+09:00",
    "fetchedFromAPIAt" : "2023-01-14T09:42:11+09:00",
    "id" : "RE_kwDOAD24W84FTRvp",
    "owner" : "realm",
    "publishedAt" : "2023-01-14T09:21:07+09:00",
    "repository" : "realm-swift",
    "title" : "v10.34.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.34.0",
    "version" : "v10.34.0"
  },
  {
    "body" : "### Fixed\n\n* Add some missing `@preconcurrency` annotations which lead to build failures\n  with Xcode 14.0 when importing via SPM or CocoaPods\n  ([#8104](https://github.com/realm/realm-swift/issues/8104), since v10.34.0).\n\n### Compatibility\n\n* Realm Studio: 11.0.0 - 12.0.0.\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\n* Carthage release for Swift is built with Xcode 14.2.\n* CocoaPods: 1.10 or later.\n* Xcode: 13.3-14.2.",
    "createdAt" : "2023-01-21T07:06:28+09:00",
    "fetchedFromAPIAt" : "2023-01-21T09:44:14+09:00",
    "id" : "RE_kwDOAD24W84FWe-H",
    "owner" : "realm",
    "publishedAt" : "2023-01-21T07:10:12+09:00",
    "repository" : "realm-swift",
    "title" : "v10.34.1",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.34.1",
    "version" : "v10.34.1"
  },
  {
    "body" : "This version bumps the Realm file format version to 23. Realm files written by this version cannot be read by older versions of Realm.\r\n\r\n### Enhancements\r\n\r\n* The Realm file is now automatically shrunk if the file size is larger than needed to store all of the data. ([Core PR #5755](https://github.com/realm/realm-core/pull/5755))\r\n* Pinning old versions (either with frozen Realms or with Realms on background threads that simply don't get refreshed) now only prevents overwriting the data needed by that version, rather than the data needed by that version and all later versions. In addition, frozen Realms no longer pin the transaction logs used to drive change notifications. This mostly eliminates the file size growth caused by pinning versions. ([Core PR #5440](https://github.com/realm/realm-core/pull/5440))\r\n* Rework how Dictionaries/Maps are stored in the Realm file. The new design uses less space and is typically significantly faster. This changes the iteration order of Maps, so any code relying on that may be broken. We continue to make no guarantees about iteration order on Maps ([Core #5764](https://github.com/realm/realm-core/issues/5764)).\r\n* Improve performance of freezing Realms ([Core PR #6211](https://github.com/realm/realm-core/pull/6211)).\r\n\r\n### Fixed\r\n\r\n* Fix a crash when using client reset with recovery and flexible sync with a single subscription ([Core #6070](https://github.com/realm/realm-core/issues/6070), since v10.28.2)\r\n* Encrypted Realm files could not be opened on devices with a larger page size than the one which originally wrote the file. ([#8030](https://github.com/realm/realm-swift/issues/8030), since v10.32.1)\r\n* Creating multiple flexible sync subscriptions at once could hit an assertion failure if the server reported an error for any of them other than the last one ([Core #6038](https://github.com/realm/realm-core/issues/6038), since v10.21.1).\r\n* `Set<AnyRealmValue>` and `List<AnyRealmValue>` considered a string and binary data containing that string encoded as UTF-8 to be equivalent. This could result in a List entry not changing type on assignment and for the client be inconsistent with the server if a string and some binary data with equivalent content was inserted from Atlas. ([Core #4860](https://github.com/realm/realm-core/issues/4860) and [Core #6201](https://github.com/realm/realm-core/issues/6201), since v10.8.0)\r\n* Querying for NaN on Decimal128 properties did not match any objects ([Core #6182](https://github.com/realm/realm-core/issues/6182), since v10.8.0).\r\n* When client reset with recovery is used and the recovery did not need to make any changes to the local Realm, the sync client could incorrectly think the recovery failed and report the error \"A fatal error occured during client reset: 'A previous 'Recovery' mode reset from <timestamp> did not succeed, giving up on 'Recovery' mode to prevent a cycle'\". ([Core #6195](https://github.com/realm/realm-core/issues/6195), since v10.32.0)\r\n* Writing to newly in-view objects while a flexible sync bootstrap was in progress would not synchronize those changes to the server ([Core #5804](https://github.com/realm/realm-core/issues/5804), since v10.21.1).\r\n* If a client reset with recovery or discard local was interrupted while the \"fresh\" realm was being downloaded, the sync client could crash with a MultpleSyncAgents exception ([Core #6217](https://github.com/realm/realm-core/issues/6217), since v10.25.0).\r\n* Sharing Realm files between a Catalyst app and Realm Studio did not properly synchronize access to the Realm file ([Core #6258](https://github.com/realm/realm-core/pull/6258), since v10.0.0).\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 13.0.2 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 14.2.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 13.3-14.2.\r\n\r\n### Internal\r\n\r\n* Upgraded realm-core from 12.13.0 to 13.4.0\r\n",
    "createdAt" : "2023-02-08T05:25:52+09:00",
    "fetchedFromAPIAt" : "2023-02-11T23:53:40+09:00",
    "id" : "RE_kwDOAD24W84FdpQn",
    "owner" : "realm",
    "publishedAt" : "2023-02-08T05:29:10+09:00",
    "repository" : "realm-swift",
    "title" : "v10.35.0",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.35.0",
    "version" : "v10.35.0"
  },
  {
    "body" : "### Fixed\r\n\r\n* Client reset with recovery would crash if a client reset occurred the very first time the Realm was opened with async open. The client reset callbacks are now not called if the Realm had never been opened before ([PR #8125](https://github.com/realm/realm-swift/pull/8125), since 10.32.0).\r\n\r\n### Compatibility\r\n\r\n* Realm Studio: 13.0.2 or later.\r\n* APIs are backwards compatible with all previous releases in the 10.x.y series.\r\n* Carthage release for Swift is built with Xcode 14.2.\r\n* CocoaPods: 1.10 or later.\r\n* Xcode: 13.3-14.2.",
    "createdAt" : "2023-02-11T08:26:22+09:00",
    "fetchedFromAPIAt" : "2023-02-11T23:53:40+09:00",
    "id" : "RE_kwDOAD24W84FfShc",
    "owner" : "realm",
    "publishedAt" : "2023-02-11T08:29:49+09:00",
    "repository" : "realm-swift",
    "title" : "v10.35.1",
    "url" : "https://github.com/realm/realm-swift/releases/tag/v10.35.1",
    "version" : "v10.35.1"
  }
]