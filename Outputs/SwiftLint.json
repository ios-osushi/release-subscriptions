[
  {
    "body" : "This is the last release to support building with Swift 5.0.x.\r\n\r\n#### Breaking\r\n\r\n* None.\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* Add configuration options to the `unused_import` rule to require\r\n  explicit import statements for each module referenced in a source\r\n  file (`require_explicit_imports`). When this setting is enabled,\r\n  an `allowed_transitive_imports` setting may also be specified to allow\r\n  a mapping of modules to transitively imported modules. See PR for\r\n  details: https://github.com/realm/SwiftLint/pull/3123  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3116](https://github.com/realm/SwiftLint/issues/3116)\r\n\r\n#### Bug Fixes\r\n\r\n* Fix more false positives in `implicit_getter` rule in extensions when using\r\n  Swift 5.2.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#3149](https://github.com/realm/SwiftLint/issues/3149)\r\n\r\n* Fix false positives in `redundant_objc_attribute` rule in extensions when \r\n  using Swift 5.2.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n\r\n* Fix false positives in `attributes` rule when using `rethrows` using\r\n  Swift 5.2.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Fix false positives in `valid_ibinspectable` rule when defining inspectable\r\n  properties in class extensions with computed properties using Swift 5.2.  \r\n  [JP Simard](https://github.com/jpsim)",
    "createdAt" : "2020-04-04T12:22:50+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTI1MTkzMjE3",
    "owner" : "realm",
    "publishedAt" : "2020-04-04T12:23:38+09:00",
    "repository" : "SwiftLint",
    "title" : "0.39.2: Stay Home",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.39.2",
    "version" : "0.39.2"
  },
  {
    "body" : "#### Breaking\r\n\r\n* SwiftLint now requires Swift 5.1 or higher to build.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Improve compile commands json file validation. If you previously\r\n  provided invalid files or arguments, the command will now abort.  \r\n  [Keith Smiley](https://github.com/keith)\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* JUnit reporter for GitLab artifact:report:junit with better representation of\r\n  found issues.  \r\n  [krin-san](https://github.com/krin-san)\r\n  [#3177](https://github.com/realm/SwiftLint/pull/3177)\r\n\r\n* Add opt-in `ibinspectable_in_extension` rule to lint against `@IBInspectable`\r\n  properties in `extensions`.  \r\n  [Keith Smiley](https://github.com/keith)\r\n\r\n* Add `computed_accessors_order` rule to validate the order of `get` and `set`\r\n  accessors in computed properties and subscripts.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#3158](https://github.com/realm/SwiftLint/issues/3158)\r\n\r\n* Extend `empty_enum_arguments` rule to support `if case` and `guard case`.  \r\n  [Zsolt Kov√°cs](https://github.com/lordzsolt)\r\n  [#3103](https://github.com/realm/SwiftLint/issues/3103)\r\n\r\n* Add `prefer_zero_over_explicit_init` opt-in rule to enforce using\r\n  `.zero` instead of calling constructor with zero arguments\r\n  (e.g. `CGPoint(x: 0, y: 0)`) when using CoreGraphics types.  \r\n  [Anton Nazarov](https://github.com/MortyMerr)\r\n  [#3190](https://github.com/realm/SwiftLint/issues/3190)  \r\n\r\n* Add `swiftlint docs` command to easily open online documentation.  \r\n  [417-72KI](https://github.com/417-72KI)\r\n\r\n* Add `unneeded_notification_center_removal` rule to warn against using\r\n  `NotificationCenter.removeObserver(self)` in `deinit` since it's not required\r\n  after iOS 9/macOS 10.11.  \r\n  [Amzd](https://github.com/Amzd)\r\n  [#2755](https://github.com/realm/SwiftLint/issues/2755)  \r\n\r\n#### Bug Fixes\r\n\r\n* Fix UnusedImportRule breaking transitive imports.  \r\n  [keith](https://github.com/keith)\r\n\r\n* Fix severity level configuration for `duplicate_imports`.  \r\n  [Yusuke Goto](https://github.com/yusukegoto)\r\n\r\n* Fixes false positives for `multiline_parameters_brackets` and\r\n  `multiline_arguments_brackets`.  \r\n  [Noah Gilmore](https://github.com/noahsark769)\r\n  [#3167](https://github.com/realm/SwiftLint/issues/3167)\r\n\r\n* Fix conflict of 'opening_brace' with 'implicit_return' for functions\r\n  implicitly returning a closure.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#3034](https://github.com/realm/SwiftLint/issues/3034)\r\n\r\n* Fix false positive on `switch_case_on_newline` rule with `do/catch`\r\n  statements when using Swift 5.3.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#3253](https://github.com/realm/SwiftLint/issues/3253)\r\n\r\n* Fix false positive uppercase enum case in\r\n  `raw_value_for_camel_cased_codable_enum` rule.  \r\n  [Teameh](https://github.com/teameh)\r\n\r\n* Fix false positive in `no_space_in_method_call` rule with multiple trailing\r\n  closures (Swift 5.3).  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#3259](https://github.com/realm/SwiftLint/issues/3259)\r\n\r\n* Fix false negative in `explicit_acl` rule when using `extension` with\r\n  Swift 5.2+.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#3186](https://github.com/realm/SwiftLint/issues/3186)\r\n\r\n* `closure_parameter_position` now triggers in closures that are not inside a\r\n  function call and also validates captured variables.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#3225](https://github.com/realm/SwiftLint/issues/3225)\r\n\r\n* Fix some cases where the output would be incomplete when running \r\n  SwiftLint on Linux.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#3214](https://github.com/realm/SwiftLint/issues/3214)\r\n  \r\n* `compiler_protocol_init` now triggers on `IndexSet(arrayLiteral:)`.  \r\n  [Janak Shah](https://github.com/janakshah)\r\n  [#3284](https://github.com/realm/SwiftLint/pull/3284)\r\n\r\n* Fix false positives in `extension_access_modifier` rule when using\r\n  Swift 5.2.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#3150](https://github.com/realm/SwiftLint/issues/3150)",
    "createdAt" : "2020-08-11T00:23:58+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTI5NTE3NTc1",
    "owner" : "realm",
    "publishedAt" : "2020-08-11T00:32:06+09:00",
    "repository" : "SwiftLint",
    "title" : "0.40.0: Washable Mask",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.40.0",
    "version" : "0.40.0"
  },
  {
    "body" : "#### Breaking\r\n\r\n* The new rules introduced in 0.39.0 that depend on SwiftSyntax have been\r\n  temporarily removed as we work out release packaging issues.\r\n    * `prohibited_nan_comparison`\r\n    * `return_value_from_void_function`\r\n    * `tuple_pattern`\r\n    * `void_function_in_ternary`  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3105](https://github.com/realm/SwiftLint/issues/3105)\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* None.\r\n\r\n#### Bug Fixes\r\n\r\n* Fix unused_import rule reported locations and corrections when\r\n  multiple `@testable` imports are involved.  \r\n  [JP Simard](https://github.com/jpsim)",
    "createdAt" : "2020-02-12T06:43:28+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTIzNTg1MDI0",
    "owner" : "realm",
    "publishedAt" : "2020-02-12T06:50:54+09:00",
    "repository" : "SwiftLint",
    "title" : "0.39.1: The Laundromat has a Rotating Door",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.39.1",
    "version" : "0.39.1"
  },
  {
    "body" : "This is a prerelease version. It won't be published to Homebrew or CocoaPods. But there are many other ways to install:\r\n\r\n* Downloading the attached `SwiftLint.pkg` installer and launching it\r\n* Downloading the attached `portable_swiftlint.zip` archive, extracting it and moving the binary from `portable_swiftlint/swiftlint` to `/usr/local/bin` or elsewhere in your `PATH`\r\n* Using [Mint](https://github.com/yonaskolb/Mint): `mint install realm/SwiftLint@0.42.0-rc.1`\r\n* Cloning and building from source: `git clone https://github.com/realm/SwiftLint.git && cd SwiftLint && git checkout 0.42.0-rc.1 && make install`\r\n\r\n---\r\n\r\n#### Breaking\r\n\r\n* SwiftLint now requires Swift 5.2 or higher to build.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* SwiftLintFramework can no longer be integrated as a Carthage\r\n  depdendency.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3412](https://github.com/realm/SwiftLint/issues/3412)\r\n\r\n* `SwiftLint.xcworkspace` and `SwiftLint.xcproject` have been completely\r\n  removed. You can still use Xcode to develop SwiftLint by opening it as\r\n  a Swift Package by typing `xed .` or `xed Package.swift` from your\r\n  shell.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3412](https://github.com/realm/SwiftLint/issues/3412)\r\n\r\n* Renamed `statement_level` to `function_level` in `nesting` rule\r\n  configuration.  \r\n  [Skoti](https://github.com/Skoti)\r\n\r\n* Separated `type_level` and `function_level` counting in `nesting`\r\n  rule.  \r\n  [Skoti](https://github.com/Skoti)\r\n  [#1151](https://github.com/realm/SwiftLint/issues/1151)\r\n\r\n* `function_level` in `nesting` rule defaults to 2 levels.  \r\n  [Skoti](https://github.com/Skoti)\r\n\r\n* Added `check_nesting_in_closures_and_statements` in `nesting` rule to\r\n  search for nested types and functions within closures and statements.\r\n  Defaults to `true`.  \r\n  [Skoti](https://github.com/Skoti)\r\n\r\n* Renamed `OverridenSuperCallConfiguration` to\r\n  `OverriddenSuperCallConfiguration`.  \r\n  [Bryan Ricker](https://github.com/bricker)\r\n  [#3426](https://github.com/realm/SwiftLint/pull/3426)\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* Don't report `unavailable_function` violations for functions returning\r\n  `Never`.  \r\n  [Artem Garmash](https://github.com/agarmash)\r\n  [#3286](https://github.com/realm/SwiftLint/issues/3286)\r\n\r\n* Added `always_allow_one_type_in_functions` option in `nesting` rule\r\n  configuration. Defaults to `false`. This allows to nest one type\r\n  within a function even if breaking the maximum `type_level`.  \r\n  [Skoti](https://github.com/Skoti)\r\n  [#1151](https://github.com/realm/SwiftLint/issues/1151)\r\n  \r\n* Add option to specify a `child_config` / `parent_config` file\r\n  (local or remote) in any SwiftLint configuration file.\r\n  Allow passing multiple configuration files via the command line.\r\n  Improve documentation for multiple configuration files.  \r\n  [Frederick Pietschmann](https://github.com/fredpi)\r\n  [#1352](https://github.com/realm/SwiftLint/issues/1352)\r\n\r\n* Add an `always_keep_imports` configuration option for the\r\n  `unused_import` rule.  \r\n  [Keith Smiley](https://github.com/keith)\r\n\r\n* Add `comment_spacing` rule.  \r\n  [Noah Gilmore](https://github.com/noahsark769)\r\n  [#3233](https://github.com/realm/SwiftLint/issues/3233)\r\n\r\n* Add `codeclimate` reporter to generate JSON reports in codeclimate\r\n  format. Could be used for GitLab Code Quality MR Widget.  \r\n  [jkroepke](https://github.com/jkroepke)\r\n  [#3424](https://github.com/realm/SwiftLint/issues/3424)\r\n\r\n* Add `non_private_xctest_member` rule.  \r\n  [Keith Smiley](https://github.com/keith)\r\n\r\n* Add an `override_allowed_terms` configuration parameter to the\r\n  `inclusive_language` rule, with a default value of `mastercard`.  \r\n  [Dalton Claybrook](https://github.com/daltonclaybrook)\r\n  [#3415](https://github.com/realm/SwiftLint/issues/3415)\r\n\r\n#### Bug Fixes\r\n\r\n* Remove `@IBOutlet` and `@IBInspectable` from UnusedDeclarationRule.  \r\n  [Keith Smiley](https://github.com/keith)\r\n  [#3184](https://github.com/realm/SwiftLint/issues/3184)",
    "createdAt" : "2020-12-05T00:11:35+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTM0ODMxNzE4",
    "owner" : "realm",
    "publishedAt" : "2020-12-05T00:13:02+09:00",
    "repository" : "SwiftLint",
    "title" : "0.42.0-rc.1",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.42.0-rc.1",
    "version" : "0.42.0-rc.1"
  },
  {
    "body" : "This is a prerelease version. It won't be published to Homebrew or CocoaPods. But there are many other ways to install:\r\n\r\n* Downloading the attached `SwiftLint.pkg` installer and launching it\r\n* Downloading the attached `portable_swiftlint.zip` archive, extracting it and moving the binary from `portable_swiftlint/swiftlint` to `/usr/local/bin` or elsewhere in your `PATH`\r\n* Using [Mint](https://github.com/yonaskolb/Mint): `mint install realm/SwiftLint@0.42.0-rc.2`\r\n* Cloning and building from source: `git clone https://github.com/realm/SwiftLint.git && cd SwiftLint && git checkout 0.42.0-rc.2 && make install`\r\n\r\nChanges from 0.42.0-rc.1: https://github.com/realm/SwiftLint/compare/0.42.0-rc.1...0.42.0-rc.2\r\n\r\n---\r\n\r\n#### Breaking\r\n\r\n* SwiftLint now requires Swift 5.2 or higher to build.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* SwiftLintFramework can no longer be integrated as a Carthage\r\n  depdendency.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3412](https://github.com/realm/SwiftLint/issues/3412)\r\n\r\n* `SwiftLint.xcworkspace` and `SwiftLint.xcproject` have been completely\r\n  removed. You can still use Xcode to develop SwiftLint by opening it as\r\n  a Swift Package by typing `xed .` or `xed Package.swift` from your\r\n  shell.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3412](https://github.com/realm/SwiftLint/issues/3412)\r\n\r\n* Renamed `statement_level` to `function_level` in `nesting` rule\r\n  configuration.  \r\n  [Skoti](https://github.com/Skoti)\r\n\r\n* Separated `type_level` and `function_level` counting in `nesting`\r\n  rule.  \r\n  [Skoti](https://github.com/Skoti)\r\n  [#1151](https://github.com/realm/SwiftLint/issues/1151)\r\n\r\n* `function_level` in `nesting` rule defaults to 2 levels.  \r\n  [Skoti](https://github.com/Skoti)\r\n\r\n* Added `check_nesting_in_closures_and_statements` in `nesting` rule to\r\n  search for nested types and functions within closures and statements.\r\n  Defaults to `true`.  \r\n  [Skoti](https://github.com/Skoti)\r\n\r\n* Renamed `OverridenSuperCallConfiguration` to\r\n  `OverriddenSuperCallConfiguration`.  \r\n  [Bryan Ricker](https://github.com/bricker)\r\n  [#3426](https://github.com/realm/SwiftLint/pull/3426)\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* Don't report `@UIApplicationDelegateAdaptor` statements in `weak-delegate` rule.\r\n  [Richard Turton](https://github.com/jrturton)\r\n  [#3286](https://github.com/realm/SwiftLint/issues/3456)\r\n\r\n* Don't report `unavailable_function` violations for functions returning\r\n  `Never`.  \r\n  [Artem Garmash](https://github.com/agarmash)\r\n  [#3286](https://github.com/realm/SwiftLint/issues/3286)\r\n\r\n* Added `always_allow_one_type_in_functions` option in `nesting` rule\r\n  configuration. Defaults to `false`. This allows to nest one type\r\n  within a function even if breaking the maximum `type_level`.  \r\n  [Skoti](https://github.com/Skoti)\r\n  [#1151](https://github.com/realm/SwiftLint/issues/1151)\r\n  \r\n* Add option to specify a `child_config` / `parent_config` file\r\n  (local or remote) in any SwiftLint configuration file.\r\n  Allow passing multiple configuration files via the command line.\r\n  Improve documentation for multiple configuration files.  \r\n  [Frederick Pietschmann](https://github.com/fredpi)\r\n  [#1352](https://github.com/realm/SwiftLint/issues/1352)\r\n\r\n* Add an `always_keep_imports` configuration option for the\r\n  `unused_import` rule.  \r\n  [Keith Smiley](https://github.com/keith)\r\n\r\n* Add `comment_spacing` rule.  \r\n  [Noah Gilmore](https://github.com/noahsark769)\r\n  [#3233](https://github.com/realm/SwiftLint/issues/3233)\r\n\r\n* Add `codeclimate` reporter to generate JSON reports in codeclimate\r\n  format. Could be used for GitLab Code Quality MR Widget.  \r\n  [jkroepke](https://github.com/jkroepke)\r\n  [#3424](https://github.com/realm/SwiftLint/issues/3424)\r\n\r\n* Add `non_private_xctest_member` rule.  \r\n  [Keith Smiley](https://github.com/keith)\r\n\r\n* Add an `override_allowed_terms` configuration parameter to the\r\n  `inclusive_language` rule, with a default value of `mastercard`.  \r\n  [Dalton Claybrook](https://github.com/daltonclaybrook)\r\n  [#3415](https://github.com/realm/SwiftLint/issues/3415)\r\n\r\n#### Bug Fixes\r\n\r\n* Remove `@IBOutlet` and `@IBInspectable` from UnusedDeclarationRule.  \r\n  [Keith Smiley](https://github.com/keith)\r\n  [#3184](https://github.com/realm/SwiftLint/issues/3184)",
    "createdAt" : "2020-12-09T23:21:12+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTM1MDQ1OTM3",
    "owner" : "realm",
    "publishedAt" : "2020-12-09T23:24:52+09:00",
    "repository" : "SwiftLint",
    "title" : "0.42.0-rc.2",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.42.0-rc.2",
    "version" : "0.42.0-rc.2"
  },
  {
    "body" : "#### Breaking\r\n\r\n* SwiftLint now requires Swift 5.2 or higher to build.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* SwiftLintFramework can no longer be integrated as a Carthage\r\n  depdendency.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3412](https://github.com/realm/SwiftLint/issues/3412)\r\n\r\n* `SwiftLint.xcworkspace` and `SwiftLint.xcproject` have been completely\r\n  removed. You can still use Xcode to develop SwiftLint by opening it as\r\n  a Swift Package by typing `xed .` or `xed Package.swift` from your\r\n  shell.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3412](https://github.com/realm/SwiftLint/issues/3412)\r\n\r\n* Renamed `statement_level` to `function_level` in `nesting` rule\r\n  configuration.  \r\n  [Skoti](https://github.com/Skoti)\r\n\r\n* Separated `type_level` and `function_level` counting in `nesting`\r\n  rule.  \r\n  [Skoti](https://github.com/Skoti)\r\n  [#1151](https://github.com/realm/SwiftLint/issues/1151)\r\n\r\n* `function_level` in `nesting` rule defaults to 2 levels.  \r\n  [Skoti](https://github.com/Skoti)\r\n\r\n* Added `check_nesting_in_closures_and_statements` in `nesting` rule to\r\n  search for nested types and functions within closures and statements.\r\n  Defaults to `true`.  \r\n  [Skoti](https://github.com/Skoti)\r\n\r\n* Renamed `OverridenSuperCallConfiguration` to\r\n  `OverriddenSuperCallConfiguration`.  \r\n  [Bryan Ricker](https://github.com/bricker)\r\n  [#3426](https://github.com/realm/SwiftLint/pull/3426)\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* Don't report `@UIApplicationDelegateAdaptor` statements in `weak-delegate` rule.\r\n  [Richard Turton](https://github.com/jrturton)\r\n  [#3286](https://github.com/realm/SwiftLint/issues/3456)\r\n\r\n* Don't report `unavailable_function` violations for functions returning\r\n  `Never`.  \r\n  [Artem Garmash](https://github.com/agarmash)\r\n  [#3286](https://github.com/realm/SwiftLint/issues/3286)\r\n\r\n* Added `always_allow_one_type_in_functions` option in `nesting` rule\r\n  configuration. Defaults to `false`. This allows to nest one type\r\n  within a function even if breaking the maximum `type_level`.  \r\n  [Skoti](https://github.com/Skoti)\r\n  [#1151](https://github.com/realm/SwiftLint/issues/1151)\r\n  \r\n* Add option to specify a `child_config` / `parent_config` file\r\n  (local or remote) in any SwiftLint configuration file.\r\n  Allow passing multiple configuration files via the command line.\r\n  Improve documentation for multiple configuration files.  \r\n  [Frederick Pietschmann](https://github.com/fredpi)\r\n  [#1352](https://github.com/realm/SwiftLint/issues/1352)\r\n\r\n* Add an `always_keep_imports` configuration option for the\r\n  `unused_import` rule.  \r\n  [Keith Smiley](https://github.com/keith)\r\n\r\n* Add `comment_spacing` rule.  \r\n  [Noah Gilmore](https://github.com/noahsark769)\r\n  [#3233](https://github.com/realm/SwiftLint/issues/3233)\r\n\r\n* Add `codeclimate` reporter to generate JSON reports in codeclimate\r\n  format. Could be used for GitLab Code Quality MR Widget.  \r\n  [jkroepke](https://github.com/jkroepke)\r\n  [#3424](https://github.com/realm/SwiftLint/issues/3424)\r\n\r\n* Add an `override_allowed_terms` configuration parameter to the\r\n  `inclusive_language` rule, with a default value of `mastercard`.  \r\n  [Dalton Claybrook](https://github.com/daltonclaybrook)\r\n  [#3415](https://github.com/realm/SwiftLint/issues/3415)\r\n\r\n#### Bug Fixes\r\n\r\n* Remove `@IBOutlet` and `@IBInspectable` from UnusedDeclarationRule.  \r\n  [Keith Smiley](https://github.com/keith)\r\n  [#3184](https://github.com/realm/SwiftLint/issues/3184)",
    "createdAt" : "2020-12-15T05:26:56+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTM1MjU3MDcw",
    "owner" : "realm",
    "publishedAt" : "2020-12-15T05:30:52+09:00",
    "repository" : "SwiftLint",
    "title" : "0.42.0: He Chutes, He Scores",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.42.0",
    "version" : "0.42.0"
  },
  {
    "body" : "This is a prerelease version. It won't be published to Homebrew or CocoaPods. But there are many other ways to install:\r\n\r\n* Downloading the attached `SwiftLint.pkg` installer and launching it\r\n* Downloading the attached `portable_swiftlint.zip` archive, extracting it and moving the binary from `portable_swiftlint/swiftlint` to `/usr/local/bin` or elsewhere in your `PATH`\r\n* Using [Mint](https://github.com/yonaskolb/Mint): `mint install realm/SwiftLint@0.43.0-rc.1`\r\n* Cloning and building from source: `git clone https://github.com/realm/SwiftLint.git && cd SwiftLint && git checkout 0.43.0-rc.1 && make install`\r\n\r\n#### Breaking\r\n\r\n* The command line syntax has slightly changed due to migrating from the\r\n  Commandant command line parsing library to swift-argument-parser.\r\n  For the most part the breaking changes are all to make the syntax more\r\n  unix compliant and intuitive to use. For example, commands such as\r\n  `swiftlint --help` or `swiftlint -h` now work as expected.\r\n  The help output from various commands has greatly improved as well.\r\n  Notably: `swiftlint autocorrect` was removed in favor of\r\n  `swiftlint --fix`.\r\n  Previous commands should continue to work temporarily to help with the\r\n  transition. Please let us know if there's a command that no longer\r\n  works and we'll attempt to add a bridge to help with its transition.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* Support relative paths in compilation databases for SwiftLint analyzer\r\n  rules.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n#### Bug Fixes\r\n\r\n* Fix typos in configuration options for `file_name` rule.  \r\n  [advantis](https://github.com/advantis)",
    "createdAt" : "2021-01-23T03:53:13+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTM2Nzg0MzM1",
    "owner" : "realm",
    "publishedAt" : "2021-01-23T03:54:41+09:00",
    "repository" : "SwiftLint",
    "title" : "0.43.0-rc.1: Clothes Line Interface",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.43.0-rc.1",
    "version" : "0.43.0-rc.1"
  },
  {
    "body" : "This is a prerelease version. It won't be published to Homebrew or CocoaPods. But there are many other ways to install:\r\n\r\n* Downloading the attached `SwiftLint.pkg` installer and launching it\r\n* Downloading the attached `portable_swiftlint.zip` archive, extracting it and moving the binary from `portable_swiftlint/swiftlint` to `/usr/local/bin` or elsewhere in your `PATH`\r\n* Using [Mint](https://github.com/yonaskolb/Mint): `mint install realm/SwiftLint@0.43.0-rc.2`\r\n* Cloning and building from source: `git clone https://github.com/realm/SwiftLint.git && cd SwiftLint && git checkout 0.43.0-rc.2 && make install`\r\n\r\nChanges from 0.43.0-rc.1: https://github.com/realm/SwiftLint/compare/0.43.0-rc.1...0.43.0-rc.2\r\n\r\n#### Breaking\r\n\r\n* The command line syntax has slightly changed due to migrating from the\r\n  Commandant command line parsing library to swift-argument-parser.\r\n  For the most part the breaking changes are all to make the syntax more\r\n  unix compliant and intuitive to use. For example, commands such as\r\n  `swiftlint --help` or `swiftlint -h` now work as expected.\r\n  The help output from various commands has greatly improved as well.\r\n  Notably: `swiftlint autocorrect` was removed in favor of\r\n  `swiftlint --fix`.\r\n  Previous commands should continue to work temporarily to help with the\r\n  transition. Please let us know if there's a command that no longer\r\n  works and we'll attempt to add a bridge to help with its transition.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* Support relative paths in compilation databases for SwiftLint analyzer\r\n  rules.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Add opt-in rule `discouraged_assert` to encourage the use of\r\n  `assertionFailure()` and/or `preconditionFailure()` over\r\n  `assert(false)`.  \r\n  [Otavio Cordeiro](https://github.com/otaviocc)\r\n\r\n#### Bug Fixes\r\n\r\n* Fix typos in configuration options for `file_name` rule.  \r\n  [advantis](https://github.com/advantis)\r\n\r\n* Fix violation location and misplaced corrections for some function\r\n  references in `explicit_self` rule.  \r\n  [JP Simard](https://github.com/jpsim)",
    "createdAt" : "2021-01-30T05:24:33+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTM3MTAzNzQ5",
    "owner" : "realm",
    "publishedAt" : "2021-01-30T05:26:53+09:00",
    "repository" : "SwiftLint",
    "title" : "0.43.0-rc.2: Clothes Line Interface",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.43.0-rc.2",
    "version" : "0.43.0-rc.2"
  },
  {
    "body" : "This is a prerelease version. It won't be published to Homebrew or CocoaPods. But there are many other ways to install:\r\n\r\n* Downloading the attached `SwiftLint.pkg` installer and launching it\r\n* Downloading the attached `portable_swiftlint.zip` archive, extracting it and moving the binary from `portable_swiftlint/swiftlint` to `/usr/local/bin` or elsewhere in your `PATH`\r\n* Using [Mint](https://github.com/yonaskolb/Mint): `mint install realm/SwiftLint@0.43.0-rc.3`\r\n* Cloning and building from source: `git clone https://github.com/realm/SwiftLint.git && cd SwiftLint && git checkout 0.43.0-rc.3 && make install`\r\n\r\nChanges from 0.43.0-rc.2: https://github.com/realm/SwiftLint/compare/0.43.0-rc.2...0.43.0-rc.3\r\n\r\n#### Breaking\r\n\r\n* The command line syntax has slightly changed due to migrating from the\r\n  Commandant command line parsing library to swift-argument-parser.\r\n  For the most part the breaking changes are all to make the syntax more\r\n  unix compliant and intuitive to use. For example, commands such as\r\n  `swiftlint --help` or `swiftlint -h` now work as expected.\r\n  The help output from various commands has greatly improved as well.\r\n  Notably: `swiftlint autocorrect` was removed in favor of\r\n  `swiftlint --fix`.\r\n  Previous commands should continue to work temporarily to help with the\r\n  transition. Please let us know if there's a command that no longer\r\n  works and we'll attempt to add a bridge to help with its transition.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* Added `allows_single_line` option in `multiline_parameters` rule\r\n  configuration. Defaults to `true`. This enforces parameters in a method\r\n  with multiple parameters to always be in different lines.  \r\n  [Otavio Cordeiro](https://github.com/otaviocc)\r\n\r\n* Support relative paths in compilation databases for SwiftLint analyzer\r\n  rules.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Add opt-in rule `discouraged_assert` to encourage the use of\r\n  `assertionFailure()` and/or `preconditionFailure()` over\r\n  `assert(false)`.  \r\n  [Otavio Cordeiro](https://github.com/otaviocc)\r\n\r\n* Add opt-in rule `private_subject` rule which warns against\r\n  public Combine subjects.  \r\n  [Otavio Cordeiro](https://github.com/otaviocc)\r\n\r\n* Allow configuring related USRs to skip in UnusedDeclarationRule by\r\n  specifying a list of USRs in the `related_usrs_to_skip` key.\r\n  For example you might have custom source tooling that does something\r\n  with types conforming to a procotol even if that type is never\r\n  explicitly referenced by other code.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n#### Bug Fixes\r\n\r\n* Fix typos in configuration options for `file_name` rule.  \r\n  [advantis](https://github.com/advantis)\r\n\r\n* Fix violation location and misplaced corrections for some function\r\n  references in `explicit_self` rule.  \r\n  [JP Simard](https://github.com/jpsim)",
    "createdAt" : "2021-02-18T05:43:04+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTM4MTkyMTE4",
    "owner" : "realm",
    "publishedAt" : "2021-02-18T05:49:46+09:00",
    "repository" : "SwiftLint",
    "title" : "0.43.0-rc.3: Clothes Line Interface",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.43.0-rc.3",
    "version" : "0.43.0-rc.3"
  },
  {
    "body" : "This is a prerelease version. It won't be published to Homebrew or CocoaPods. But there are many other ways to install:\r\n\r\n* Downloading the attached `SwiftLint.pkg` installer and launching it\r\n* Downloading the attached `portable_swiftlint.zip` archive, extracting it and moving the binary from `portable_swiftlint/swiftlint` to `/usr/local/bin` or elsewhere in your `PATH`\r\n* Using [Mint](https://github.com/yonaskolb/Mint): `mint install realm/SwiftLint@0.43.0-rc.4`\r\n* Cloning and building from source: `git clone https://github.com/realm/SwiftLint.git && cd SwiftLint && git checkout 0.43.0-rc.4 && make install`\r\n\r\nChanges from 0.43.0-rc.3: https://github.com/realm/SwiftLint/compare/0.43.0-rc.3...0.43.0-rc.4\r\n\r\n#### Breaking\r\n\r\n* The command line syntax has slightly changed due to migrating from the\r\n  Commandant command line parsing library to swift-argument-parser.\r\n  For the most part the breaking changes are all to make the syntax more\r\n  unix compliant and intuitive to use. For example, commands such as\r\n  `swiftlint --help` or `swiftlint -h` now work as expected.\r\n  The help output from various commands has greatly improved as well.\r\n  Notably: `swiftlint autocorrect` was removed in favor of\r\n  `swiftlint --fix`.\r\n  Previous commands should continue to work temporarily to help with the\r\n  transition. Please let us know if there's a command that no longer\r\n  works and we'll attempt to add a bridge to help with its transition.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Configuration files now consistently have their `included`/`excluded`\r\n  relative file paths applied relative to their location in the file\r\n  system. Previously the root configuration file applied these relative\r\n  to the current working directory, but nested configurations applied\r\n  these to their location in the file system.  \r\n  [Frederick Pietschmann](https://github.com/fredpi)\r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* The `discarded_notification_center_observer` is now opt-in due to some\r\n  difficult to resolve false positives, such as\r\n  [#3498](https://github.com/realm/SwiftLint/issues/3498).  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* Added `allows_single_line` option in `multiline_parameters` rule\r\n  configuration. Defaults to `true`. This enforces parameters in a method\r\n  with multiple parameters to always be in different lines.  \r\n  [Otavio Cordeiro](https://github.com/otaviocc)\r\n\r\n* Support relative paths in compilation databases for SwiftLint analyzer\r\n  rules.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Add opt-in rule `discouraged_assert` to encourage the use of\r\n  `assertionFailure()` and/or `preconditionFailure()` over\r\n  `assert(false)`.  \r\n  [Otavio Cordeiro](https://github.com/otaviocc)\r\n\r\n* Add opt-in rule `private_subject` rule which warns against\r\n  public Combine subjects.  \r\n  [Otavio Cordeiro](https://github.com/otaviocc)\r\n\r\n* Tweak the auto-correction result console output for clarity.  \r\n  [mokagio](https://github.com/mokagio)\r\n  [#3522](https://github.com/realm/SwiftLint/issues/3522)\r\n\r\n* Allow configuring related USRs to skip in UnusedDeclarationRule by\r\n  specifying a list of USRs in the `related_usrs_to_skip` key.\r\n  For example you might have custom source tooling that does something\r\n  with types conforming to a procotol even if that type is never\r\n  explicitly referenced by other code.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Make `strong_iboutlet` rule correctable.  \r\n  [MaxHaertwig](https://github.com/maxhaertwig)\r\n\r\n* Add `legacy_objc_type` opt-in rule to warn against using\r\n  bridged Objective-C reference types instead of Swift value types.  \r\n  [Blake](https://github.com/72A12F4E)\r\n  [#2758](https://github.com/realm/SwiftLint/issues/2758)\r\n\r\n* Support Swift Playground control comments in the `comment_spacing`\r\n  rule.  \r\n  [Thomas Goyne](https://github.com/tgoyne)\r\n\r\n* [Internal] Integrate OS Signposts to help profile SwiftLint\r\n  performance.  \r\n  [jpsim](https://github.com/jpsim)\r\n\r\n* Update CodeClimateReporter to produce relative paths.  \r\n  [bmwalters](https://github.com/bmwalters)\r\n\r\n* Add Bool violation reporting in `redundant_type_annotation`.  \r\n  [Artem Garmash](https://github.com/agarmash)\r\n  [#3423](https://github.com/realm/SwiftLint/issues/3423)\r\n\r\n* Log references to a specified module when running the `unused_import`\r\n  by setting the `SWIFTLINT_LOG_MODULE_USAGE=<module-name>` environment\r\n  variable when running analyze.  \r\n  [jpsim](https://github.com/jpsim)\r\n\r\n#### Bug Fixes\r\n\r\n* Fix `custom_rules` merging when the parent configuration is based on\r\n  `only_rules`.  \r\n  [Frederick Pietschmann](https://github.com/fredpi)\r\n  [#3468](https://github.com/realm/SwiftLint/issues/3468)\r\n\r\n* Fix misleading warnings about rules defined in the `custom_rules` not\r\n  being available (when using multiple configurations).  \r\n  [Frederick Pietschmann](https://github.com/fredpi)\r\n  [#3472](https://github.com/realm/SwiftLint/issues/3472)\r\n  \r\n* Fix bug that prevented the reconfiguration of a custom rule in a child\r\n  config.  \r\n  [Frederick Pietschmann](https://github.com/fredpi)\r\n  [#3477](https://github.com/realm/SwiftLint/issues/3477)\r\n  \r\n* Fix typos in configuration options for `file_name` rule.  \r\n  [advantis](https://github.com/advantis)\r\n  \r\n* Fix issue that prevented the inclusion of a configuration file from a\r\n  parent folder.  \r\n  [Frederick Pietschmann](https://github.com/fredpi)\r\n  [#3485](https://github.com/realm/SwiftLint/issues/3485)\r\n\r\n* Fix violation location and misplaced corrections for some function\r\n  references in `explicit_self` rule.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Fix false positives with result builders in `unused_declaration`.  \r\n  [JP Simard](https://github.com/jpsim)",
    "createdAt" : "2021-02-27T05:08:43+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTM4ODE5OTU5",
    "owner" : "realm",
    "publishedAt" : "2021-02-27T05:09:58+09:00",
    "repository" : "SwiftLint",
    "title" : "0.43.0-rc.4: Clothes Line Interface",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.43.0-rc.4",
    "version" : "0.43.0-rc.4"
  },
  {
    "body" : "#### Breaking\r\n\r\n* The command line syntax has slightly changed due to migrating from the\r\n  Commandant command line parsing library to swift-argument-parser.\r\n  For the most part the breaking changes are all to make the syntax more\r\n  unix compliant and intuitive to use. For example, commands such as\r\n  `swiftlint --help` or `swiftlint -h` now work as expected.\r\n  The help output from various commands has greatly improved as well.\r\n  Notably: `swiftlint autocorrect` was removed in favor of\r\n  `swiftlint --fix`.\r\n  Previous commands should continue to work temporarily to help with the\r\n  transition. Please let us know if there's a command that no longer\r\n  works and we'll attempt to add a bridge to help with its transition.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Configuration files now consistently have their `included`/`excluded`\r\n  relative file paths applied relative to their location in the file\r\n  system. Previously the root configuration file applied these relative\r\n  to the current working directory, but nested configurations applied\r\n  these to their location in the file system.  \r\n  [Frederick Pietschmann](https://github.com/fredpi)\r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* The `discarded_notification_center_observer` is now opt-in due to some\r\n  difficult to resolve false positives, such as\r\n  [#3498](https://github.com/realm/SwiftLint/issues/3498).  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* Added `allows_single_line` option in `multiline_parameters` rule\r\n  configuration. Defaults to `true`. This enforces parameters in a method\r\n  with multiple parameters to always be in different lines.  \r\n  [Otavio Cordeiro](https://github.com/otaviocc)\r\n\r\n* Support relative paths in compilation databases for SwiftLint analyzer\r\n  rules.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Add opt-in rule `discouraged_assert` to encourage the use of\r\n  `assertionFailure()` and/or `preconditionFailure()` over\r\n  `assert(false)`.  \r\n  [Otavio Cordeiro](https://github.com/otaviocc)\r\n\r\n* Adds `balanced_xctest_lifecycle` opt-in rule to enforce balanced `setUp`\r\n  and `tearDown` methods in a test class.  \r\n  [Otavio Cordeiro](https://github.com/otaviocc)\r\n  [#3452](https://github.com/realm/SwiftLint/issues/3452)\r\n\r\n* Tweak the auto-correction result console output for clarity.  \r\n  [mokagio](https://github.com/mokagio)\r\n  [#3522](https://github.com/realm/SwiftLint/issues/3522)\r\n\r\n* Allow configuring related USRs to skip in UnusedDeclarationRule by\r\n  specifying a list of USRs in the `related_usrs_to_skip` key.\r\n  For example you might have custom source tooling that does something\r\n  with types conforming to a procotol even if that type is never\r\n  explicitly referenced by other code.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Make `strong_iboutlet` rule correctable.  \r\n  [MaxHaertwig](https://github.com/maxhaertwig)\r\n\r\n* Add `legacy_objc_type` opt-in rule to warn against using\r\n  bridged Objective-C reference types instead of Swift value types.  \r\n  [Blake](https://github.com/72A12F4E)\r\n  [#2758](https://github.com/realm/SwiftLint/issues/2758)\r\n\r\n* Support Swift Playground control comments in the `comment_spacing`\r\n  rule.  \r\n  [Thomas Goyne](https://github.com/tgoyne)\r\n\r\n* [Internal] Integrate OS Signposts to help profile SwiftLint\r\n  performance.  \r\n  [jpsim](https://github.com/jpsim)\r\n\r\n* Update CodeClimateReporter to produce relative paths.  \r\n  [bmwalters](https://github.com/bmwalters)\r\n\r\n* Add Bool violation reporting in `redundant_type_annotation`.  \r\n  [Artem Garmash](https://github.com/agarmash)\r\n  [#3423](https://github.com/realm/SwiftLint/issues/3423)\r\n\r\n* Add a new `capture_variable` analyzer rule to warn about listing a\r\n  non-constant (`var`) variable in a closure's capture list. This\r\n  captures the variable's value at closure creation time instead of\r\n  closure call time, which may be unexpected.  \r\n  [Laszlo Kustra](https://github.com/kustra)\r\n\r\n* Log references to a specified module when running the `unused_import`\r\n  by setting the `SWIFTLINT_LOG_MODULE_USAGE=<module-name>` environment\r\n  variable when running analyze.  \r\n  [jpsim](https://github.com/jpsim)\r\n\r\n* Add opt-in rule `private_subject` rule which warns against\r\n  public Combine subjects.  \r\n  [Otavio Cordeiro](https://github.com/otaviocc)\r\n\r\n#### Bug Fixes\r\n\r\n* Fix `custom_rules` merging when the parent configuration is based on\r\n  `only_rules`.  \r\n  [Frederick Pietschmann](https://github.com/fredpi)\r\n  [#3468](https://github.com/realm/SwiftLint/issues/3468)\r\n\r\n* Fix misleading warnings about rules defined in the `custom_rules` not\r\n  being available (when using multiple configurations).  \r\n  [Frederick Pietschmann](https://github.com/fredpi)\r\n  [#3472](https://github.com/realm/SwiftLint/issues/3472)\r\n  \r\n* Fix bug that prevented the reconfiguration of a custom rule in a child\r\n  config.  \r\n  [Frederick Pietschmann](https://github.com/fredpi)\r\n  [#3477](https://github.com/realm/SwiftLint/issues/3477)\r\n  \r\n* Fix typos in configuration options for `file_name` rule.  \r\n  [advantis](https://github.com/advantis)\r\n  \r\n* Fix issue that prevented the inclusion of a configuration file from a\r\n  parent folder.  \r\n  [Frederick Pietschmann](https://github.com/fredpi)\r\n  [#3485](https://github.com/realm/SwiftLint/issues/3485)\r\n\r\n* Fix violation location and misplaced corrections for some function\r\n  references in `explicit_self` rule.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Fix false positives with result builders in `unused_declaration`.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Find more unused declarations in `unused_declaration`.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Fix parsing xcode logs for analyzer rules for target names with\r\n  spaces.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3021](https://github.com/realm/SwiftLint/issues/3021)",
    "createdAt" : "2021-03-04T06:01:42+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTM5MjEyMjc3",
    "owner" : "realm",
    "publishedAt" : "2021-03-04T06:02:02+09:00",
    "repository" : "SwiftLint",
    "title" : "0.43.0: Clothes Line Interface",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.43.0",
    "version" : "0.43.0"
  },
  {
    "body" : "#### Breaking\r\n\r\n* None.\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* None.\r\n\r\n#### Bug Fixes\r\n\r\n* Fix the File Length rule name.  \r\n  [onato](https://github.com/onato)\r\n  [#3560](https://github.com/realm/SwiftLint/issues/3560)\r\n\r\n* Re-add `--format` flag to reformat Swift files using SourceKit.\r\n  Only applied with `--fix`/`--autocorrect`.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3571](https://github.com/realm/SwiftLint/issues/3571)",
    "createdAt" : "2021-03-16T01:02:26+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTM5ODI3OTMx",
    "owner" : "realm",
    "publishedAt" : "2021-03-16T01:03:01+09:00",
    "repository" : "SwiftLint",
    "title" : "0.43.1: Laundroformat",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.43.1",
    "version" : "0.43.1"
  },
  {
    "body" : "#### Breaking\r\n\r\n* None.\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* Add support for params files for file paths.  \r\n  [keith](https://github.com/keith)\r\n\r\n#### Bug Fixes\r\n\r\n* Fix .swift-version to use Swift 5.1.  \r\n  [cfiken](https://github.com/cfiken)\r\n  [#3297](https://github.com/realm/SwiftLint/issues/3297)\r\n\r\n* Fix test `testDetectSwiftVersion` for Swift 5.2.5.  \r\n  [cfiken](https://github.com/cfiken)\r\n  [#3299](https://github.com/realm/SwiftLint/pull/3299)",
    "createdAt" : "2020-08-28T00:33:45+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTMwMjI3Mjk0",
    "owner" : "realm",
    "publishedAt" : "2020-08-28T00:35:05+09:00",
    "repository" : "SwiftLint",
    "title" : "0.40.1: A Baffling Response",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.40.1",
    "version" : "0.40.1"
  },
  {
    "body" : "#### Breaking\r\n\r\n* None.\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* Improve description for `empty_enum_arguments`.  \r\n  [Lukas Schmidt](https://github.com/lightsprint09)\r\n\r\n* Add support for `excluded_match_kinds` custom rule config parameter.  \r\n  [Ryan Demo](https://github.com/ryandemo)\r\n\r\n#### Bug Fixes\r\n\r\n* None.",
    "createdAt" : "2020-09-11T11:25:10+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTMxMDk4Mzg5",
    "owner" : "realm",
    "publishedAt" : "2020-09-11T11:37:07+09:00",
    "repository" : "SwiftLint",
    "title" : "0.40.2: Demo Unit",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.40.2",
    "version" : "0.40.2"
  },
  {
    "body" : "#### Breaking\r\n\r\n* None.\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* Make the `unused_declaration` rule run 3-5 times faster, and\r\n  enable it to detect more occurrences of unused declarations.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Remove unneeded internal locking overhead, leading to increased\r\n  performance in multithreaded operations.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Skip correcting file if the swift parser reports a warning or an\r\n  error.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3343](https://github.com/realm/SwiftLint/issues/3343)\r\n\r\n#### Bug Fixes\r\n\r\n* Rule `unused_capture_list` should not be triggered by self keyword.  \r\n  [hank121314](https://github.com/hank121314)\r\n  [#2367](https://github.com/realm/SwiftLint/issues/3267)\r\n\r\n* Rule `multiple_closures_with_trailing_closure` no longer triggers when Swift\r\n  5.3's 'multiple trailing closures' feature is used.\r\n  [Jumhyn](https://github.com/jumhyn)\r\n  [#3295](https://github.com/realm/SwiftLint/issues/3295)",
    "createdAt" : "2020-09-23T06:22:18+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTMxNjc2MjMw",
    "owner" : "realm",
    "publishedAt" : "2020-09-23T06:24:55+09:00",
    "repository" : "SwiftLint",
    "title" : "0.40.3: Greased Up Drum Bearings",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.40.3",
    "version" : "0.40.3"
  },
  {
    "body" : "![laundromat voting](https://cms.qz.com/wp-content/uploads/2012/11/laundromat-voting-11062012-web.jpg?quality=75&strip=all&w=550&h=310)\r\n\r\n#### Breaking\r\n\r\n* Changed behavior of `strict` option on `lint` and `analyze` to treat\r\n  all warnings as errors instead of only changing the exit code.  \r\n  [Jeehut](https://github.com/Jeehut)\r\n  [#3312](https://github.com/realm/SwiftLint/issues/3312)\r\n\r\n* Removed the `unneeded_notification_center_removal` rule because it was\r\n  based on an incorrect premise.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3338](https://github.com/realm/SwiftLint/issues/3338)\r\n\r\n* The `whitelist_rules` configuration key has been renamed to\r\n  `only_rules`.  \r\n  [Dalton Claybrook](https://github.com/daltonclaybrook)\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* Add `use-alternative-excluding` option to speed up linting in cases\r\n  described in [#3325](https://github.com/realm/SwiftLint/pull/3325).\r\n  This option yields different exclusion behavior.  \r\n  [JohnReeze](https://github.com/JohnReeze)\r\n  [#3304](https://github.com/realm/SwiftLint/issues/3304)\r\n\r\n* Add `test_case_accessibility` rule.  \r\n  [Keith Smiley](https://github.com/keith)\r\n  [#3376](https://github.com/realm/SwiftLint/issues/3376)\r\n\r\n* Add more details to `CONTRIBUTING.md`.  \r\n  [mknabbe](https://github.com/mknabbe)\r\n  [#1280](https://github.com/realm/SwiftLint/issues/1280)\r\n\r\n* Remove `@IBOutlet` and `@IBInspectable` from UnusedDeclarationRule.  \r\n  [Keith Smiley](https://github.com/keith)\r\n  [#3184](https://github.com/realm/SwiftLint/issues/3184)\r\n\r\n* Add `allow_multiline_func` configuration option to `opening_brace`\r\n  rule, to allow placing `{` on new line in case of multiline function.\r\n  Defaults to `false`.  \r\n  [Zsolt Kov√°cs](https://github.com/lordzsolt)\r\n  [#1921](https://github.com/realm/SwiftLint/issues/1921)\r\n\r\n* Update the `nslocalizedstring_key` rule to validate the `comment`\r\n  argument in addition to the `key` argument.  \r\n  [Dalton Claybrook](https://github.com/daltonclaybrook)\r\n  [#3334](https://github.com/realm/SwiftLint/issues/3334)\r\n\r\n* Add `inclusive_language` rule to encourage the use of inclusive\r\n  language that avoids discrimination against groups of people.  \r\n  [Dalton Claybrook](https://github.com/daltonclaybrook)\r\n\r\n* Add `prefer_nimble` opt-in rule to encourage using Nimble matchers\r\n  over the XCTest ones.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#3293](https://github.com/realm/SwiftLint/issues/3293)\r\n\r\n* `unused_closure_parameter` rule now validates closures outside of\r\n  function calls.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#1082](https://github.com/realm/SwiftLint/issues/1082)\r\n\r\n* Improve documentation for running SwiftLint as Xcode build phase.  \r\n  [Christian Mitteldorf](https://github.com/christiankm)\r\n  [#3169](https://github.com/realm/SwiftLint/issues/3169)\r\n\r\n* Add `skip_aligned_constants` (defaults to `true`) and\r\n  `lines_look_around` (defaults to `2`) configuration parameters to the\r\n  `operator_usage_whitespace` rule.  \r\n  [Paul Taykalo](https://github.com/PaulTaykalo)\r\n  [#3388](https://github.com/realm/SwiftLint/issues/3388)\r\n\r\n#### Bug Fixes\r\n\r\n* Fix parsing of Xcode 12 compiler logs for analyzer rules.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3365](https://github.com/realm/SwiftLint/issues/3365)\r\n\r\n* Fix some SwiftUI unused declaration rule false positives.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3365](https://github.com/realm/SwiftLint/issues/3365)\r\n\r\n* Fix some false positives in rule `explicit_self`.  \r\n  [Sven M√ºnnich](https://github.com/svenmuennich)\r\n\r\n* Fix incorrect autocorrection in `prefer_zero_over_explicit_init` rule.  \r\n  [Paul Taykalo](https://github.com/PaulTaykalo)\r\n\r\n* Rule `unused_capture_list` should not be triggered by unowned self\r\n  keyword.  \r\n  [hank121314](https://github.com/hank121314)\r\n  [#3389](https://github.com/realm/SwiftLint/issues/3389)\r\n\r\n* Fix severity configuration for `indentation_width`.  \r\n  [Samasaur1](https://github.com/Samasaur1)\r\n  [#3346](https://github.com/realm/SwiftLint/issues/3389)\r\n\r\n* Fix DuplicateImportsRule's support for import attributes.  \r\n  [Keith Smiley](https://github.com/keith)\r\n  [#3402](https://github.com/realm/SwiftLint/issues/3402)\r\n\r\n* Allow \"allowed symbols\" as first character in `identifier_name`.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3306](https://github.com/realm/SwiftLint/issues/3306)\r\n\r\n* Fix false positives with parameterized attributes in `attributes`.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3316](https://github.com/realm/SwiftLint/issues/3316)\r\n\r\n* Fix some missed cases in rule `unavailable_function`.  \r\n  [Quinn Taylor](https://github.com/quinntaylor)\r\n  [#3374](https://github.com/realm/SwiftLint/issues/3374)\r\n\r\n* Fix incorrect violation message for line length violations.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3333](https://github.com/realm/SwiftLint/issues/3333)\r\n\r\n* Fix inconsistency in `operator_usage_whitespace` rule.  \r\n  [Paul Taykalo](https://github.com/PaulTaykalo)\r\n  [#3321](https://github.com/realm/SwiftLint/issues/3321)\r\n\r\n* Fix false positives in `convenience_type` rule for types that cannot\r\n  be converted to enums.  \r\n  [ZevEisenberg](https://github.com/ZevEisenberg)\r\n  [#3033](https://github.com/realm/SwiftLint/issues/3033)\r\n\r\n* Fix finding a nested config when a single file path is passed.  \r\n  [Seth Friedman](https://github.com/sethfri)\r\n\r\n* Fix incorrect calculation of the root path when a directory in the\r\n  tree is passed in as a path argument.  \r\n  [Seth Friedman](https://github.com/sethfri)\r\n  [#3383](https://github.com/realm/SwiftLint/issues/3383)\r\n\r\n* Fix rare false positive in `toggle_bool` rule.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#3398](https://github.com/realm/SwiftLint/issues/3398)",
    "createdAt" : "2020-11-09T02:07:40+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTMzNjE0ODkx",
    "owner" : "realm",
    "publishedAt" : "2020-11-09T02:10:47+09:00",
    "repository" : "SwiftLint",
    "title" : "0.41.0: World‚Äôs Cleanest Voting Booth",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.41.0",
    "version" : "0.41.0"
  },
  {
    "body" : "#### Breaking\r\n\r\n* SwiftLint now requires Swift 5.3 or higher to build.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* Add configuration options to `missing_docs` rule:\r\n  * `excludes_extensions` defaults to `true` to skip reporting violations\r\n     for extensions with missing documentation comments.\r\n  * `excludes_inherited_types` defaults to `true` to skip reporting\r\n     violations for inherited declarations, like subclass overrides.  \r\n  [Ben Fox](https://github.com/bdfox325)\r\n\r\n* Fix false negative on `redundant_optional_initialization` rule when variable\r\n  has observers.  \r\n  [Isaac Ressler](https://github.com/iressler)\r\n  [#3621](https://github.com/realm/SwiftLint/issues/3621)\r\n\r\n* Make `test_case_accessibility` rule identify invalid test functions\r\n  with parameters.  \r\n  [Keith Smiley](https://github.com/keith)\r\n  [#3612](https://github.com/realm/SwiftLint/pull/3612)\r\n\r\n* Add `duplicated_key_in_dictionary_literal` rule to warn against duplicated\r\n  keys in dictionary literals.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  \r\n* Fix the rule name from \"Colon\" to \"Colon Spacing\" to improve phrasing.  \r\n  [Radu](https://github.com/raduciobanu002)\r\n  [#3587](https://github.com/realm/SwiftLint/issues/3587)\r\n\r\n* Add `discouraged_none_name` opt-in rule to discourage naming cases and\r\n  static/class members \"none\", which can conflict with Swift's\r\n  `Optional<T>.none` when checking equality.  \r\n  [Kane Cheshire](https://github.com/kanecheshire)\r\n  [#3624](https://github.com/realm/SwiftLint/issues/3624)\r\n\r\n* Improve language and positioning of `file_length` warnings when\r\n  `ignore_comment_only_lines: true`.  \r\n  [Steven Grosmark](https://github.com/g-mark)\r\n  [#3654](https://github.com/realm/SwiftLint/pull/3654)\r\n\r\n* Add `anonymous_argument_in_multiline_closure` opt-in rule to validate that\r\n  named arguments are used in closures that span multiple lines.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n\r\n#### Bug Fixes\r\n\r\n* Fix false positives in `empty_enum_arguments` rule when comparing values\r\n  with a static member (e.g. `if number == .zero`).  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#3562](https://github.com/realm/SwiftLint/issues/3562)\r\n\r\n* Fix the regex for expiring-todos.  \r\n  [namolnad](https://github.com/namolnad)\r\n  [#3597](https://github.com/realm/SwiftLint/pull/3597)\r\n\r\n* Fix `type_contents_order` initializer detection.  \r\n  [StevenMagdy](https://github.com/StevenMagdy)\r\n  \r\n* Fix autocorrect when there's no space between the tuple the `in` keyword\r\n  on `unneeded_parentheses_in_closure_argument` rule.  \r\n  [p-x9](https://github.com/p-x9)\r\n  [#3633](https://github.com/realm/SwiftLint/issues/3633)\r\n\r\n* Fix `unused_capture_list`, `empty_enum_arguments`, `implicit_return` and\r\n  `explicit_type_interface` rules when using Swift 5.4.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#3615](https://github.com/realm/SwiftLint/issues/3615)\r\n  [#3685](https://github.com/realm/SwiftLint/issues/3685)\r\n\r\n* Fix Xcode build logs with spaces in paths preventing `analyze` from running.  \r\n  [adamawolf](https://github.com/adamawolf)",
    "createdAt" : "2021-09-10T06:59:13+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "RE_kwDOAiE69s4C8HNr",
    "owner" : "realm",
    "publishedAt" : "2021-09-10T07:00:02+09:00",
    "repository" : "SwiftLint",
    "title" : "0.44.0: Travel Size Lint Roller",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.44.0",
    "version" : "0.44.0"
  },
  {
    "body" : "#### Breaking\r\n\r\n* None.\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* Add type-checked analyzer rule version of `ArrayInitRule` named\r\n  `TypesafeArrayInitRule` with identifier `typesafe_array_init` that\r\n  avoids the false positives present in the lint rule.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#3749](https://github.com/realm/SwiftLint/issues/3749)\r\n\r\n* Add the `--in-process-sourcekit` command line flag to `lint` and `analyze`\r\n  commands, which has the same effect as setting the `IN_PROCESS_SOURCEKIT`\r\n  environment variable.  \r\n  [Juozas Valancius](https://github.com/juozasvalancius)\r\n\r\n* Add a new `artifactbundle` release asset containing `swiftlint` binaries for\r\n  x86 & arm64 macOS.  \r\n  [Juozas Valancius](https://github.com/juozasvalancius)\r\n  [#3840](https://github.com/realm/SwiftLint/issues/3840)\r\n\r\n* Add back `return_value_from_void_function` opt-in rule to warn against using\r\n  `return <expression>` in a function that returns `Void`.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n\r\n* Don't skip autocorrect on files that have parser warnings. Only files with\r\n  errors reported by the Swift parser will be skipped.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#3343](https://github.com/realm/SwiftLint/issues/3343)\r\n  \r\n* Add `accessibility_label_for_image` rule to warn if a SwiftUI\r\n  Image does not have an accessibility label and is not hidden from\r\n  accessibility.  \r\n  [Ryan Cole](https://github.com/rcole34)\r\n\r\n* Add `unavailable_condition` rule to prefer using `if #unavailable` instead of\r\n  `if #available` with an empty body and an `else` condition when using\r\n  Swift 5.6 or later.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#3897](https://github.com/realm/SwiftLint/issues/3897)\r\n\r\n* Add `comma_inheritance` rule to validate that inheritance clauses use commas\r\n  instead of `&`.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#3950](https://github.com/realm/SwiftLint/issues/3950)\r\n\r\n#### Bug Fixes\r\n\r\n* Fix false positives in `unused_closure_parameter` when using parameters with\r\n  backticks.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3628](https://github.com/realm/SwiftLint/issues/3628)\r\n\r\n* Improved the `syntactic_sugar` rule's detection accuracy and fixed some\r\n  corrections leading to invalid code.  \r\n  [Paul Taykalo](https://github.com/PaulTaykalo)\r\n  [#3866](https://github.com/realm/SwiftLint/issues/3866)\r\n\r\n* Fix analyzer rules with Xcode 13.3 / Swift 5.6. Note that we've measured\r\n  performance regressions compared to Swift 5.5 on the order of about 2x.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3920](https://github.com/realm/SwiftLint/issues/3920)\r\n\r\n* Error by default on bad expiring todo date formatting.  \r\n  [Christopher Hale](https://github.com/chrispomeroyhale)\r\n  [#3636](https://github.com/realm/SwiftLint/pull/3626)\r\n\r\n* Lint/analyze all files listed in the command even if the `--path` option is\r\n  used.  \r\n  [coffmark](https://github.com/coffmark)",
    "createdAt" : "2022-04-26T00:31:09+09:00",
    "fetchedFromAPIAt" : "2022-04-26T09:45:51+09:00",
    "id" : "RE_kwDOAiE69s4D46gf",
    "owner" : "realm",
    "publishedAt" : "2022-04-26T00:31:38+09:00",
    "repository" : "SwiftLint",
    "title" : "0.47.1: Smarter Appliance",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.47.1",
    "version" : "0.47.1"
  },
  {
    "body" : "#### Breaking\r\n\r\n* SwiftLint now requires Swift 5.4 or higher to build.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* Add `self_in_property_initialization` rule to catch uses of `self`\r\n  inside an inline closure used for initializing a variable. In this case, \r\n  `self` refers to the `NSObject.self` method and likely won't be what you\r\n  expect. You can make the variable `lazy` to be able to refer to the current\r\n  instance with `self` or use `MyClass.self` if you really want to reference \r\n  the method.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n\r\n* Exclude `id` from `identifier_name` by default.  \r\n  [Artem Garmash](https://github.com/agarmash)\r\n  [#3651](https://github.com/realm/SwiftLint/issues/3651)\r\n\r\n* Handle `get async` and `get throws` (introduced in Swift 5.5) in the\r\n  `implicit_getter` rule.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#3684](https://github.com/realm/SwiftLint/issues/3684)\r\n\r\n* Speed up explicit type interface rule.  \r\n  [PaulTaykalo](https://github.com/PaulTaykalo)\r\n  [#3745](https://github.com/realm/SwiftLint/issues/3745)\r\n\r\n* Speed up analyzer rules.  \r\n  [PaulTaykalo](https://github.com/PaulTaykalo)\r\n  [#3747](https://github.com/realm/SwiftLint/issues/3747)\r\n\r\n#### Bug Fixes\r\n\r\n* Fix a bug with the `missing_docs` rule where\r\n  `excludes_inherited_types` would not be set.  \r\n  [Ben Fox](https://github.com/bdfox325)\r\n\r\n* Fix redundant_optional_initialization autocorrect broken\r\n  in case observer's brace exists.\r\n  [Naruki Chigira](https://github.com/naru-jpn)\r\n  [#3718](https://github.com/realm/SwiftLint/issues/3718)\r\n\r\n* Fix a false positive in the `unneeded_break_in_switch` rule when\r\n  using `do/catch`.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#3724](https://github.com/realm/SwiftLint/issues/3724)\r\n\r\n* Speed up Computed Accessors Order rule.\r\n  [PaulTaykalo](https://github.com/PaulTaykalo)\r\n  [#3727](https://github.com/realm/SwiftLint/issues/3727)\r\n\r\n* [Colon Rule] Fix case when comment is used in function call.\r\n  [PaulTaykalo](https://github.com/PaulTaykalo)\r\n  [#3740](https://github.com/realm/SwiftLint/issues/3740)",
    "createdAt" : "2021-10-19T00:57:38+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "RE_kwDOAiE69s4DEqHm",
    "owner" : "realm",
    "publishedAt" : "2021-10-19T00:58:19+09:00",
    "repository" : "SwiftLint",
    "title" : "0.45.0: Effectful Apparel",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.45.0",
    "version" : "0.45.0"
  },
  {
    "body" : "#### Breaking\r\n\r\n* None.\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* Update Rule list documentation to distinguish between opt-in and\r\n  on-by-default rules.  \r\n  [Benny Wong](https://github.com/bdotdub)\r\n\r\n* Add opt-in `prefer_self_in_static_references` rule to warn if the\r\n  type name is used to reference static members the same type.\r\n  Prefer using `Self` instead which is not affected by renamings.  \r\n  [SimplyDanny](https://github.com/simplydanny)\r\n\r\n* Add support for running SwiftLint as a\r\n  [pre-commit](https://pre-commit.com/) hook.  \r\n  [Jesse Crocker](https://github.com/JesseCrocker)\r\n  [Hannes Ljungberg](https://github.com/hannseman)\r\n\r\n#### Bug Fixes\r\n\r\n* Fix `unused_import` rule incorrectly considering `SwiftShims` as a\r\n  used import.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Fix false positives on `large_tuple` rule when using `async` closures.  \r\n  [Kaitlin Mahar](https://github.com/kmahar)\r\n  [#3753](https://github.com/realm/SwiftLint/issues/3753)\r\n\r\n* Fix false positive on `legacy_objc_type` rule when using\r\n  types with names that start with a legacy type name.  \r\n  [Isaac Ressler](https://github.com/iressler)\r\n  [#3555](https://github.com/realm/SwiftLint/issues/3555)",
    "createdAt" : "2021-11-30T06:47:21+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "RE_kwDOAiE69s4DPC_Y",
    "owner" : "realm",
    "publishedAt" : "2021-11-30T06:52:18+09:00",
    "repository" : "SwiftLint",
    "title" : "0.45.1: Clothes Drying Hooks",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.45.1",
    "version" : "0.45.1"
  },
  {
    "body" : "#### Breaking\r\n\r\n* The `weak_delegate` rule has been deprecated due to its high false\r\n  positive rate. The identifier will become invalid in a future\r\n  release.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#2786](https://github.com/realm/SwiftLint/issues/2786)\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* Official Docker images are now available. See the\r\n  [Docker section of the README](README.md#docker) for usage\r\n  instructions.  \r\n  [Francisco Javier Trujillo Mata](https://github.com/fjtrujy)\r\n\r\n* Allow `unused_setter_value` for overrides.  \r\n  [Adrian Debbeler](https://github.com/grosem)\r\n  [#2585](https://github.com/realm/SwiftLint/issues/2585)\r\n\r\n#### Bug Fixes\r\n\r\n* Fix `convenience_type` false positives when using actors.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3770](https://github.com/realm/SwiftLint/issues/3770)\r\n\r\n* Fix false positives in the `prefer_self_in_static_references` rule.  \r\n  [SimplyDanny](https://github.com/simplydanny)\r\n  [#3768](https://github.com/realm/SwiftLint/issues/3768)\r\n\r\n* Fix the regex for expiring TODO comments.  \r\n  [Sergei Shirokov](https://github.com/serges147)\r\n  [#3767](https://github.com/realm/SwiftLint/issues/3767)\r\n\r\n* Fix crash when parsing multi-line attributes with the `attributes`\r\n  rule.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3761](https://github.com/realm/SwiftLint/issues/3761)\r\n\r\n* Fix false positives in `unused_closure_parameter` when using\r\n  list element bindings in SwiftUI.  \r\n  [Paul Williamson](https://github.com/squarefrog)\r\n  [#3790](https://github.com/realm/SwiftLint/issues/3790)\r\n\r\n* Fix the cache path not being properly set when using nested\r\n  configurations.  \r\n  [Andr√©s Cecilia Luque](https://github.com/acecilia)",
    "createdAt" : "2022-01-22T05:57:49+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "RE_kwDOAiE69s4DcMJp",
    "owner" : "realm",
    "publishedAt" : "2022-01-22T05:59:17+09:00",
    "repository" : "SwiftLint",
    "title" : "0.46.0: Detergent Container",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.46.0",
    "version" : "0.46.0"
  },
  {
    "body" : "#### Breaking\r\n\r\n* The `weak_delegate` rule has been opt-in due to its high false\r\n  positive rate.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#2786](https://github.com/realm/SwiftLint/issues/2786)\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* Official Docker images are now available. See the\r\n  [Docker section of the README](README.md#docker) for usage\r\n  instructions.  \r\n  [Francisco Javier Trujillo Mata](https://github.com/fjtrujy)\r\n\r\n* Allow `unused_setter_value` for overrides.  \r\n  [Adrian Debbeler](https://github.com/grosem)\r\n  [#2585](https://github.com/realm/SwiftLint/issues/2585)\r\n\r\n#### Bug Fixes\r\n\r\n* Fix `convenience_type` false positives when using actors.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3770](https://github.com/realm/SwiftLint/issues/3770)\r\n\r\n* Fix false positives in the `prefer_self_in_static_references` rule.  \r\n  [SimplyDanny](https://github.com/simplydanny)\r\n  [#3768](https://github.com/realm/SwiftLint/issues/3768)\r\n\r\n* Fix the regex for expiring TODO comments.  \r\n  [Sergei Shirokov](https://github.com/serges147)\r\n  [#3767](https://github.com/realm/SwiftLint/issues/3767)\r\n\r\n* Fix crash when parsing multi-line attributes with the `attributes`\r\n  rule.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3761](https://github.com/realm/SwiftLint/issues/3761)\r\n\r\n* Fix false positives in `unused_closure_parameter` when using\r\n  list element bindings in SwiftUI.  \r\n  [Paul Williamson](https://github.com/squarefrog)\r\n  [#3790](https://github.com/realm/SwiftLint/issues/3790)\r\n\r\n* Fix the cache path not being properly set when using nested\r\n  configurations.  \r\n  [Andr√©s Cecilia Luque](https://github.com/acecilia)",
    "createdAt" : "2022-01-22T07:00:35+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "RE_kwDOAiE69s4DcNC3",
    "owner" : "realm",
    "publishedAt" : "2022-01-22T07:02:16+09:00",
    "repository" : "SwiftLint",
    "title" : "0.46.1: Detergent Container",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.46.1",
    "version" : "0.46.1"
  },
  {
    "body" : "#### Breaking\r\n\r\n* None.\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* None.\r\n\r\n#### Bug Fixes\r\n\r\n* Fix SwiftLint.pkg installer on macOS 11 or later.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3815](https://github.com/realm/SwiftLint/issues/3815)\r\n\r\n* Ignore `prefer_self_in_static_references` rule in extensions\r\n  generally.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#3775](https://github.com/realm/SwiftLint/issues/3775)\r\n\r\n* Fix `class_delegate_protocol` false positives when using `where`\r\n  clause.  \r\n  [Steven Magdy](https://github.com/StevenMagdy)",
    "createdAt" : "2022-01-27T23:16:25+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "RE_kwDOAiE69s4Ddo9q",
    "owner" : "realm",
    "publishedAt" : "2022-01-27T23:17:53+09:00",
    "repository" : "SwiftLint",
    "title" : "0.46.2: Detergent Package",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.46.2",
    "version" : "0.46.2"
  },
  {
    "body" : "#### Breaking\r\n\r\n* None.\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* Change fingerprint generation in `CodeClimateReporter.swift` to use\r\n  the relative file path to better support CI/CD on multiple machines.  \r\n  [HA Pors](https://github.com/hpors)\r\n\r\n#### Bug Fixes\r\n\r\n* Fix crash in the `closure_end_indentation` rule when linting with\r\n  Swift 5.6.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3830](https://github.com/realm/SwiftLint/issues/3830)\r\n  \r\n* Fix default rules section in documentation.  \r\n  [Natan Rolnik](https://github.com/natanrolnik)\r\n  [#3857](https://github.com/realm/SwiftLint/pull/3857)",
    "createdAt" : "2022-02-23T05:29:40+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "RE_kwDOAiE69s4DlhYU",
    "owner" : "realm",
    "publishedAt" : "2022-02-23T05:30:53+09:00",
    "repository" : "SwiftLint",
    "title" : "0.46.3: Detergent Spill",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.46.3",
    "version" : "0.46.3"
  },
  {
    "body" : "#### Breaking\r\n\r\n* None.\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* None.\r\n\r\n#### Bug Fixes\r\n\r\n* Fix `empty_parentheses_with_trailing_closure` rule when using Swift 5.6.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#3846](https://github.com/realm/SwiftLint/issues/3846)\r\n\r\n* Fix false negatives in `closure_parameter_position` rule with Swift 5.6.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#3845](https://github.com/realm/SwiftLint/issues/3845)\r\n\r\n* Fix regression in `last_where` rule when using Swift 5.6.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#3847](https://github.com/realm/SwiftLint/issues/3847)\r\n\r\n* Fix regression in `unused_import` rule when using Swift 5.6.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3849](https://github.com/realm/SwiftLint/issues/3849)\r\n\r\n* Fix regression in `trailing_closure` rule when using Swift 5.6.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#3848](https://github.com/realm/SwiftLint/issues/3848)",
    "createdAt" : "2022-03-09T06:18:50+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "RE_kwDOAiE69s4Dp6Pi",
    "owner" : "realm",
    "publishedAt" : "2022-03-09T06:21:18+09:00",
    "repository" : "SwiftLint",
    "title" : "0.46.5: Laundry Studio",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.46.5",
    "version" : "0.46.5"
  },
  {
    "body" : "This is a prerelease version. It won't be published to Homebrew or CocoaPods. But there are many other ways to install:\r\n\r\n* Downloading the attached `SwiftLint.pkg` installer and launching it\r\n* Downloading the attached `portable_swiftlint.zip` archive, extracting it and moving the binary from `portable_swiftlint/swiftlint` to `/usr/local/bin` or elsewhere in your `PATH`\r\n* Using [Mint](https://github.com/yonaskolb/Mint): `mint install realm/SwiftLint@0.47.0-rc.1`\r\n* Cloning and building from source: `git clone https://github.com/realm/SwiftLint.git && cd SwiftLint && git checkout 0.47.0-rc.1 && make install`\r\n* Docker: ```docker run -it -v `pwd`:`pwd` -w `pwd` ghcr.io/realm/swiftlint:0.47.0-rc.1```\r\n\r\nChanges from 0.46.5: https://github.com/realm/SwiftLint/compare/0.46.5...0.47.0-rc.1\r\n\r\n#### Breaking\r\n\r\n* SwiftLint now requires Swift 5.5 or higher to build.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* The `SwiftLintFramework` podspec has been removed. To our knowledge, this was\r\n  completely unused by other projects and was not worth the complexity needed\r\n  to justify its continued maintenance, especially in light of the integration\r\n  of SwiftSyntax. The `SwiftLint` podspec is still supported.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n#### Experimental\r\n\r\n* The `force_cast` rule and the comment command parsing mechanism have been\r\n  updated to use SwiftSyntax instead of SourceKit. Please report any problems\r\n  you encounter by opening a GitHub issue. If this is successful, more rules may\r\n  use Swift Syntax in the future.  \r\n  [JP Simard](https://github.com/jpsim)",
    "createdAt" : "2022-03-09T11:03:31+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "RE_kwDOAiE69s4Dp9kI",
    "owner" : "realm",
    "publishedAt" : "2022-03-09T11:13:32+09:00",
    "repository" : "SwiftLint",
    "title" : "0.47.0-rc.1: Smart Appliance",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.47.0-rc.1",
    "version" : "0.47.0-rc.1"
  },
  {
    "body" : "#### Breaking\r\n\r\n* None.\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* None.\r\n\r\n#### Bug Fixes\r\n\r\n* Ignore meta class types in `prefer_self_in_static_references` rule.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#3804](https://github.com/realm/SwiftLint/issues/3804)\r\n\r\n* Ignore MARK in multiline comment, fixing cases that would previously crash or\r\n  produce invalid results when correcting.  \r\n  [goranche](https://github.com/goranche)\r\n  [#1749](https://github.com/realm/SwiftLint/issues/1749)\r\n  [#3841](https://github.com/realm/SwiftLint/issues/3841)\r\n\r\n* Fix false positive in `EmptyEnumArgumentsRule` rule when using Swift 5.6.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#3850](https://github.com/realm/SwiftLint/issues/3850)",
    "createdAt" : "2022-03-08T01:15:27+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "RE_kwDOAiE69s4DpV2Q",
    "owner" : "realm",
    "publishedAt" : "2022-03-08T01:16:11+09:00",
    "repository" : "SwiftLint",
    "title" : "0.46.4: Detergent Tray",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.46.4",
    "version" : "0.46.4"
  },
  {
    "body" : "This is a prerelease version. It won't be published to Homebrew or CocoaPods. But there are many other ways to install:\r\n\r\n* Downloading the attached `SwiftLint.pkg` installer and launching it\r\n* Downloading the attached `portable_swiftlint.zip` archive, extracting it and moving the binary from `portable_swiftlint/swiftlint` to `/usr/local/bin` or elsewhere in your `PATH`\r\n* Using [Mint](https://github.com/yonaskolb/Mint): `mint install realm/SwiftLint@0.47.0-rc.2`\r\n* Cloning and building from source: `git clone https://github.com/realm/SwiftLint.git && cd SwiftLint && git checkout 0.47.0-rc.2 && make install`\r\n* Docker: ```docker run -it -v `pwd`:`pwd` -w `pwd` ghcr.io/realm/swiftlint:0.47.0-rc.2```\r\n\r\nChanges from 0.46.5: https://github.com/realm/SwiftLint/compare/0.46.5...0.47.0-rc.2\r\nChanges from 0.47.0-rc.1: https://github.com/realm/SwiftLint/compare/0.47.0-rc.1...0.47.0-rc.2\r\n\r\n#### Breaking\r\n\r\n* SwiftLint now requires Swift 5.5 or higher to build.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* The `SwiftLintFramework` podspec has been removed. To our knowledge, this was\r\n  completely unused by other projects and was not worth the complexity needed\r\n  to justify its continued maintenance, especially in light of the integration\r\n  of SwiftSyntax. The `SwiftLint` podspec is still supported.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* SwiftLint now requires at least Swift 5.0 installed in order to lint files.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n\r\n#### Experimental\r\n\r\n* The `force_cast` rule and the comment command parsing mechanism have been\r\n  updated to use SwiftSyntax instead of SourceKit. Please report any problems\r\n  you encounter by opening a GitHub issue. If this is successful, more rules may\r\n  use Swift Syntax in the future.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n#### Enhancements\r\n\r\n* Empty files no longer trigger any violations.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3854](https://github.com/realm/SwiftLint/issues/3854)\r\n\r\n* Support recursive globs.  \r\n  [funzin](https://github.com/funzin)\r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3789](https://github.com/realm/SwiftLint/issues/3789)\r\n  [#3891](https://github.com/realm/SwiftLint/issues/3891)\r\n\r\n* The `legacy_random` rule is now enabled by default.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n\r\n* The `deployment_target` rule now supports the `#unavailable` syntax\r\n  added in Swift 5.6.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#3896](https://github.com/realm/SwiftLint/issues/3896)\r\n\r\n* Add `IN_PROCESS_SOURCEKIT` environment variable, which uses\r\n  the in-process version of sourcekitd on macOS when Xcode 13 or later is\r\n  selected. This avoids the use of XPC, which is prohibited in some sandboxed\r\n  environments, such as in Swift Package Manager plugins.  \r\n  [Juozas Valancius](https://github.com/juozasvalancius)\r\n\r\n#### Bug Fixes\r\n\r\n* Extend `class_delegate_protocol` to correctly identify cases with the protocol\r\n  body opening brace on a new line.  \r\n  [Tobisaninfo](https://github.com/Tobisaninfo)\r\n\r\n* Fix SwiftLint.pkg installer installing multiple copies of SwiftLint.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3815](https://github.com/realm/SwiftLint/issues/3815)\r\n  [#3887](https://github.com/realm/SwiftLint/issues/3887)",
    "createdAt" : "2022-03-16T23:35:16+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "RE_kwDOAiE69s4DsiV8",
    "owner" : "realm",
    "publishedAt" : "2022-03-16T23:37:44+09:00",
    "repository" : "SwiftLint",
    "title" : "0.47.0-rc.2: Smart Appliance",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.47.0-rc.2",
    "version" : "0.47.0-rc.2"
  },
  {
    "body" : "This is a prerelease version. It won't be published to Homebrew or CocoaPods. But there are many other ways to install:\r\n\r\n* Downloading the attached `SwiftLint.pkg` installer and launching it\r\n* Downloading the attached `portable_swiftlint.zip` archive, extracting it and moving the binary from `portable_swiftlint/swiftlint` to `/usr/local/bin` or elsewhere in your `PATH`\r\n* Using [Mint](https://github.com/yonaskolb/Mint): `mint install realm/SwiftLint@0.47.0-rc.3`\r\n* Cloning and building from source: `git clone https://github.com/realm/SwiftLint.git && cd SwiftLint && git checkout 0.47.0-rc.3 && make install`\r\n* Docker: ```docker run -it -v `pwd`:`pwd` -w `pwd` ghcr.io/realm/swiftlint:0.47.0-rc.3```\r\n\r\nChanges from 0.46.5: https://github.com/realm/SwiftLint/compare/0.46.5...0.47.0-rc.3\r\nChanges from 0.47.0-rc.2: https://github.com/realm/SwiftLint/compare/0.47.0-rc.2...0.47.0-rc.3\r\n\r\n#### Breaking\r\n\r\n* SwiftLint now requires Swift 5.5 or higher to build.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* The `SwiftLintFramework` podspec has been removed. To our knowledge, this was\r\n  completely unused by other projects and was not worth the complexity needed\r\n  to justify its continued maintenance, especially in light of the integration\r\n  of SwiftSyntax. The `SwiftLint` podspec is still supported.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* SwiftLint now requires at least Swift 5.0 installed in order to lint files.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n\r\n#### Experimental\r\n\r\n* The `force_cast` rule and the comment command parsing mechanism have been\r\n  updated to use SwiftSyntax instead of SourceKit. Please report any problems\r\n  you encounter by opening a GitHub issue. If this is successful, more rules may\r\n  use Swift Syntax in the future.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n#### Enhancements\r\n\r\n* Empty files no longer trigger any violations.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3854](https://github.com/realm/SwiftLint/issues/3854)\r\n\r\n* Support recursive globs.  \r\n  [funzin](https://github.com/funzin)\r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3789](https://github.com/realm/SwiftLint/issues/3789)\r\n  [#3891](https://github.com/realm/SwiftLint/issues/3891)\r\n\r\n* The `legacy_random` rule is now enabled by default.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n\r\n* The `deployment_target` rule now supports the `#unavailable` syntax\r\n  added in Swift 5.6.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#3896](https://github.com/realm/SwiftLint/issues/3896)\r\n\r\n* SwiftSyntax has been updated to its Swift 5.6 release and may improve parsing\r\n  of Swift 5.6 code.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Add `IN_PROCESS_SOURCEKIT` environment variable, which uses\r\n  the in-process version of sourcekitd on macOS when Xcode 13 or later is\r\n  selected. This avoids the use of XPC, which is prohibited in some sandboxed\r\n  environments, such as in Swift Package Manager plugins.  \r\n  [Juozas Valancius](https://github.com/juozasvalancius)\r\n\r\n#### Bug Fixes\r\n\r\n* Extend `class_delegate_protocol` to correctly identify cases with the protocol\r\n  body opening brace on a new line.  \r\n  [Tobisaninfo](https://github.com/Tobisaninfo)\r\n\r\n* Fix SwiftLint.pkg installer installing multiple copies of SwiftLint.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3815](https://github.com/realm/SwiftLint/issues/3815)\r\n  [#3887](https://github.com/realm/SwiftLint/issues/3887)",
    "createdAt" : "2022-03-18T03:38:23+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "RE_kwDOAiE69s4DtAJi",
    "owner" : "realm",
    "publishedAt" : "2022-03-18T04:04:04+09:00",
    "repository" : "SwiftLint",
    "title" : "0.47.0-rc.3: Smart Appliance",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.47.0-rc.3",
    "version" : "0.47.0-rc.3"
  },
  {
    "body" : "This is a prerelease version. It won't be published to Homebrew or CocoaPods. But there are many other ways to install:\r\n\r\n* Downloading the attached `SwiftLint.pkg` installer and launching it\r\n* Downloading the attached `portable_swiftlint.zip` archive, extracting it and moving the binary from `portable_swiftlint/swiftlint` to `/usr/local/bin` or elsewhere in your `PATH`\r\n* Using [Mint](https://github.com/yonaskolb/Mint): `mint install realm/SwiftLint@0.47.0-rc.4`\r\n* Cloning and building from source: `git clone https://github.com/realm/SwiftLint.git && cd SwiftLint && git checkout 0.47.0-rc.4 && make install`\r\n* Docker: ```docker run -it -v `pwd`:`pwd` -w `pwd` ghcr.io/realm/swiftlint:0.47.0-rc.4```\r\n\r\nChanges from 0.46.5: https://github.com/realm/SwiftLint/compare/0.46.5...0.47.0-rc.4\r\nChanges from 0.47.0-rc.3: https://github.com/realm/SwiftLint/compare/0.47.0-rc.3...0.47.0-rc.4\r\n\r\n#### Breaking\r\n\r\n* SwiftLint now requires Swift 5.5 or higher to build.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* The `SwiftLintFramework` podspec has been removed. To our knowledge, this was\r\n  completely unused by other projects and was not worth the complexity needed\r\n  to justify its continued maintenance, especially in light of the integration\r\n  of SwiftSyntax. The `SwiftLint` podspec is still supported.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* SwiftLint now requires at least Swift 5.0 installed in order to lint files.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n\r\n#### Experimental\r\n\r\n* The `force_cast` rule and the comment command parsing mechanism have been\r\n  updated to use SwiftSyntax instead of SourceKit. Please report any problems\r\n  you encounter by opening a GitHub issue. If this is successful, more rules may\r\n  use Swift Syntax in the future.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n#### Enhancements\r\n\r\n* Empty files no longer trigger any violations.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3854](https://github.com/realm/SwiftLint/issues/3854)\r\n\r\n* Support recursive globs.  \r\n  [funzin](https://github.com/funzin)\r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3789](https://github.com/realm/SwiftLint/issues/3789)\r\n  [#3891](https://github.com/realm/SwiftLint/issues/3891)\r\n\r\n* The `legacy_random` rule is now enabled by default.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n\r\n* The `deployment_target` rule now supports the `#unavailable` syntax\r\n  added in Swift 5.6.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#3896](https://github.com/realm/SwiftLint/issues/3896)\r\n\r\n* Set the `IN_PROCESS_SOURCEKIT` environment variable, which will use\r\n  the in-process version of sourcekitd on macOS when Xcode 13 or later is\r\n  selected. This avoids the use of XPC, which is prohibited in some sandboxed\r\n  environments, such as in Swift Package Manager plugins.  \r\n  [Juozas Valancius](https://github.com/juozasvalancius)\r\n\r\n#### Bug Fixes\r\n\r\n* Extend `class_delegate_protocol` to correctly identify cases with the protocol\r\n  body opening brace on a new line.  \r\n  [Tobisaninfo](https://github.com/Tobisaninfo)\r\n\r\n* Fix SwiftLint.pkg installer installing multiple copies of SwiftLint.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3815](https://github.com/realm/SwiftLint/issues/3815)\r\n  [#3887](https://github.com/realm/SwiftLint/issues/3887)",
    "createdAt" : "2022-03-19T08:05:28+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "RE_kwDOAiE69s4DtZo3",
    "owner" : "realm",
    "publishedAt" : "2022-03-19T08:07:17+09:00",
    "repository" : "SwiftLint",
    "title" : "0.47.0-rc.4: Smart Appliance",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.47.0-rc.4",
    "version" : "0.47.0-rc.4"
  },
  {
    "body" : "#### Breaking\r\n\r\n* SwiftLint now requires Swift 5.5 or higher to build.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* The `SwiftLintFramework` podspec has been removed. To our knowledge, this was\r\n  completely unused by other projects and was not worth the complexity needed\r\n  to justify its continued maintenance, especially in light of the integration\r\n  of SwiftSyntax. The `SwiftLint` podspec is still supported.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* SwiftLint now requires at least Swift 5.0 installed in order to lint files.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n\r\n#### Experimental\r\n\r\n* The `force_cast` rule and the comment command parsing mechanism have been\r\n  updated to use SwiftSyntax instead of SourceKit. Please report any problems\r\n  you encounter by opening a GitHub issue. If this is successful, more rules may\r\n  use Swift Syntax in the future.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n#### Enhancements\r\n\r\n* Empty files no longer trigger any violations.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3854](https://github.com/realm/SwiftLint/issues/3854)\r\n\r\n* Support recursive globs.  \r\n  [funzin](https://github.com/funzin)\r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3789](https://github.com/realm/SwiftLint/issues/3789)\r\n  [#3891](https://github.com/realm/SwiftLint/issues/3891)\r\n\r\n* The `legacy_random` rule is now enabled by default.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n\r\n* The `deployment_target` rule now supports the `#unavailable` syntax\r\n  added in Swift 5.6.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#3896](https://github.com/realm/SwiftLint/issues/3896)\r\n\r\n* Set the `IN_PROCESS_SOURCEKIT` environment variable, which will use\r\n  the in-process version of sourcekitd on macOS when Xcode 13 or later is\r\n  selected. This avoids the use of XPC, which is prohibited in some sandboxed\r\n  environments, such as in Swift Package Manager plugins.  \r\n  [Juozas Valancius](https://github.com/juozasvalancius)\r\n\r\n* Add ability to run only one (focused) example.  \r\n  [PaulTaykalo](https://github.com/PaulTaykalo)\r\n  [#3911](https://github.com/realm/SwiftLint/issues/3911)\r\n\r\n#### Bug Fixes\r\n\r\n* Extend `class_delegate_protocol` to correctly identify cases with the protocol\r\n  body opening brace on a new line.  \r\n  [Tobisaninfo](https://github.com/Tobisaninfo)\r\n\r\n* Fix SwiftLint.pkg installer installing multiple copies of SwiftLint.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3815](https://github.com/realm/SwiftLint/issues/3815)\r\n  [#3887](https://github.com/realm/SwiftLint/issues/3887)",
    "createdAt" : "2022-03-23T23:58:54+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "RE_kwDOAiE69s4DuwMs",
    "owner" : "realm",
    "publishedAt" : "2022-03-23T23:59:50+09:00",
    "repository" : "SwiftLint",
    "title" : "0.47.0: Smart Appliance",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.47.0",
    "version" : "0.47.0"
  },
  {
    "body" : "#### Breaking\r\n\r\n* SwiftLint now requires Swift 5.7 or higher to build.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Exclude `weak_delegate` rule from autocorrection due to behavioral changes\r\n  leading to potential undefined behavior or bugs.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#3577](https://github.com/realm/SwiftLint/issues/3577)\r\n\r\n* The `anyobject_protocol` rule is now deprecated and will be completely removed\r\n  in a future release because it is now handled by the Swift compiler.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Built-in SwiftLint rules are no longer marked as `public` in\r\n  SwiftLintFramework. This only impacts the programmatic API for the\r\n  SwiftLintFramework module.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* SwiftSyntax libraries have been updated from the previous 5.6 release and now\r\n  use the new parser written in Swift.\r\n  Swift 5.7+ features should now be parsed more accurately.\r\n  We've also measured an improvement in lint times of up to 15%.\r\n  This should also fix some deployment issues where the exact version of the\r\n  internal SwiftSyntax parser needed to be available.\r\n  If you notice any unexpected changes to lint results, please file an issue on\r\n  the SwiftLint issue tracker. We can look into it and if it's a SwiftSyntax\r\n  parser regression we can re-file it upstream.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#4031](https://github.com/realm/SwiftLint/issues/4031)\r\n\r\n* Rewrite some rules with SwiftSyntax, fixing some false positives and catching\r\n  more violations:\r\n  - `anonymous_argument_in_multiline_closure`\r\n  - `array_init`\r\n  - `attributes`\r\n  - `balanced_xctest_lifecycle`\r\n  - `block_based_kvo`\r\n  - `class_delegate_protocol`\r\n  - `closing_brace`\r\n  - `closure_body_length`\r\n  - `closure_parameter_position`\r\n  - `collection_alignment`\r\n  - `comment_spacing`\r\n  - `computed_accessors_order`\r\n  - `conditional_returns_on_newline`\r\n  - `contains_over_filter_count`\r\n  - `contains_over_filter_is_empty`\r\n  - `contains_over_first_not_nil`\r\n  - `contains_over_range_nil_comparison`\r\n  - `convenience_type`\r\n  - `deployment_target`\r\n  - `discarded_notification_center_observer`\r\n  - `discouraged_assert`\r\n  - `discouraged_direct_init`\r\n  - `discouraged_none_name`\r\n  - `discouraged_object_literal`\r\n  - `discouraged_optional_boolean`\r\n  - `duplicate_enum_cases`\r\n  - `duplicated_key_in_dictionary_literal`\r\n  - `dynamic_inline`\r\n  - `empty_collection_literal`\r\n  - `empty_count`\r\n  - `empty_enum_arguments`\r\n  - `empty_parameters`\r\n  - `empty_parentheses_with_trailing_closure`\r\n  - `empty_string`\r\n  - `enum_case_associated_values_count`\r\n  - `explicit_enum_raw_value`\r\n  - `explicit_init`\r\n  - `explicit_top_level_acl`\r\n  - `fallthrough`\r\n  - `file_name`\r\n  - `first_where`\r\n  - `flatmap_over_map_reduce`\r\n  - `for_where`\r\n  - `force_try`\r\n  - `force_unwrapping`\r\n  - `function_body_length`\r\n  - `function_default_parameter_at_end`\r\n  - `function_parameter_count`\r\n  - `generic_type_name`\r\n  - `ibinspectable_in_extension`\r\n  - `identical_operands`\r\n  - `implicit_getter`\r\n  - `implicitly_unwrapped_optional`\r\n  - `inclusive_language`\r\n  - `inert_defer`\r\n  - `is_disjoint`\r\n  - `joined_default_parameter`\r\n  - `large_tuple`\r\n  - `last_where`\r\n  - `legacy_cggeometry_functions`\r\n  - `legacy_constant`\r\n  - `legacy_constructor`\r\n  - `legacy_hashing`\r\n  - `legacy_multiple`\r\n  - `legacy_nsgeometry_functions`\r\n  - `legacy_objc_type`\r\n  - `legacy_random`\r\n  - `lower_acl_than_parent`\r\n  - `multiline_arguments_brackets`\r\n  - `multiline_parameters`\r\n  - `multiple_closures_with_trailing_closure`\r\n  - `no_extension_access_modifier`\r\n  - `no_fallthrough_only`\r\n  - `no_space_in_method_call`\r\n  - `notification_center_detachment`\r\n  - `nslocalizedstring_key`\r\n  - `nslocalizedstring_require_bundle`\r\n  - `nsobject_prefer_isequal`\r\n  - `number_separator`\r\n  - `object_literal`\r\n  - `operator_whitespace`\r\n  - `optional_enum_case_matching`\r\n  - `orphaned_doc_comment`\r\n  - `overridden_super_call`\r\n  - `override_in_extension`\r\n  - `pattern_matching_keywords`\r\n  - `prefer_nimble`\r\n  - `prefer_self_in_static_references`\r\n  - `prefer_self_type_over_type_of_self`\r\n  - `prefer_zero_over_explicit_init`\r\n  - `prefixed_toplevel_constant`\r\n  - `private_action`\r\n  - `private_outlet`\r\n  - `private_over_fileprivate`\r\n  - `private_subject`\r\n  - `private_unit_test`\r\n  - `prohibited_interface_builder`\r\n  - `prohibited_super_call`\r\n  - `protocol_property_accessors_order`\r\n  - `quick_discouraged_focused_test`\r\n  - `quick_discouraged_pending_test`\r\n  - `raw_value_for_camel_cased_codable_enum`\r\n  - `reduce_boolean`\r\n  - `reduce_into`\r\n  - `redundant_discardable_let`\r\n  - `redundant_nil_coalescing`\r\n  - `redundant_objc_attribute`\r\n  - `redundant_optional_initialization`\r\n  - `redundant_set_access_control`\r\n  - `redundant_string_enum_value`\r\n  - `required_deinit`\r\n  - `required_enum_case`\r\n  - `return_arrow_whitespace`\r\n  - `self_in_property_initialization`\r\n  - `shorthand_operator`\r\n  - `single_test_class`\r\n  - `sorted_first_last`\r\n  - `static_operator`\r\n  - `strict_fileprivate`\r\n  - `strong_iboutlet`\r\n  - `switch_case_alignment`\r\n  - `switch_case_on_newline`\r\n  - `test_case_accessibility`\r\n  - `toggle_bool`\r\n  - `trailing_comma`\r\n  - `trailing_semicolon`\r\n  - `type_body_length`\r\n  - `type_name`\r\n  - `unneeded_break_in_switch`\r\n  - `unneeded_parentheses_in_closure_argument`\r\n  - `unowned_variable_capture`\r\n  - `untyped_error_in_catch`\r\n  - `unused_capture_list`\r\n  - `unused_closure_parameter`\r\n  - `unused_control_flow_label`\r\n  - `unused_enumerated`\r\n  - `unused_optional_binding`\r\n  - `unused_setter_value`\r\n  - `valid_ibinspectable`\r\n  - `vertical_parameter_alignment`\r\n  - `weak_delegate`\r\n  - `xct_specific_matcher`\r\n  - `xctfail_message`  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [JP Simard](https://github.com/jpsim)\r\n  [#2915](https://github.com/realm/SwiftLint/issues/2915)\r\n\r\n* The \"body length\" family of rules have changed how they calculate body\r\n  line count to be significantly more correct and intuitive. However,\r\n  this is likely to require adjustments to your configuration or disable\r\n  commands to account for the changes.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Add ability to filter rules for `generate-docs` subcommand.  \r\n  [kattouf](https://github.com/kattouf)\r\n\r\n* Add new `excludes_trivial_init` configuration for `missing_docs` rule\r\n  to exclude initializers without any parameters.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#4107](https://github.com/realm/SwiftLint/issues/4107)\r\n\r\n* Add new `ns_number_init_as_function_reference` rule to catch `NSNumber.init`\r\n  and `NSDecimalNumber.init` being used as function references since it\r\n  can cause the wrong initializer to be used, causing crashes. See\r\n  https://github.com/apple/swift/issues/51036 for more info.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n\r\n* Add `accessibility_trait_for_button` rule to warn if a SwiftUI\r\n  View has a tap gesture added to it without having the button or\r\n  link accessibility trait.  \r\n  [Ryan Cole](https://github.com/rcole34)\r\n\r\n* Add methods from SE-0348 to `UnusedDeclarationRule`.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Include the configured `bind_identifier` in `self_binding` violation\r\n  messages.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* The `self_binding` rule now catches shorthand optional bindings (for example\r\n  `if let self {}`) when using a `bind_identifier` different than `self`.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n\r\n* Add `library_content_provider` file type to `file_types_order` rule \r\n  to allow `LibraryContentProvider` to be ordered independent from `main_type`.  \r\n  [dahlborn](https://github.com/dahlborn)\r\n\r\n* Add `test_parent_classes` option to `test_case_accessibility` rule, which\r\n  allows detection in subclasses of XCTestCase.  \r\n  [Martin Redington](https://github.com/mildm8nnered)\r\n  [#4200](https://github.com/realm/SwiftLint/issues/4200)\r\n\r\n* Add a new `shorthand_optional_binding` opt-in rule that triggers in Swift 5.7\r\n  when a shadowing optional binding is created in an `if` or `guard` statement.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4202](https://github.com/realm/SwiftLint/issues/4202)\r\n\r\n* Use SwiftSyntax instead of SourceKit to determine if a file has parser errors\r\n  before applying corrections. This speeds up corrections significantly when\r\n  none of the rules use SourceKit.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Add Swift Package Build Tool Plugin with support for Swift Packages\r\n  and Xcode projects.  \r\n  [Johannes Ebeling](https://github.com/technocidal)\r\n  [#3679](https://github.com/realm/SwiftLint/issues/3679)\r\n  [#3840](https://github.com/realm/SwiftLint/issues/3840)\r\n\r\n* Make `private_unit_test` rule correctable.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n\r\n* Disregard whitespace differences in `identical_operands` rule. That is, the rule\r\n  now also triggers if the left-hand side and the right-hand side of an operation\r\n  only differ in trivia.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n\r\n* Print violations in realtime if `--progress` and `--output` are both set.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Trigger `prefer_self_in_static_references` rule on more type references like:\r\n  * Key paths (e.g. `\\MyType.myVar` -> `\\Self.myVar`)\r\n  * Computed properties (e.g. `var i: Int { MyType.myVar )` -> `var i: Int { Self.myVar }`)\r\n  * Constructor calls (e.g. `MyType()` -> `Self()`)\r\n  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n\r\n* Update `for_where` rule, adding a new configuration\r\n  `allow_for_as_filter` to allow using `for in` with a single `if` inside\r\n  when there's a `return` statement inside the `if`'s body.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#4040](https://github.com/realm/SwiftLint/issues/4040)\r\n\r\n* `quick_discouraged_call`, `quick_discouraged_focused_test` and\r\n  `quick_discouraged_pending_test` rules now trigger on subclasses of\r\n  `QuickSpec`.\r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#4420](https://github.com/realm/SwiftLint/issues/4420)\r\n\r\n* The `type_name` rule now validates protocol declarations by default.\r\n  You can opt-out by using the `validate_protocols` key in your configuration:\r\n  ```yml\r\n  type_name:\r\n    validate_protocols: false\r\n  ```\r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#4430](https://github.com/realm/SwiftLint/issues/4430)\r\n\r\n* Report how much memory was used when `--benchmark` is specified.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Adds `NSError` to the list of types in `discouraged_direct_init`.  \r\n  [jszumski](https://github.com/jszumski)\r\n  [#4508](https://github.com/realm/SwiftLint/issues/4508)\r\n\r\n* Fix SwiftLint support on Xcode Cloud.  \r\n  [JagCesar](https://github.com/JagCesar)\r\n  [westerlund](https://github.com/westerlund)\r\n  [#4484](https://github.com/realm/SwiftLint/issues/4484)\r\n\r\n* Add `no_magic_numbers` rule to avoid \"Magic Numbers\".  \r\n  [Henrik Storch](https://github.com/thisisthefoxe)\r\n  [#4031](https://github.com/realm/SwiftLint/issues/4024)\r\n\r\n* Add new option `only_enforce_before_trivial_lines` to\r\n  `vertical_whitespace_closing_braces` rule. It restricts\r\n  the rule to apply only before trivial lines (containing\r\n  only closing braces, brackets and parentheses). This\r\n  allows empty lines before non-trivial lines of code\r\n  (e.g. if-else-statements).  \r\n  [benjamin-kramer](https://github.com/benjamin-kramer)\r\n  [#3940](https://github.com/realm/SwiftLint/issues/3940)\r\n\r\n#### Bug Fixes\r\n\r\n* Respect `validates_start_with_lowercase` option when linting function names.  \r\n  [Chris Brakebill](https://github.com/braker1nine)\r\n  [#2708](https://github.com/realm/SwiftLint/issues/2708)\r\n\r\n* Do not report variables annotated with `@NSApplicationDelegateAdaptor` and\r\n  `@WKExtensionDelegateAdaptor` in `weak_delegate` rule.  \r\n  [Till Hainbach](https://github.com/tillhainbach)\r\n  [#3598](https://github.com/realm/SwiftLint/issues/3456)\r\n  [#3611](https://github.com/realm/SwiftLint/issues/3611)\r\n\r\n* Fix false-positives related to the `willMove` lifecycle method in\r\n  `type_contents_order` rule.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#3478](https://github.com/realm/SwiftLint/issues/3478)\r\n\r\n* Do no longer autocorrect usage of `NSIntersectionRect` in `legacy_nsgeometry_functions`\r\n  rule.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#3703](https://github.com/realm/SwiftLint/issues/3703)\r\n\r\n* Fix Analyzer rules in Xcode 14.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4208](https://github.com/realm/SwiftLint/issues/4208)\r\n\r\n* Add column for SourceKit usage to `rules` command.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Make `nsobject_prefer_isequal` rule work for nested `@objc` classes. Also consider\r\n  the `@objcMembers` annotation.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n\r\n* Print fixed content at most once to STDOUT.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4211](https://github.com/realm/SwiftLint/issues/4211)\r\n\r\n* Fix fatal error when content given via STDIN is corrected in the\r\n  `trailing_newline` rule.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4234](https://github.com/realm/SwiftLint/issues/4234)\r\n\r\n* Fix false-positives from `multiline_arguments_brackets` when a function call has a\r\n  single line trailing closure.  \r\n  [CraigSiemens](https://github.com/CraigSiemens)\r\n  [#4510](https://github.com/realm/SwiftLint/issues/4510)\r\n\r\n---\r\n\r\n### Using Bazel\r\n\r\nPut this in your `WORKSPACE`:\r\n\r\n<details>\r\n\r\n<summary>WORKSPACE</summary>\r\n\r\n```python\r\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\r\n\r\nhttp_archive(\r\n    name = \"build_bazel_rules_apple\",\r\n    sha256 = \"f94e6dddf74739ef5cb30f000e13a2a613f6ebfa5e63588305a71fce8a8a9911\",\r\n    url = \"https://github.com/bazelbuild/rules_apple/releases/download/1.1.3/rules_apple.1.1.3.tar.gz\",\r\n)\r\n\r\nload(\r\n    \"@build_bazel_rules_apple//apple:repositories.bzl\",\r\n    \"apple_rules_dependencies\",\r\n)\r\n\r\napple_rules_dependencies()\r\n\r\nload(\r\n    \"@build_bazel_rules_swift//swift:repositories.bzl\",\r\n    \"swift_rules_dependencies\",\r\n)\r\n\r\nswift_rules_dependencies()\r\n\r\nload(\r\n    \"@build_bazel_rules_swift//swift:extras.bzl\",\r\n    \"swift_rules_extra_dependencies\",\r\n)\r\n\r\nswift_rules_extra_dependencies()\r\n\r\nhttp_archive(\r\n    name = \"SwiftLint\",\r\n    sha256 = \"c99be76ea5efd6ff7e60b6df8a11b709d50c75dfdbd6fb429de9bbe9e45cdb1f\",\r\n    url = \"https://github.com/realm/SwiftLint/releases/download/0.50.0/bazel.tar.gz\",\r\n)\r\n\r\nload(\"@SwiftLint//bazel:repos.bzl\", \"swiftlint_repos\")\r\n\r\nswiftlint_repos()\r\n\r\nload(\"@SwiftLint//bazel:deps.bzl\", \"swiftlint_deps\")\r\n\r\nswiftlint_deps()\r\n```\r\n\r\n</details>\r\n\r\nThen you can run SwiftLint in the current directory with this command:\r\n\r\n```console\r\nbazel run @SwiftLint//:swiftlint -- --help\r\n```",
    "createdAt" : "2022-11-19T04:43:44+09:00",
    "fetchedFromAPIAt" : "2022-11-19T09:53:29+09:00",
    "id" : "RE_kwDOAiE69s4E-6Ww",
    "owner" : "realm",
    "publishedAt" : "2022-11-19T04:46:02+09:00",
    "repository" : "SwiftLint",
    "title" : "0.50.0: Artisanal Clothes Pegs",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.50.0",
    "version" : "0.50.0"
  },
  {
    "body" : "This is a prerelease version. It won't be published to Homebrew or CocoaPods. But there are many other ways to install:\r\n\r\n* Downloading the attached `SwiftLint.pkg` installer and launching it\r\n* Downloading the attached `portable_swiftlint.zip` archive, extracting it and moving the binary from `portable_swiftlint/swiftlint` to `/usr/local/bin` or elsewhere in your `PATH`\r\n* Using [Mint](https://github.com/yonaskolb/Mint): `mint install realm/SwiftLint@0.50.0-rc.3`\r\n* Cloning and building from source: `git clone https://github.com/realm/SwiftLint.git && cd SwiftLint && git checkout 0.50.0-rc.3 && make install`\r\n* Docker: ```docker run -it -v `pwd`:`pwd` -w `pwd` ghcr.io/realm/swiftlint:0.50.0-rc.3```\r\n* Bazel: See instructions at the bottom\r\n\r\nChanges from 0.49.1: https://github.com/realm/SwiftLint/compare/0.49.1...0.50.0-rc.3\r\nChanges from 0.50.0-rc.2: https://github.com/realm/SwiftLint/compare/0.50.0-rc.2...0.50.0-rc.3\r\n\r\n---\r\n\r\n#### Breaking\r\n\r\n* SwiftLint now requires Swift 5.7 or higher to build.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Exclude `weak_delegate` rule from autocorrection due to behavioral changes\r\n  leading to potential undefined behavior or bugs.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#3577](https://github.com/realm/SwiftLint/issues/3577)\r\n\r\n* The `anyobject_protocol` rule is now deprecated and will be completely removed\r\n  in a future release because it is now handled by the Swift compiler.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* SwiftSyntax libraries have been updated from the previous 5.6 release and now\r\n  use the new parser written in Swift.\r\n  Swift 5.7+ features should now be parsed more accurately.\r\n  We've also measured an improvement in lint times of up to 15%.\r\n  This should also fix some deployment issues where the exact version of the\r\n  internal SwiftSyntax parser needed to be available.\r\n  If you notice any unexpected changes to lint results, please file an issue on\r\n  the SwiftLint issue tracker. We can look into it and if it's a SwiftSyntax\r\n  parser regression we can re-file it upstream.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#4031](https://github.com/realm/SwiftLint/issues/4031)\r\n\r\n* Add ability to filter rules for `generate-docs` subcommand.  \r\n  [kattouf](https://github.com/kattouf)\r\n\r\n* Add new `excludes_trivial_init` configuration for `missing_docs` rule\r\n  to exclude initializers without any parameters.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#4107](https://github.com/realm/SwiftLint/issues/4107)\r\n\r\n* Add new `ns_number_init_as_function_reference` rule to catch `NSNumber.init`\r\n  and `NSDecimalNumber.init` being used as function references since it\r\n  can cause the wrong initializer to be used, causing crashes. See\r\n  https://github.com/apple/swift/issues/51036 for more info.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n\r\n* Rewrite some rules with SwiftSyntax, fixing some false positives and catching\r\n  more violations:\r\n  - `anonymous_argument_in_multiline_closure`\r\n  - `array_init`\r\n  - `attributes`\r\n  - `block_based_kvo`\r\n  - `class_delegate_protocol`\r\n  - `closing_brace`\r\n  - `closure_body_length`\r\n  - `closure_parameter_position`\r\n  - `collection_alignment`\r\n  - `comment_spacing`\r\n  - `computed_accessors_order`\r\n  - `conditional_returns_on_newline`\r\n  - `contains_over_filter_count`\r\n  - `contains_over_filter_is_empty`\r\n  - `contains_over_first_not_nil`\r\n  - `contains_over_range_nil_comparison`\r\n  - `convenience_type`\r\n  - `deployment_target`\r\n  - `discarded_notification_center_observer`\r\n  - `discouraged_assert`\r\n  - `discouraged_direct_init`\r\n  - `discouraged_none_name`\r\n  - `discouraged_object_literal`\r\n  - `discouraged_optional_boolean`\r\n  - `duplicate_enum_cases`\r\n  - `duplicated_key_in_dictionary_literal`\r\n  - `dynamic_inline`\r\n  - `empty_collection_literal`\r\n  - `empty_count`\r\n  - `empty_enum_arguments`\r\n  - `empty_parameters`\r\n  - `empty_parentheses_with_trailing_closure`\r\n  - `empty_string`\r\n  - `enum_case_associated_values_count`\r\n  - `explicit_enum_raw_value`\r\n  - `explicit_init`\r\n  - `explicit_top_level_acl`\r\n  - `fallthrough`\r\n  - `file_name`\r\n  - `first_where`\r\n  - `flatmap_over_map_reduce`\r\n  - `for_where`\r\n  - `force_try`\r\n  - `force_unwrapping`\r\n  - `function_body_length`\r\n  - `function_default_parameter_at_end`\r\n  - `function_parameter_count`\r\n  - `generic_type_name`\r\n  - `ibinspectable_in_extension`\r\n  - `identical_operands`\r\n  - `implicit_getter`\r\n  - `implicitly_unwrapped_optional`\r\n  - `inclusive_language`\r\n  - `inert_defer`\r\n  - `is_disjoint`\r\n  - `joined_default_parameter`\r\n  - `large_tuple`\r\n  - `last_where`\r\n  - `legacy_cggeometry_functions`\r\n  - `legacy_constant`\r\n  - `legacy_constructor`\r\n  - `legacy_hashing`\r\n  - `legacy_multiple`\r\n  - `legacy_nsgeometry_functions`\r\n  - `legacy_objc_type`\r\n  - `legacy_random`\r\n  - `lower_acl_than_parent`\r\n  - `multiple_closures_with_trailing_closure`\r\n  - `multiline_parameters`\r\n  - `no_extension_access_modifier`\r\n  - `no_fallthrough_only`\r\n  - `no_space_in_method_call`\r\n  - `notification_center_detachment`\r\n  - `nslocalizedstring_require_bundle`\r\n  - `nsobject_prefer_isequal`\r\n  - `number_separator`\r\n  - `operator_whitespace`\r\n  - `override_in_extension`\r\n  - `nsobject_prefer_isequal`\r\n  - `prefer_nimble`\r\n  - `prefer_self_type_over_type_of_self`\r\n  - `prefer_zero_over_explicit_init`\r\n  - `prefixed_toplevel_constant`\r\n  - `private_action`\r\n  - `private_over_fileprivate`\r\n  - `private_outlet`\r\n  - `private_unit_test`\r\n  - `prohibited_interface_builder`\r\n  - `protocol_property_accessors_order`\r\n  - `quick_discouraged_focused_test`\r\n  - `quick_discouraged_pending_test`\r\n  - `raw_value_for_camel_cased_codable_enum`\r\n  - `reduce_boolean`\r\n  - `reduce_into`\r\n  - `redundant_discardable_let`\r\n  - `redundant_nil_coalescing`\r\n  - `redundant_objc_attribute`\r\n  - `redundant_set_access_control`\r\n  - `redundant_optional_initialization`\r\n  - `redundant_string_enum_value`\r\n  - `required_deinit`\r\n  - `return_arrow_whitespace`\r\n  - `self_in_property_initialization`\r\n  - `shorthand_operator`\r\n  - `single_test_class`\r\n  - `sorted_first_last`\r\n  - `static_operator`\r\n  - `strict_fileprivate`\r\n  - `strong_iboutlet`\r\n  - `switch_case_alignment`\r\n  - `switch_case_on_newline`\r\n  - `test_case_accessibility`\r\n  - `toggle_bool`\r\n  - `trailing_comma`\r\n  - `trailing_semicolon`\r\n  - `type_body_length`\r\n  - `type_name`\r\n  - `unneeded_break_in_switch`\r\n  - `unneeded_parentheses_in_closure_argument`\r\n  - `unowned_variable_capture`\r\n  - `untyped_error_in_catch`\r\n  - `unused_capture_list`\r\n  - `unused_closure_parameter`\r\n  - `unused_control_flow_label`\r\n  - `unused_enumerated`\r\n  - `unused_optional_binding`\r\n  - `unused_setter_value`\r\n  - `valid_ibinspectable`\r\n  - `vertical_parameter_alignment`\r\n  - `weak_delegate`\r\n  - `xct_specific_matcher`\r\n  - `xctfail_message`  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [JP Simard](https://github.com/jpsim)\r\n  [#2915](https://github.com/realm/SwiftLint/issues/2915)\r\n\r\n* The \"body length\" family of rules have changed how they calculate body\r\n  line count to be significantly more correct and intuitive. However,\r\n  this is likely to require adjustments to your configuration or disable\r\n  commands to account for the changes.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Add `accessibility_trait_for_button` rule to warn if a SwiftUI\r\n  View has a tap gesture added to it without having the button or\r\n  link accessibility trait.  \r\n  [Ryan Cole](https://github.com/rcole34)\r\n\r\n* Add methods from SE-0348 to `UnusedDeclarationRule`.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Include the configured `bind_identifier` in `self_binding` violation\r\n  messages.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Add `library_content_provider` file type to `file_types_order` rule \r\n  to allow `LibraryContentProvider` to be ordered independent from `main_type`.  \r\n  [dahlborn](https://github.com/dahlborn)\r\n\r\n* Add `test_parent_classes` option to `test_case_accessibility` rule, which\r\n  allows detection in subclasses of XCTestCase.  \r\n  [Martin Redington](https://github.com/mildm8nnered)\r\n  [#4200](https://github.com/realm/SwiftLint/issues/4200)\r\n\r\n* Add a new `shorthand_optional_binding` opt-in rule that triggers in Swift 5.7\r\n  when a shadowing optional binding is created in an `if` or `guard` statement.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4202](https://github.com/realm/SwiftLint/issues/4202)\r\n\r\n* Use SwiftSyntax instead of SourceKit to determine if a file has parser errors\r\n  before applying corrections. This speeds up corrections significantly when\r\n  none of the rules use SourceKit.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Add Swift Package Build Tool Plugin with support for Swift Packages\r\n  and Xcode projects.  \r\n  [Johannes Ebeling](https://github.com/technocidal)\r\n  [#3679](https://github.com/realm/SwiftLint/issues/3679)\r\n  [#3840](https://github.com/realm/SwiftLint/issues/3840)\r\n\r\n* Make `private_unit_test` rule correctable.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n\r\n* Disregard whitespace differences in `identical_operands` rule. That is, the rule\r\n  now also triggers if the left-hand side and the right-hand side of an operation\r\n  only differ in trivia.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n\r\n* Print violations in realtime if `--progress` and `--output` are both set.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Update `for_where` rule, adding a new configuration\r\n  `allow_for_as_filter` to allow using `for in` with a single `if` inside\r\n  when there's a `return` statement inside the `if`'s body.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#4040](https://github.com/realm/SwiftLint/issues/4040)\r\n\r\n* `quick_discouraged_call`, `quick_discouraged_focused_test` and\r\n  `quick_discouraged_pending_test` rules now trigger on subclasses of\r\n  `QuickSpec`.\r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#4420](https://github.com/realm/SwiftLint/issues/4420)\r\n\r\n* The `type_name` rule now validates protocol declarations by default.\r\n  You can opt-out by using the `validate_protocols` key in your configuration:\r\n  ```yml\r\n  type_name:\r\n    validate_protocols: false\r\n  ```\r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#4430](https://github.com/realm/SwiftLint/issues/4430)\r\n\r\n* Report how much memory was used when `--benchmark` is specified.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n#### Bug Fixes\r\n\r\n* Respect `validates_start_with_lowercase` option when linting function names.  \r\n  [Chris Brakebill](https://github.com/braker1nine)\r\n  [#2708](https://github.com/realm/SwiftLint/issues/2708)\r\n\r\n* Do not report variables annotated with `@NSApplicationDelegateAdaptor` and\r\n  `@WKExtensionDelegateAdaptor` in `weak_delegate` rule.  \r\n  [Till Hainbach](https://github.com/tillhainbach)\r\n  [#3598](https://github.com/realm/SwiftLint/issues/3456)\r\n  [#3611](https://github.com/realm/SwiftLint/issues/3611)\r\n\r\n* Fix false-positives related to the `willMove` lifecycle method in\r\n  `type_contents_order` rule.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#3478](https://github.com/realm/SwiftLint/issues/3478)\r\n\r\n* Do no longer autocorrect usage of `NSIntersectionRect` in `legacy_nsgeometry_functions`\r\n  rule.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#3703](https://github.com/realm/SwiftLint/issues/3703)\r\n\r\n* Fix Analyzer rules in Xcode 14.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4208](https://github.com/realm/SwiftLint/issues/4208)\r\n\r\n* Add column for SourceKit usage to `rules` command.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Make `nsobject_prefer_isequal` rule work for nested `@objc` classes. Also consider\r\n  the `@objcMembers` annotation.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n\r\n* Print fixed content at most once to STDOUT.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4211](https://github.com/realm/SwiftLint/issues/4211)\r\n\r\n* Fix fatal error when content given via STDIN is corrected in the\r\n  `trailing_newline` rule.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4234](https://github.com/realm/SwiftLint/issues/4234)\r\n\r\n---\r\n\r\n### Using Bazel\r\n\r\nPut this in your `WORKSPACE`:\r\n\r\n<details>\r\n\r\n<summary>WORKSPACE</summary>\r\n\r\n```python\r\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\r\n\r\nhttp_archive(\r\n    name = \"build_bazel_rules_apple\",\r\n    sha256 = \"90e3b5e8ff942be134e64a83499974203ea64797fd620eddeb71b3a8e1bff681\",\r\n    url = \"https://github.com/bazelbuild/rules_apple/releases/download/1.1.2/rules_apple.1.1.2.tar.gz\",\r\n)\r\n\r\nload(\r\n    \"@build_bazel_rules_apple//apple:repositories.bzl\",\r\n    \"apple_rules_dependencies\",\r\n)\r\n\r\napple_rules_dependencies()\r\n\r\nload(\r\n    \"@build_bazel_rules_swift//swift:repositories.bzl\",\r\n    \"swift_rules_dependencies\",\r\n)\r\n\r\nswift_rules_dependencies()\r\n\r\nload(\r\n    \"@build_bazel_rules_swift//swift:extras.bzl\",\r\n    \"swift_rules_extra_dependencies\",\r\n)\r\n\r\nswift_rules_extra_dependencies()\r\n\r\nhttp_archive(\r\n    name = \"SwiftLint\",\r\n    sha256 = \"0cc64b76c801242ba440f83a85d4d54aa11303f1f48094555ddc3a818fbc9858\",\r\n    url = \"https://github.com/realm/SwiftLint/releases/download/0.50.0-rc.3/bazel.tar.gz\",\r\n)\r\n\r\nload(\"@SwiftLint//bazel:repos.bzl\", \"swiftlint_repos\")\r\n\r\nswiftlint_repos()\r\n\r\nload(\"@SwiftLint//bazel:deps.bzl\", \"swiftlint_deps\")\r\n\r\nswiftlint_deps()\r\n```\r\n\r\n</details>\r\n\r\nThen you can run SwiftLint in the current directory with this command:\r\n\r\n```console\r\nbazel run @SwiftLint//:swiftlint -- --help\r\n```",
    "createdAt" : "2022-10-27T22:45:27+09:00",
    "fetchedFromAPIAt" : "2022-10-28T10:01:42+09:00",
    "id" : "RE_kwDOAiE69s4E1w2y",
    "owner" : "realm",
    "publishedAt" : "2022-10-27T22:48:54+09:00",
    "repository" : "SwiftLint",
    "title" : "0.50.0-rc.3: Artisanal Clothes Pegs",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.50.0-rc.3",
    "version" : "0.50.0-rc.3"
  },
  {
    "body" : "This is a prerelease version. It won't be published to Homebrew or CocoaPods. But there are many other ways to install:\r\n\r\n* Downloading the attached `SwiftLint.pkg` installer and launching it\r\n* Downloading the attached `portable_swiftlint.zip` archive, extracting it and moving the binary from `portable_swiftlint/swiftlint` to `/usr/local/bin` or elsewhere in your `PATH`\r\n* Using [Mint](https://github.com/yonaskolb/Mint): `mint install realm/SwiftLint@0.50.0-rc.4`\r\n* Cloning and building from source: `git clone https://github.com/realm/SwiftLint.git && cd SwiftLint && git checkout 0.50.0-rc.4 && make install`\r\n* Docker: ```docker run -it -v `pwd`:`pwd` -w `pwd` ghcr.io/realm/swiftlint:0.50.0-rc.4```\r\n* Bazel: See instructions at the bottom\r\n\r\nChanges from 0.49.1: https://github.com/realm/SwiftLint/compare/0.49.1...0.50.0-rc.4\r\nChanges from 0.50.0-rc.3: https://github.com/realm/SwiftLint/compare/0.50.0-rc.3...0.50.0-rc.4\r\n\r\n---\r\n\r\n#### Breaking\r\n\r\n* SwiftLint now requires Swift 5.7 or higher to build.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Exclude `weak_delegate` rule from autocorrection due to behavioral changes\r\n  leading to potential undefined behavior or bugs.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#3577](https://github.com/realm/SwiftLint/issues/3577)\r\n\r\n* The `anyobject_protocol` rule is now deprecated and will be completely removed\r\n  in a future release because it is now handled by the Swift compiler.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* Adds `NSError` to the list of types in `discouraged_direct_init`.  \r\n  [jszumski](https://github.com/jszumski)\r\n  [#4508](https://github.com/realm/SwiftLint/issues/4508)\r\n\r\n* Fix SwiftLint support on Xcode Cloud.  \r\n  [JagCesar](https://github.com/JagCesar)\r\n  [westerlund](https://github.com/westerlund)\r\n  [#4484](https://github.com/realm/SwiftLint/issues/4484)\r\n\r\n* Add `no_magic_numbers` rule to avoid \"Magic Numbers\".  \r\n  [Henrik Storch](https://github.com/thisisthefoxe)\r\n  [#4031](https://github.com/realm/SwiftLint/issues/4024)\r\n\r\n* SwiftSyntax libraries have been updated from the previous 5.6 release and now\r\n  use the new parser written in Swift.\r\n  Swift 5.7+ features should now be parsed more accurately.\r\n  We've also measured an improvement in lint times of up to 15%.\r\n  This should also fix some deployment issues where the exact version of the\r\n  internal SwiftSyntax parser needed to be available.\r\n  If you notice any unexpected changes to lint results, please file an issue on\r\n  the SwiftLint issue tracker. We can look into it and if it's a SwiftSyntax\r\n  parser regression we can re-file it upstream.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#4031](https://github.com/realm/SwiftLint/issues/4031)\r\n\r\n* Add ability to filter rules for `generate-docs` subcommand.  \r\n  [kattouf](https://github.com/kattouf)\r\n\r\n* Add new `excludes_trivial_init` configuration for `missing_docs` rule\r\n  to exclude initializers without any parameters.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#4107](https://github.com/realm/SwiftLint/issues/4107)\r\n\r\n* Add new `ns_number_init_as_function_reference` rule to catch `NSNumber.init`\r\n  and `NSDecimalNumber.init` being used as function references since it\r\n  can cause the wrong initializer to be used, causing crashes. See\r\n  https://github.com/apple/swift/issues/51036 for more info.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n\r\n* Rewrite some rules with SwiftSyntax, fixing some false positives and catching\r\n  more violations:\r\n  - `anonymous_argument_in_multiline_closure`\r\n  - `array_init`\r\n  - `attributes`\r\n  - `block_based_kvo`\r\n  - `class_delegate_protocol`\r\n  - `closing_brace`\r\n  - `closure_body_length`\r\n  - `closure_parameter_position`\r\n  - `collection_alignment`\r\n  - `comment_spacing`\r\n  - `computed_accessors_order`\r\n  - `conditional_returns_on_newline`\r\n  - `contains_over_filter_count`\r\n  - `contains_over_filter_is_empty`\r\n  - `contains_over_first_not_nil`\r\n  - `contains_over_range_nil_comparison`\r\n  - `convenience_type`\r\n  - `deployment_target`\r\n  - `discarded_notification_center_observer`\r\n  - `discouraged_assert`\r\n  - `discouraged_direct_init`\r\n  - `discouraged_none_name`\r\n  - `discouraged_object_literal`\r\n  - `discouraged_optional_boolean`\r\n  - `duplicate_enum_cases`\r\n  - `duplicated_key_in_dictionary_literal`\r\n  - `dynamic_inline`\r\n  - `empty_collection_literal`\r\n  - `empty_count`\r\n  - `empty_enum_arguments`\r\n  - `empty_parameters`\r\n  - `empty_parentheses_with_trailing_closure`\r\n  - `empty_string`\r\n  - `enum_case_associated_values_count`\r\n  - `explicit_enum_raw_value`\r\n  - `explicit_init`\r\n  - `explicit_top_level_acl`\r\n  - `fallthrough`\r\n  - `file_name`\r\n  - `first_where`\r\n  - `flatmap_over_map_reduce`\r\n  - `for_where`\r\n  - `force_try`\r\n  - `force_unwrapping`\r\n  - `function_body_length`\r\n  - `function_default_parameter_at_end`\r\n  - `function_parameter_count`\r\n  - `generic_type_name`\r\n  - `ibinspectable_in_extension`\r\n  - `identical_operands`\r\n  - `implicit_getter`\r\n  - `implicitly_unwrapped_optional`\r\n  - `inclusive_language`\r\n  - `inert_defer`\r\n  - `is_disjoint`\r\n  - `joined_default_parameter`\r\n  - `large_tuple`\r\n  - `last_where`\r\n  - `legacy_cggeometry_functions`\r\n  - `legacy_constant`\r\n  - `legacy_constructor`\r\n  - `legacy_hashing`\r\n  - `legacy_multiple`\r\n  - `legacy_nsgeometry_functions`\r\n  - `legacy_objc_type`\r\n  - `legacy_random`\r\n  - `lower_acl_than_parent`\r\n  - `multiline_arguments_brackets`\r\n  - `multiline_parameters`\r\n  - `multiple_closures_with_trailing_closure`\r\n  - `no_extension_access_modifier`\r\n  - `no_fallthrough_only`\r\n  - `no_space_in_method_call`\r\n  - `notification_center_detachment`\r\n  - `nslocalizedstring_require_bundle`\r\n  - `nsobject_prefer_isequal`\r\n  - `number_separator`\r\n  - `operator_whitespace`\r\n  - `optional_enum_case_matching`\r\n  - `orphaned_doc_comment`\r\n  - `overridden_super_call`\r\n  - `override_in_extension`\r\n  - `prefer_nimble`\r\n  - `prefer_self_type_over_type_of_self`\r\n  - `prefer_zero_over_explicit_init`\r\n  - `prefixed_toplevel_constant`\r\n  - `private_action`\r\n  - `private_outlet`\r\n  - `private_over_fileprivate`\r\n  - `private_subject`\r\n  - `private_unit_test`\r\n  - `prohibited_interface_builder`\r\n  - `prohibited_super_call`\r\n  - `protocol_property_accessors_order`\r\n  - `quick_discouraged_focused_test`\r\n  - `quick_discouraged_pending_test`\r\n  - `raw_value_for_camel_cased_codable_enum`\r\n  - `reduce_boolean`\r\n  - `reduce_into`\r\n  - `redundant_discardable_let`\r\n  - `redundant_nil_coalescing`\r\n  - `redundant_objc_attribute`\r\n  - `redundant_optional_initialization`\r\n  - `redundant_set_access_control`\r\n  - `redundant_string_enum_value`\r\n  - `required_deinit`\r\n  - `return_arrow_whitespace`\r\n  - `self_in_property_initialization`\r\n  - `shorthand_operator`\r\n  - `single_test_class`\r\n  - `sorted_first_last`\r\n  - `static_operator`\r\n  - `strict_fileprivate`\r\n  - `strong_iboutlet`\r\n  - `switch_case_alignment`\r\n  - `switch_case_on_newline`\r\n  - `test_case_accessibility`\r\n  - `toggle_bool`\r\n  - `trailing_comma`\r\n  - `trailing_semicolon`\r\n  - `type_body_length`\r\n  - `type_name`\r\n  - `unneeded_break_in_switch`\r\n  - `unneeded_parentheses_in_closure_argument`\r\n  - `unowned_variable_capture`\r\n  - `untyped_error_in_catch`\r\n  - `unused_capture_list`\r\n  - `unused_closure_parameter`\r\n  - `unused_control_flow_label`\r\n  - `unused_enumerated`\r\n  - `unused_optional_binding`\r\n  - `unused_setter_value`\r\n  - `valid_ibinspectable`\r\n  - `vertical_parameter_alignment`\r\n  - `weak_delegate`\r\n  - `xct_specific_matcher`\r\n  - `xctfail_message`  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [JP Simard](https://github.com/jpsim)\r\n  [#2915](https://github.com/realm/SwiftLint/issues/2915)\r\n\r\n* The \"body length\" family of rules have changed how they calculate body\r\n  line count to be significantly more correct and intuitive. However,\r\n  this is likely to require adjustments to your configuration or disable\r\n  commands to account for the changes.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Add `accessibility_trait_for_button` rule to warn if a SwiftUI\r\n  View has a tap gesture added to it without having the button or\r\n  link accessibility trait.  \r\n  [Ryan Cole](https://github.com/rcole34)\r\n\r\n* Add methods from SE-0348 to `UnusedDeclarationRule`.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Include the configured `bind_identifier` in `self_binding` violation\r\n  messages.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Add `library_content_provider` file type to `file_types_order` rule \r\n  to allow `LibraryContentProvider` to be ordered independent from `main_type`.  \r\n  [dahlborn](https://github.com/dahlborn)\r\n\r\n* Add `test_parent_classes` option to `test_case_accessibility` rule, which\r\n  allows detection in subclasses of XCTestCase.  \r\n  [Martin Redington](https://github.com/mildm8nnered)\r\n  [#4200](https://github.com/realm/SwiftLint/issues/4200)\r\n\r\n* Add a new `shorthand_optional_binding` opt-in rule that triggers in Swift 5.7\r\n  when a shadowing optional binding is created in an `if` or `guard` statement.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4202](https://github.com/realm/SwiftLint/issues/4202)\r\n\r\n* Use SwiftSyntax instead of SourceKit to determine if a file has parser errors\r\n  before applying corrections. This speeds up corrections significantly when\r\n  none of the rules use SourceKit.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Add Swift Package Build Tool Plugin with support for Swift Packages\r\n  and Xcode projects.  \r\n  [Johannes Ebeling](https://github.com/technocidal)\r\n  [#3679](https://github.com/realm/SwiftLint/issues/3679)\r\n  [#3840](https://github.com/realm/SwiftLint/issues/3840)\r\n\r\n* Make `private_unit_test` rule correctable.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n\r\n* Disregard whitespace differences in `identical_operands` rule. That is, the rule\r\n  now also triggers if the left-hand side and the right-hand side of an operation\r\n  only differ in trivia.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n\r\n* Print violations in realtime if `--progress` and `--output` are both set.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Update `for_where` rule, adding a new configuration\r\n  `allow_for_as_filter` to allow using `for in` with a single `if` inside\r\n  when there's a `return` statement inside the `if`'s body.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#4040](https://github.com/realm/SwiftLint/issues/4040)\r\n\r\n* `quick_discouraged_call`, `quick_discouraged_focused_test` and\r\n  `quick_discouraged_pending_test` rules now trigger on subclasses of\r\n  `QuickSpec`.\r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#4420](https://github.com/realm/SwiftLint/issues/4420)\r\n\r\n* The `type_name` rule now validates protocol declarations by default.\r\n  You can opt-out by using the `validate_protocols` key in your configuration:\r\n  ```yml\r\n  type_name:\r\n    validate_protocols: false\r\n  ```\r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#4430](https://github.com/realm/SwiftLint/issues/4430)\r\n\r\n* Report how much memory was used when `--benchmark` is specified.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n#### Bug Fixes\r\n\r\n* Respect `validates_start_with_lowercase` option when linting function names.  \r\n  [Chris Brakebill](https://github.com/braker1nine)\r\n  [#2708](https://github.com/realm/SwiftLint/issues/2708)\r\n\r\n* Do not report variables annotated with `@NSApplicationDelegateAdaptor` and\r\n  `@WKExtensionDelegateAdaptor` in `weak_delegate` rule.  \r\n  [Till Hainbach](https://github.com/tillhainbach)\r\n  [#3598](https://github.com/realm/SwiftLint/issues/3456)\r\n  [#3611](https://github.com/realm/SwiftLint/issues/3611)\r\n\r\n* Fix false-positives related to the `willMove` lifecycle method in\r\n  `type_contents_order` rule.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#3478](https://github.com/realm/SwiftLint/issues/3478)\r\n\r\n* Do no longer autocorrect usage of `NSIntersectionRect` in `legacy_nsgeometry_functions`\r\n  rule.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#3703](https://github.com/realm/SwiftLint/issues/3703)\r\n\r\n* Fix Analyzer rules in Xcode 14.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4208](https://github.com/realm/SwiftLint/issues/4208)\r\n\r\n* Add column for SourceKit usage to `rules` command.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Make `nsobject_prefer_isequal` rule work for nested `@objc` classes. Also consider\r\n  the `@objcMembers` annotation.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n\r\n* Print fixed content at most once to STDOUT.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4211](https://github.com/realm/SwiftLint/issues/4211)\r\n\r\n* Fix fatal error when content given via STDIN is corrected in the\r\n  `trailing_newline` rule.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4234](https://github.com/realm/SwiftLint/issues/4234)\r\n\r\n* Fix false-positives from `multiline_arguments_brackets` when a function call has a\r\n  single line trailing closure.  \r\n  [CraigSiemens](https://github.com/CraigSiemens)\r\n  [#4510](https://github.com/realm/SwiftLint/issues/4510)\r\n\r\n---\r\n\r\n### Using Bazel\r\n\r\nPut this in your `WORKSPACE`:\r\n\r\n<details>\r\n\r\n<summary>WORKSPACE</summary>\r\n\r\n```python\r\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\r\n\r\nhttp_archive(\r\n    name = \"build_bazel_rules_apple\",\r\n    sha256 = \"90e3b5e8ff942be134e64a83499974203ea64797fd620eddeb71b3a8e1bff681\",\r\n    url = \"https://github.com/bazelbuild/rules_apple/releases/download/1.1.2/rules_apple.1.1.2.tar.gz\",\r\n)\r\n\r\nload(\r\n    \"@build_bazel_rules_apple//apple:repositories.bzl\",\r\n    \"apple_rules_dependencies\",\r\n)\r\n\r\napple_rules_dependencies()\r\n\r\nload(\r\n    \"@build_bazel_rules_swift//swift:repositories.bzl\",\r\n    \"swift_rules_dependencies\",\r\n)\r\n\r\nswift_rules_dependencies()\r\n\r\nload(\r\n    \"@build_bazel_rules_swift//swift:extras.bzl\",\r\n    \"swift_rules_extra_dependencies\",\r\n)\r\n\r\nswift_rules_extra_dependencies()\r\n\r\nhttp_archive(\r\n    name = \"SwiftLint\",\r\n    sha256 = \"ef49a8c0dcb70fb5befe549b016735deef72e1ac9f68562b288f23e496c164af\",\r\n    url = \"https://github.com/realm/SwiftLint/releases/download/0.50.0-rc.4/bazel.tar.gz\",\r\n)\r\n\r\nload(\"@SwiftLint//bazel:repos.bzl\", \"swiftlint_repos\")\r\n\r\nswiftlint_repos()\r\n\r\nload(\"@SwiftLint//bazel:deps.bzl\", \"swiftlint_deps\")\r\n\r\nswiftlint_deps()\r\n```\r\n\r\n</details>\r\n\r\nThen you can run SwiftLint in the current directory with this command:\r\n\r\n```console\r\nbazel run @SwiftLint//:swiftlint -- --help\r\n```",
    "createdAt" : "2022-11-04T22:23:30+09:00",
    "fetchedFromAPIAt" : "2022-11-05T09:56:41+09:00",
    "id" : "RE_kwDOAiE69s4E5G2d",
    "owner" : "realm",
    "publishedAt" : "2022-11-04T22:26:38+09:00",
    "repository" : "SwiftLint",
    "title" : "0.50.0-rc.4: Artisanal Clothes Pegs",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.50.0-rc.4",
    "version" : "0.50.0-rc.4"
  },
  {
    "body" : "This is the last release to support building with Swift 5.5.x and running on\r\nmacOS < 12.\r\n\r\n#### Breaking\r\n\r\n* Deprecate the `--path` options for `lint`/`analyze` commands. Prefer the\r\n  positional paths that can be added last to both commands.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* Support `iOSApplicationExtension`, `macOSApplicationExtension`,\r\n  `watchOSApplicationExtension`, and `tvOSApplicationExtension` identifiers\r\n  in the `deployment_target` rule. To configure the rule for these identifiers,\r\n  you need to use the keys `iOSApplicationExtension_deployment_target`,\r\n  `macOSApplicationExtension_deployment_target`,\r\n  `watchOSApplicationExtension_deployment_target`, and\r\n  `tvOSApplicationExtension_deployment_target`. Extentions default to\r\n  their counterparts unless they are explicitly defined.  \r\n  [tahabebek](https://github.com/tahabebek)\r\n  [#4004](https://github.com/realm/SwiftLint/issues/4004)\r\n\r\n* Rewrite `operator_usage_whitespace` rule using SwiftSyntax, fixing\r\n  false positives and false negatives.  \r\n  Note that this rule doesn't catch violations around return arrows (`->`)\r\n  anymore - they are already handled by `return_arrow_whitespace`.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#3965](https://github.com/realm/SwiftLint/issues/3965)\r\n  [#3668](https://github.com/realm/SwiftLint/issues/3668)\r\n  [#2728](https://github.com/realm/SwiftLint/issues/2728)\r\n\r\n* Support arrays for the `included` and `excluded` options when defining\r\n  a custom rule.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n\r\n* Add back `void_function_in_ternary` opt-in rule to warn against using\r\n  a ternary operator to call `Void` functions.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n\r\n* Support `UIEdgeInsets` type in `prefer_zero_over_explicit_init` rule.  \r\n  [KokiHirokawa](https://github.com/KokiHirokawa)\r\n  [#3986](https://github.com/realm/SwiftLint/issues/3986)\r\n\r\n#### Bug Fixes\r\n\r\n* Ignore array types in `syntactic_sugar` rule if their associated `Index` is\r\n  accessed.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#3502](https://github.com/realm/SwiftLint/issues/3502)\r\n\r\n* Prevent crash for private types named `_` in `type_name` rules.\r\n  [sinoru](https://github.com/sinoru)\r\n  [#3971](https://github.com/realm/SwiftLint/issues/3971)\r\n\r\n* Make `for_where` rule implementation independent of order in structure\r\n  dictionary. This fixes the rule in Xcode 13.3 where some violation were\r\n  no longer reported.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#3975](https://github.com/realm/SwiftLint/issues/3975)\r\n\r\n* Update result builder methods in `unused_declaration` rule fixing some\r\n  false-positives.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n\r\n* Look for call expressions which are not wrapped into an argument when\r\n  checking for nested (possibly multiline) arguments fixing some\r\n  false-negatives in (at least) Xcode 13.2.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#3975](https://github.com/realm/SwiftLint/issues/3975)\r\n\r\n* Make sure that include paths prefixed with the name of the original path\r\n  are included in the analysis.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#3705](https://github.com/realm/SwiftLint/issues/3705)\r\n\r\n* Do not trigger `unavailable_condition` rule if other `#(un)available`\r\n  checks are involved.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#3985](https://github.com/realm/SwiftLint/issues/3985)\r\n\r\n* Update `nimble_operator` to support the operators for `beNil()`.  \r\n  [CraigSiemens](https://github.com/CraigSiemens)\r\n\r\n* Avoid false-positive in `let_var_whitespace` rule by allowing custom\r\n  attributes on lines directly before let/var declarations.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#2980](https://github.com/realm/SwiftLint/issues/2980)",
    "createdAt" : "2022-07-26T16:34:06+09:00",
    "fetchedFromAPIAt" : "2022-07-27T09:55:26+09:00",
    "id" : "RE_kwDOAiE69s4EV0IH",
    "owner" : "realm",
    "publishedAt" : "2022-07-26T16:34:59+09:00",
    "repository" : "SwiftLint",
    "title" : "0.48.0: Rechargeable Defuzzer",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.48.0",
    "version" : "0.48.0"
  },
  {
    "body" : "This is a prerelease version. It won't be published to Homebrew or CocoaPods. But there are many other ways to install:\r\n\r\n* Downloading the attached `SwiftLint.pkg` installer and launching it\r\n* Downloading the attached `portable_swiftlint.zip` archive, extracting it and moving the binary from `portable_swiftlint/swiftlint` to `/usr/local/bin` or elsewhere in your `PATH`\r\n* Using [Mint](https://github.com/yonaskolb/Mint): `mint install realm/SwiftLint@0.49.0-rc.1`\r\n* Cloning and building from source: `git clone https://github.com/realm/SwiftLint.git && cd SwiftLint && git checkout 0.49.0-rc.1 && make install`\r\n* Docker: ```docker run -it -v `pwd`:`pwd` -w `pwd` ghcr.io/realm/swiftlint:0.49.0-rc.1```\r\n* Bazel: See instructions at the bottom\r\n\r\nChanges from 0.48.0: https://github.com/realm/SwiftLint/compare/0.48.0...0.49.0-rc.1\r\n\r\n---\r\n\r\n_Note: The default branch for the SwiftLint git repository will be renamed from\r\n`master` to `main` on September 1st. Please update any code or automation\r\naccordingly._\r\n\r\n#### Breaking\r\n\r\n* SwiftLint now requires Swift 5.6 or higher to build, and macOS 12\r\n  or higher to run.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Code Climate reports now use SHA256 strings as the issue fingerprint\r\n  values.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Make `comma_inheritance` an opt-in rule.  \r\n  [Steve Madsen](https://github.com/sjmadsen)\r\n  [#4027](https://github.com/realm/SwiftLint/issues/4027)\r\n\r\n* The `autocorrect` command that was deprecated in 0.43.0 has now been\r\n  completely removed. Use `--fix` instead.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Remove the `AutomaticTestableRule` protocol. All examples listed in rules are\r\n  now tested automatically to make sure they are correct.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n\r\n* Deprecate the `--in-process-sourcekit` command line flag. SwiftLint now always\r\n  uses an in-process SourceKit.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n  \r\n* Make `duplicate_imports` rule correctable. Fix `duplicate_imports` rule \r\n  reporting redundant violations when more than one duplicate is present.  \r\n  [Timofey Solonin](https://github.com/abdulowork)\r\n\r\n* Support for building SwiftLint with bazel.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Support for writing custom private native rules when building with\r\n  bazel.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [Keith Smiley](https://github.com/keith)\r\n  [#3516](https://github.com/realm/SwiftLint/issues/3516)\r\n\r\n* Make `comma` rule about 10x faster, finding some previously missed cases and\r\n  fixing some previously wrong corrections.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Make `colon` rule about 7x faster, finding some previously missed cases.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Introduce new configuration option `include_compiler_directives` (`true` by\r\n  default) for the `indentation_width` rule that allows to ignore compiler\r\n  directives in the indentation analysis. This is especially useful if one (or\r\n  a formatter) prefers to have compiler directives always at the very beginning\r\n  of a line.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4030](https://github.com/realm/SwiftLint/issues/4030)\r\n\r\n#### Bug Fixes\r\n\r\n* Fix false positive in `self_in_property_initialization` rule when using\r\n  closures inside `didSet` and other accessors.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#4041](https://github.com/realm/SwiftLint/issues/4041)\r\n\r\n* Fix false positive in `Duplicated Key in Dictionary Literal Violation` rule\r\n  when using keys that are generated at runtime with the same source code.  \r\n  [OrEliyahu](https://github.com/OrEliyahu)\r\n  [#4012](https://github.com/realm/SwiftLint/issues/4012)\r\n\r\n---\r\n\r\n### Using Bazel\r\n\r\nPut this in your `WORKSPACE`:\r\n\r\n<details>\r\n\r\n<summary>WORKSPACE</summary>\r\n\r\n```python\r\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\r\n\r\nhttp_archive(\r\n    name = \"build_bazel_rules_apple\",\r\n    sha256 = \"36072d4f3614d309d6a703da0dfe48684ec4c65a89611aeb9590b45af7a3e592\",\r\n    url = \"https://github.com/bazelbuild/rules_apple/releases/download/1.0.1/rules_apple.1.0.1.tar.gz\",\r\n)\r\n\r\nload(\r\n    \"@build_bazel_rules_apple//apple:repositories.bzl\",\r\n    \"apple_rules_dependencies\",\r\n)\r\n\r\napple_rules_dependencies()\r\n\r\nload(\r\n    \"@build_bazel_rules_swift//swift:repositories.bzl\",\r\n    \"swift_rules_dependencies\",\r\n)\r\n\r\nswift_rules_dependencies()\r\n\r\nload(\r\n    \"@build_bazel_rules_swift//swift:extras.bzl\",\r\n    \"swift_rules_extra_dependencies\",\r\n)\r\n\r\nswift_rules_extra_dependencies()\r\n\r\nhttp_archive(\r\n    name = \"SwiftLint\",\r\n    sha256 = \"e954f4483f7f4cf523896693ee3505585f6beb0f791e362b42d9bdbb615f051a\",\r\n    url = \"https://github.com/realm/SwiftLint/releases/download/0.49.0-rc.1/bazel.tar.gz\",\r\n)\r\n\r\nload(\"@SwiftLint//bazel:repos.bzl\", \"swiftlint_repos\")\r\n\r\nswiftlint_repos()\r\n\r\nload(\"@SwiftLint//bazel:deps.bzl\", \"swiftlint_deps\")\r\n\r\nswiftlint_deps()\r\n```\r\n\r\n</details>\r\n\r\nThen you can run SwiftLint in the current directory with this command:\r\n\r\n```console\r\nbazel run @SwiftLint//:swiftlint -- --help\r\n```",
    "createdAt" : "2022-08-12T22:49:13+09:00",
    "fetchedFromAPIAt" : "2022-08-13T09:45:12+09:00",
    "id" : "RE_kwDOAiE69s4EbbM7",
    "owner" : "realm",
    "publishedAt" : "2022-08-12T22:51:47+09:00",
    "repository" : "SwiftLint",
    "title" : "0.49.0-rc.1: Asynchronous Defuzzer",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.49.0-rc.1",
    "version" : "0.49.0-rc.1"
  },
  {
    "body" : "This is a prerelease version. It won't be published to Homebrew or CocoaPods. But there are many other ways to install:\r\n\r\n* Downloading the attached `SwiftLint.pkg` installer and launching it\r\n* Downloading the attached `portable_swiftlint.zip` archive, extracting it and moving the binary from `portable_swiftlint/swiftlint` to `/usr/local/bin` or elsewhere in your `PATH`\r\n* Using [Mint](https://github.com/yonaskolb/Mint): `mint install realm/SwiftLint@0.49.0-rc.2`\r\n* Cloning and building from source: `git clone https://github.com/realm/SwiftLint.git && cd SwiftLint && git checkout 0.49.0-rc.2 && make install`\r\n* Docker: ```docker run -it -v `pwd`:`pwd` -w `pwd` ghcr.io/realm/swiftlint:0.49.0-rc.2```\r\n* Bazel: See instructions at the bottom\r\n\r\nChanges from 0.48.0: https://github.com/realm/SwiftLint/compare/0.48.0...0.49.0-rc.2\r\nChanges from 0.49.0-rc.1: https://github.com/realm/SwiftLint/compare/0.49.0-rc.1...0.49.0-rc.2\r\n\r\n---\r\n\r\n_Note: The default branch for the SwiftLint git repository will be renamed from\r\n`master` to `main` on September 1st. Please update any code or automation\r\naccordingly._\r\n\r\n#### Breaking\r\n\r\n* SwiftLint now requires Swift 5.6 or higher to build, and macOS 12\r\n  or higher to run.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Code Climate reports now use SHA256 strings as the issue fingerprint\r\n  values.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Make `comma_inheritance` an opt-in rule.  \r\n  [Steve Madsen](https://github.com/sjmadsen)\r\n  [#4027](https://github.com/realm/SwiftLint/issues/4027)\r\n\r\n* The `autocorrect` command that was deprecated in 0.43.0 has now been\r\n  completely removed. Use `--fix` instead.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Remove the `AutomaticTestableRule` protocol. All examples listed in rules are\r\n  now tested automatically to make sure they are correct.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n\r\n* Deprecate the `--in-process-sourcekit` command line flag. SwiftLint now always\r\n  uses an in-process SourceKit.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* Make `duplicate_imports` rule correctable. Fix `duplicate_imports` rule\r\n  reporting redundant violations when more than one duplicate is present.  \r\n  [Timofey Solonin](https://github.com/abdulowork)\r\n\r\n* Support for building SwiftLint with bazel.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Support for writing custom private native rules when building with\r\n  bazel.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [Keith Smiley](https://github.com/keith)\r\n  [#3516](https://github.com/realm/SwiftLint/issues/3516)\r\n\r\n* Make `comma` rule about 10x faster, finding some previously missed cases and\r\n  fixing some previously wrong corrections.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Make `colon` rule about 7x faster, finding some previously missed cases.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Make `closure_spacing` rule about 9x faster, finding some previously missed\r\n  cases and fixing some previously wrong corrections.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4090](https://github.com/realm/SwiftLint/issues/4090)\r\n\r\n* Introduce new configuration option `include_compiler_directives` (`true` by\r\n  default) for the `indentation_width` rule that allows to ignore compiler\r\n  directives in the indentation analysis. This is especially useful if one (or\r\n  a formatter) prefers to have compiler directives always at the very beginning\r\n  of a line.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4030](https://github.com/realm/SwiftLint/issues/4030)\r\n\r\n* Enable (recursive) globs in `included` file paths.  \r\n  [sarastro-nl](https://github.com/sarastro-nl)\r\n\r\n* Custom rules are now broken down per rule instead of in aggregate in\r\n  `--benchmark`.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* The `version` command now has an optional `--verbose` flag that prints out the\r\n  full version info, notably the build ID, which can be used to determine if two\r\n  `swiftlint` executables are identical.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Update documentation for `multiline_arguments_brackets` and\r\n  `multiline_literal_brackets` to make it immediately obvious that common\r\n  examples will trigger.  \r\n  [chrisjf](https://github.com/chrisjf)\r\n  [#4060](https://github.com/realm/SwiftLint/issues/4060)\r\n\r\n#### Bug Fixes\r\n\r\n* Fix false positive in `self_in_property_initialization` rule when using\r\n  closures inside `didSet` and other accessors.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#4041](https://github.com/realm/SwiftLint/issues/4041)\r\n\r\n* Fix false positive in `Duplicated Key in Dictionary Literal Violation` rule\r\n  when using keys that are generated at runtime with the same source code.  \r\n  [OrEliyahu](https://github.com/OrEliyahu)\r\n  [#4012](https://github.com/realm/SwiftLint/issues/4012)\r\n\r\n* Fix false positive in `yoda_condition` rule by basing it on SwiftSyntax.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4081](https://github.com/realm/SwiftLint/issues/4081)\r\n\r\n* Fix false negatives in `first_where` rule when filtering array of dictionaries\r\n  with String keys.  \r\n  [KS1019](https://github.com/KS1019)\r\n\r\n* Fix broken correction for `explicit_init` rule.  \r\n  [KS1019](https://github.com/KS1019)\r\n\r\n---\r\n\r\n### Using Bazel\r\n\r\nPut this in your `WORKSPACE`:\r\n\r\n<details>\r\n\r\n<summary>WORKSPACE</summary>\r\n\r\n```python\r\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\r\n\r\nhttp_archive(\r\n    name = \"build_bazel_rules_apple\",\r\n    sha256 = \"36072d4f3614d309d6a703da0dfe48684ec4c65a89611aeb9590b45af7a3e592\",\r\n    url = \"https://github.com/bazelbuild/rules_apple/releases/download/1.0.1/rules_apple.1.0.1.tar.gz\",\r\n)\r\n\r\nload(\r\n    \"@build_bazel_rules_apple//apple:repositories.bzl\",\r\n    \"apple_rules_dependencies\",\r\n)\r\n\r\napple_rules_dependencies()\r\n\r\nload(\r\n    \"@build_bazel_rules_swift//swift:repositories.bzl\",\r\n    \"swift_rules_dependencies\",\r\n)\r\n\r\nswift_rules_dependencies()\r\n\r\nload(\r\n    \"@build_bazel_rules_swift//swift:extras.bzl\",\r\n    \"swift_rules_extra_dependencies\",\r\n)\r\n\r\nswift_rules_extra_dependencies()\r\n\r\nhttp_archive(\r\n    name = \"SwiftLint\",\r\n    sha256 = \"d34bf123e6380a7527ee78c5f6ec7ede5e00e8c39a9c3b394f590374f566c57d\",\r\n    url = \"https://github.com/realm/SwiftLint/releases/download/0.49.0-rc.2/bazel.tar.gz\",\r\n)\r\n\r\nload(\"@SwiftLint//bazel:repos.bzl\", \"swiftlint_repos\")\r\n\r\nswiftlint_repos()\r\n\r\nload(\"@SwiftLint//bazel:deps.bzl\", \"swiftlint_deps\")\r\n\r\nswiftlint_deps()\r\n```\r\n\r\n</details>\r\n\r\nThen you can run SwiftLint in the current directory with this command:\r\n\r\n```console\r\nbazel run @SwiftLint//:swiftlint -- --help\r\n```",
    "createdAt" : "2022-08-19T02:31:47+09:00",
    "fetchedFromAPIAt" : "2022-08-19T09:56:17+09:00",
    "id" : "RE_kwDOAiE69s4EdLwN",
    "owner" : "realm",
    "publishedAt" : "2022-08-19T02:36:00+09:00",
    "repository" : "SwiftLint",
    "title" : "0.49.0-rc.2: Asynchronous Defuzzer",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.49.0-rc.2",
    "version" : "0.49.0-rc.2"
  },
  {
    "body" : "_Note: The default branch for the SwiftLint git repository will be renamed from\r\n`master` to `main` on September 1st. Please update any code or automation\r\naccordingly._\r\n\r\n#### Breaking\r\n\r\n* SwiftLint now requires Swift 5.6 or higher to build, and macOS 12\r\n  or higher to run.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Code Climate reports now use SHA256 strings as the issue fingerprint\r\n  values.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Make `comma_inheritance` an opt-in rule.  \r\n  [Steve Madsen](https://github.com/sjmadsen)\r\n  [#4027](https://github.com/realm/SwiftLint/issues/4027)\r\n\r\n* The `autocorrect` command that was deprecated in 0.43.0 has now been\r\n  completely removed. Use `--fix` instead.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Remove the `AutomaticTestableRule` protocol. All examples listed in rules are\r\n  now tested automatically to make sure they are correct.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n\r\n* Deprecate the `--in-process-sourcekit` command line flag. SwiftLint now always\r\n  uses an in-process SourceKit.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* Make `duplicate_imports` rule correctable. Fix `duplicate_imports` rule\r\n  reporting redundant violations when more than one duplicate is present.  \r\n  [Timofey Solonin](https://github.com/abdulowork)\r\n\r\n* Support for building SwiftLint with bazel.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Support for writing custom private native rules when building with\r\n  bazel.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [Keith Smiley](https://github.com/keith)\r\n  [#3516](https://github.com/realm/SwiftLint/issues/3516)\r\n\r\n* Make `comma` rule about 10x faster, finding some previously missed cases and\r\n  fixing some previously wrong corrections.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Make `colon` rule about 7x faster, finding some previously missed cases.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Make `closure_spacing` rule about 9x faster, finding some previously missed\r\n  cases and fixing some previously wrong corrections.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4090](https://github.com/realm/SwiftLint/issues/4090)\r\n\r\n* Introduce new configuration option `include_compiler_directives` (`true` by\r\n  default) for the `indentation_width` rule that allows to ignore compiler\r\n  directives in the indentation analysis. This is especially useful if one (or\r\n  a formatter) prefers to have compiler directives always at the very beginning\r\n  of a line.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4030](https://github.com/realm/SwiftLint/issues/4030)\r\n\r\n* Enable (recursive) globs in `included` file paths.  \r\n  [sarastro-nl](https://github.com/sarastro-nl)\r\n\r\n* Custom rules are now broken down per rule instead of in aggregate in\r\n  `--benchmark`.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* The `version` command now has an optional `--verbose` flag that prints out the\r\n  full version info, notably the build ID, which can be used to determine if two\r\n  `swiftlint` executables are identical.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Update documentation for `multiline_arguments_brackets` and\r\n  `multiline_literal_brackets` to make it immediately obvious that common\r\n  examples will trigger.  \r\n  [chrisjf](https://github.com/chrisjf)\r\n  [#4060](https://github.com/realm/SwiftLint/issues/4060)\r\n\r\n* The `--compile-commands` argument can now parse SwiftPM yaml files produced\r\n  when running `swift build` at `.build/{debug,release}.yaml`.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Add new configuration option `allowed_no_space_operators` to\r\n  `operator_usage_whitespace` rule. It allows to specify custom operators which\r\n  shall not be considered by the rule.  \r\n  [imben123](https://github.com/imben123)\r\n\r\n* Add new protocols to remove some boilerplate involved in writing\r\n  SwiftSyntax-based rules.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n#### Bug Fixes\r\n\r\n* Fix false positive in `self_in_property_initialization` rule when using\r\n  closures inside `didSet` and other accessors.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#4041](https://github.com/realm/SwiftLint/issues/4041)\r\n\r\n* Fix false positive in `Duplicated Key in Dictionary Literal Violation` rule\r\n  when using keys that are generated at runtime with the same source code.  \r\n  [OrEliyahu](https://github.com/OrEliyahu)\r\n  [#4012](https://github.com/realm/SwiftLint/issues/4012)\r\n\r\n* Fix false positive in `yoda_condition` rule by basing it on SwiftSyntax.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4081](https://github.com/realm/SwiftLint/issues/4081)\r\n\r\n* Fix false negatives in `first_where` rule when filtering array of dictionaries\r\n  with String keys.  \r\n  [KS1019](https://github.com/KS1019)\r\n\r\n* Fix broken correction for `explicit_init` rule.  \r\n  [KS1019](https://github.com/KS1019)\r\n\r\n---\r\n\r\n### Using Bazel\r\n\r\nPut this in your `WORKSPACE`:\r\n\r\n<details>\r\n\r\n<summary>WORKSPACE</summary>\r\n\r\n```python\r\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\r\n\r\nhttp_archive(\r\n    name = \"build_bazel_rules_apple\",\r\n    sha256 = \"f003875c248544009c8e8ae03906bbdacb970bc3e5931b40cd76cadeded99632\",\r\n    url = \"https://github.com/bazelbuild/rules_apple/releases/download/1.1.0/rules_apple.1.1.0.tar.gz\",\r\n)\r\n\r\nload(\r\n    \"@build_bazel_rules_apple//apple:repositories.bzl\",\r\n    \"apple_rules_dependencies\",\r\n)\r\n\r\napple_rules_dependencies()\r\n\r\nload(\r\n    \"@build_bazel_rules_swift//swift:repositories.bzl\",\r\n    \"swift_rules_dependencies\",\r\n)\r\n\r\nswift_rules_dependencies()\r\n\r\nload(\r\n    \"@build_bazel_rules_swift//swift:extras.bzl\",\r\n    \"swift_rules_extra_dependencies\",\r\n)\r\n\r\nswift_rules_extra_dependencies()\r\n\r\nhttp_archive(\r\n    name = \"SwiftLint\",\r\n    sha256 = \"ec566314e9220ff681ddb639d3a0532834f66f7e733f5a59c7390469dcb5bd3e\",\r\n    url = \"https://github.com/realm/SwiftLint/releases/download/0.49.0/bazel.tar.gz\",\r\n)\r\n\r\nload(\"@SwiftLint//bazel:repos.bzl\", \"swiftlint_repos\")\r\n\r\nswiftlint_repos()\r\n\r\nload(\"@SwiftLint//bazel:deps.bzl\", \"swiftlint_deps\")\r\n\r\nswiftlint_deps()\r\n```\r\n\r\n</details>\r\n\r\nThen you can run SwiftLint in the current directory with this command:\r\n\r\n```console\r\nbazel run @SwiftLint//:swiftlint -- --help\r\n```",
    "createdAt" : "2022-08-26T23:48:09+09:00",
    "fetchedFromAPIAt" : "2022-08-27T09:51:13+09:00",
    "id" : "RE_kwDOAiE69s4Ef7OR",
    "owner" : "realm",
    "publishedAt" : "2022-08-26T23:53:05+09:00",
    "repository" : "SwiftLint",
    "title" : "0.49.0: Asynchronous Defuzzer",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.49.0",
    "version" : "0.49.0"
  },
  {
    "body" : "_Note: The default branch for the SwiftLint git repository was renamed from\r\n`master` to `main` on September 1st. Please update any code or automation\r\naccordingly._\r\n\r\n#### Breaking\r\n\r\n* None.\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* Add new `self_binding` opt-in rule to enforce that `self` identifiers are\r\n  consistently re-bound to a common identifier name. Configure `bind_identifier`\r\n  to the name you want to use. Defaults to `self`.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#2495](https://github.com/realm/SwiftLint/issues/2495)\r\n\r\n* Add `--output` option to lint and analyze commands to write to a file instead\r\n  of to stdout.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#4048](https://github.com/realm/SwiftLint/issues/4048)\r\n\r\n* Add `--progress` flag to lint and analyze commands to show a live-updating\r\n  progress bar instead of each file being processed.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* `--fix` now works with `--use-stdin`, printing the output to to STDOUT instead\r\n  of crashing.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4127](https://github.com/realm/SwiftLint/issues/4127)\r\n\r\n#### Bug Fixes\r\n\r\n* Migrate `empty_xctest_method` rule to SwiftSyntax fixing some false positives.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#3647](https://github.com/realm/SwiftLint/issues/3647)\r\n  [#3691](https://github.com/realm/SwiftLint/issues/3691)\r\n\r\n* Fix false positives in `redundant_discardable_let` when using\r\n  `async let`.  \r\n  [Martin Hosna](https://github.com/mhosna)\r\n  [#4142](https://github.com/realm/SwiftLint/issues/4142)\r\n\r\n* Consistently print error/info messages to stderr instead of stdout,\r\n  which wasn't being done for errors regarding remote configurations.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n---\r\n\r\n### Using Bazel\r\n\r\nPut this in your `WORKSPACE`:\r\n\r\n<details>\r\n\r\n<summary>WORKSPACE</summary>\r\n\r\n```python\r\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\r\n\r\nhttp_archive(\r\n    name = \"build_bazel_rules_apple\",\r\n    sha256 = \"f003875c248544009c8e8ae03906bbdacb970bc3e5931b40cd76cadeded99632\",\r\n    url = \"https://github.com/bazelbuild/rules_apple/releases/download/1.1.0/rules_apple.1.1.0.tar.gz\",\r\n)\r\n\r\nload(\r\n    \"@build_bazel_rules_apple//apple:repositories.bzl\",\r\n    \"apple_rules_dependencies\",\r\n)\r\n\r\napple_rules_dependencies()\r\n\r\nload(\r\n    \"@build_bazel_rules_swift//swift:repositories.bzl\",\r\n    \"swift_rules_dependencies\",\r\n)\r\n\r\nswift_rules_dependencies()\r\n\r\nload(\r\n    \"@build_bazel_rules_swift//swift:extras.bzl\",\r\n    \"swift_rules_extra_dependencies\",\r\n)\r\n\r\nswift_rules_extra_dependencies()\r\n\r\nhttp_archive(\r\n    name = \"SwiftLint\",\r\n    sha256 = \"7c454ff4abeeecdd9513f6293238a6d9f803b587eb93de147f9aa1be0d8337c4\",\r\n    url = \"https://github.com/realm/SwiftLint/releases/download/0.49.1/bazel.tar.gz\",\r\n)\r\n\r\nload(\"@SwiftLint//bazel:repos.bzl\", \"swiftlint_repos\")\r\n\r\nswiftlint_repos()\r\n\r\nload(\"@SwiftLint//bazel:deps.bzl\", \"swiftlint_deps\")\r\n\r\nswiftlint_deps()\r\n```\r\n\r\n</details>\r\n\r\nThen you can run SwiftLint in the current directory with this command:\r\n\r\n```console\r\nbazel run @SwiftLint//:swiftlint -- --help\r\n```",
    "createdAt" : "2022-09-02T01:32:19+09:00",
    "fetchedFromAPIAt" : "2022-09-02T09:57:11+09:00",
    "id" : "RE_kwDOAiE69s4EiG5G",
    "owner" : "realm",
    "publishedAt" : "2022-09-02T01:32:51+09:00",
    "repository" : "SwiftLint",
    "title" : "0.49.1: Buanderie Principale",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.49.1",
    "version" : "0.49.1"
  },
  {
    "body" : "This is a prerelease version. It won't be published to Homebrew or CocoaPods. But there are many other ways to install:\r\n\r\n* Downloading the attached `SwiftLint.pkg` installer and launching it\r\n* Downloading the attached `portable_swiftlint.zip` archive, extracting it and moving the binary from `portable_swiftlint/swiftlint` to `/usr/local/bin` or elsewhere in your `PATH`\r\n* Using [Mint](https://github.com/yonaskolb/Mint): `mint install realm/SwiftLint@0.50.0-rc.1`\r\n* Cloning and building from source: `git clone https://github.com/realm/SwiftLint.git && cd SwiftLint && git checkout 0.50.0-rc.1 && make install`\r\n* Docker: ```docker run -it -v `pwd`:`pwd` -w `pwd` ghcr.io/realm/swiftlint:0.50.0-rc.1```\r\n* Bazel: See instructions at the bottom\r\n\r\nChanges from 0.49.1: https://github.com/realm/SwiftLint/compare/0.49.1...0.50.0-rc.1\r\n\r\n---\r\n\r\n#### Breaking\r\n\r\n* SwiftLint now requires Swift 5.7 or higher to build.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Exclude `weak_delegate` rule from autocorrection due to behavioral changes\r\n  leading to potential undefined behavior or bugs.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#3577](https://github.com/realm/SwiftLint/issues/3577)\r\n\r\n* The `anyobject_protocol` rule is now deprecated and will be completely removed\r\n  in a future release because it is now handled by the Swift compiler.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* SwiftSyntax libraries have been updated from the previous 5.6 release and now\r\n  use the new parser written in Swift.\r\n  Swift 5.7+ features should now be parsed more accurately.\r\n  We've also measured an improvement in lint times of up to 15%.\r\n  This should also fix some deployment issues where the exact version of the\r\n  internal SwiftSyntax parser needed to be available.\r\n  If you notice any unexpected changes to lint results, please file an issue on\r\n  the SwiftLint issue tracker. We can look into it and if it's a SwiftSyntax\r\n  parser regression we can re-file it upstream.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#4031](https://github.com/realm/SwiftLint/issues/4031)\r\n\r\n* Add ability to filter rules for `generate-docs` subcommand.  \r\n  [kattouf](https://github.com/kattouf)\r\n\r\n* Add new `excludes_trivial_init` configuration for `missing_docs` rule\r\n  to exclude initializers without any parameters.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#4107](https://github.com/realm/SwiftLint/issues/4107)\r\n\r\n* Rewrite some rules with SwiftSyntax, fixing some false positives and catching\r\n  more violations:\r\n  - `anonymous_argument_in_multiline_closure`\r\n  - `array_init`\r\n  - `block_based_kvo`\r\n  - `class_delegate_protocol`\r\n  - `closing_brace`\r\n  - `closure_parameter_position`\r\n  - `computed_accessors_order`\r\n  - `contains_over_filter_count`\r\n  - `contains_over_range_nil_comparison`\r\n  - `deployment_target`\r\n  - `discouraged_object_literal`\r\n  - `discouraged_optional_boolean`\r\n  - `duplicate_enum_cases`\r\n  - `dynamic_inline`\r\n  - `empty_collection_literal`\r\n  - `empty_enum_arguments`\r\n  - `empty_parameters`\r\n  - `empty_parentheses_with_trailing_closure`\r\n  - `empty_string`\r\n  - `explicit_init`\r\n  - `fallthrough`\r\n  - `flatmap_over_map_reduce`\r\n  - `force_try`\r\n  - `force_unwrapping`\r\n  - `generic_type_name`\r\n  - `ibinspectable_in_extension`\r\n  - `implicit_getter`\r\n  - `inert_defer`\r\n  - `large_tuple`\r\n  - `legacy_cggeometry_functions`\r\n  - `legacy_constant`\r\n  - `legacy_nsgeometry_functions`\r\n  - `multiple_closures_with_trailing_closure`\r\n  - `no_extension_access_modifier`\r\n  - `no_fallthrough_only`\r\n  - `no_space_in_method_call`\r\n  - `nsobject_prefer_isequal`\r\n  - `private_action`\r\n  - `private_outlet`\r\n  - `private_unit_test`\r\n  - `protocol_property_accessors_order`\r\n  - `redundant_nil_coalescing`\r\n  - `redundant_string_enum_value`\r\n  - `strong_iboutlet`\r\n  - `switch_case_on_newline`\r\n  - `toggle_bool`\r\n  - `trailing_semicolon`\r\n  - `unneeded_break_in_switch`\r\n  - `unneeded_parentheses_in_closure_argument`\r\n  - `unowned_variable_capture`\r\n  - `untyped_error_in_catch`\r\n  - `xctfail_message`  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [JP Simard](https://github.com/jpsim)\r\n  [#2915](https://github.com/realm/SwiftLint/issues/2915)\r\n\r\n* Add `accessibility_trait_for_button` rule to warn if a SwiftUI\r\n  View has a tap gesture added to it without having the button or\r\n  link accessibility trait.  \r\n  [Ryan Cole](https://github.com/rcole34)\r\n\r\n* Add methods from SE-0348 to `UnusedDeclarationRule`.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Include the configured `bind_identifier` in `self_binding` violation\r\n  messages.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  \r\n* Add `library_content_provider` file type to `file_types_order` rule \r\n  to allow `LibraryContentProvider` to be ordered independent from `main_type`.  \r\n  [dahlborn](https://github.com/dahlborn)\r\n\r\n* Add `test_parent_classes` option to `test_case_accessibility` rule, which\r\n  allows detection in subclasses of XCTestCase.  \r\n  [Martin Redington](https://github.com/mildm8nnered)\r\n  [#4200](https://github.com/realm/SwiftLint/issues/4200)\r\n\r\n* Add a new `if_let_shadowing` opt-in rule that triggers in Swift 5.7 when a\r\n  shadowing optional binding is created in an if- or guard-statement.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4202](https://github.com/realm/SwiftLint/issues/4202)\r\n\r\n* Use SwiftSyntax instead of SourceKit to determine if a file has parser errors\r\n  before applying corrections. This speeds up corrections significantly when\r\n  none of the rules use SourceKit.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  \r\n* Add Swift Package Build Tool Plugin with support for Swift Packages\r\n  and Xcode projects.  \r\n  [Johannes Ebeling](https://github.com/technocidal)\r\n  [#3679](https://github.com/realm/SwiftLint/issues/3679)\r\n  [#3840](https://github.com/realm/SwiftLint/issues/3840)\r\n\r\n* Make `private_unit_test` rule correctable.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n\r\n#### Bug Fixes\r\n\r\n* Respect `validates_start_with_lowercase` option when linting function names.  \r\n  [Chris Brakebill](https://github.com/braker1nine)\r\n  [#2708](https://github.com/realm/SwiftLint/issues/2708)\r\n\r\n* Do not report variables annotated with `@NSApplicationDelegateAdaptor` and\r\n  `@WKExtensionDelegateAdaptor` in `weak_delegate` rule.  \r\n  [Till Hainbach](https://github.com/tillhainbach)\r\n  [#3598](https://github.com/realm/SwiftLint/issues/3456)\r\n  [#3611](https://github.com/realm/SwiftLint/issues/3611)\r\n\r\n* Fix false-positives related to the `willMove` lifecycle method in\r\n  `type_contents_order` rule.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#3478](https://github.com/realm/SwiftLint/issues/3478)\r\n\r\n* Do no longer autocorrect usage of `NSIntersectionRect` in `legacy_nsgeometry_functions`\r\n  rule.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#3703](https://github.com/realm/SwiftLint/issues/3703)\r\n\r\n* Fix Analyzer rules in Xcode 14.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4208](https://github.com/realm/SwiftLint/issues/4208)\r\n\r\n* Add column for SourceKit usage to `rules` command.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n---\r\n\r\n### Using Bazel\r\n\r\nPut this in your `WORKSPACE`:\r\n\r\n<details>\r\n\r\n<summary>WORKSPACE</summary>\r\n\r\n```python\r\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\r\n\r\nhttp_archive(\r\n    name = \"build_bazel_rules_apple\",\r\n    sha256 = \"90e3b5e8ff942be134e64a83499974203ea64797fd620eddeb71b3a8e1bff681\",\r\n    url = \"https://github.com/bazelbuild/rules_apple/releases/download/1.1.2/rules_apple.1.1.2.tar.gz\",\r\n)\r\n\r\nload(\r\n    \"@build_bazel_rules_apple//apple:repositories.bzl\",\r\n    \"apple_rules_dependencies\",\r\n)\r\n\r\napple_rules_dependencies()\r\n\r\nload(\r\n    \"@build_bazel_rules_swift//swift:repositories.bzl\",\r\n    \"swift_rules_dependencies\",\r\n)\r\n\r\nswift_rules_dependencies()\r\n\r\nload(\r\n    \"@build_bazel_rules_swift//swift:extras.bzl\",\r\n    \"swift_rules_extra_dependencies\",\r\n)\r\n\r\nswift_rules_extra_dependencies()\r\n\r\nhttp_archive(\r\n    name = \"SwiftLint\",\r\n    sha256 = \"ee13554c48ca7845513ae307863525afbb5b8f22d4c3b34b5b2e87311c3d5e26\",\r\n    url = \"https://github.com/realm/SwiftLint/releases/download/0.50.0-rc.1/bazel.tar.gz\",\r\n)\r\n\r\nload(\"@SwiftLint//bazel:repos.bzl\", \"swiftlint_repos\")\r\n\r\nswiftlint_repos()\r\n\r\nload(\"@SwiftLint//bazel:deps.bzl\", \"swiftlint_deps\")\r\n\r\nswiftlint_deps()\r\n```\r\n\r\n</details>\r\n\r\nThen you can run SwiftLint in the current directory with this command:\r\n\r\n```console\r\nbazel run @SwiftLint//:swiftlint -- --help\r\n```",
    "createdAt" : "2022-10-07T23:50:02+09:00",
    "fetchedFromAPIAt" : "2022-10-08T09:58:09+09:00",
    "id" : "RE_kwDOAiE69s4EubxU",
    "owner" : "realm",
    "publishedAt" : "2022-10-08T00:00:10+09:00",
    "repository" : "SwiftLint",
    "title" : "0.50.0-rc.1: Artisanal Clothes Pegs",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.50.0-rc.1",
    "version" : "0.50.0-rc.1"
  },
  {
    "body" : "This is a prerelease version. It won't be published to Homebrew or CocoaPods. But there are many other ways to install:\r\n\r\n* Downloading the attached `SwiftLint.pkg` installer and launching it\r\n* Downloading the attached `portable_swiftlint.zip` archive, extracting it and moving the binary from `portable_swiftlint/swiftlint` to `/usr/local/bin` or elsewhere in your `PATH`\r\n* Using [Mint](https://github.com/yonaskolb/Mint): `mint install realm/SwiftLint@0.50.0-rc.2`\r\n* Cloning and building from source: `git clone https://github.com/realm/SwiftLint.git && cd SwiftLint && git checkout 0.50.0-rc.2 && make install`\r\n* Docker: ```docker run -it -v `pwd`:`pwd` -w `pwd` ghcr.io/realm/swiftlint:0.50.0-rc.2```\r\n* Bazel: See instructions at the bottom\r\n\r\nChanges from 0.49.1: https://github.com/realm/SwiftLint/compare/0.49.1...0.50.0-rc.2\r\nChanges from 0.50.0-rc.1: https://github.com/realm/SwiftLint/compare/0.50.0-rc.1...0.50.0-rc.2\r\n\r\n---\r\n\r\n#### Breaking\r\n\r\n* SwiftLint now requires Swift 5.7 or higher to build.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Exclude `weak_delegate` rule from autocorrection due to behavioral changes\r\n  leading to potential undefined behavior or bugs.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#3577](https://github.com/realm/SwiftLint/issues/3577)\r\n\r\n* The `anyobject_protocol` rule is now deprecated and will be completely removed\r\n  in a future release because it is now handled by the Swift compiler.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* SwiftSyntax libraries have been updated from the previous 5.6 release and now\r\n  use the new parser written in Swift.\r\n  Swift 5.7+ features should now be parsed more accurately.\r\n  We've also measured an improvement in lint times of up to 15%.\r\n  This should also fix some deployment issues where the exact version of the\r\n  internal SwiftSyntax parser needed to be available.\r\n  If you notice any unexpected changes to lint results, please file an issue on\r\n  the SwiftLint issue tracker. We can look into it and if it's a SwiftSyntax\r\n  parser regression we can re-file it upstream.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#4031](https://github.com/realm/SwiftLint/issues/4031)\r\n\r\n* Add ability to filter rules for `generate-docs` subcommand.  \r\n  [kattouf](https://github.com/kattouf)\r\n\r\n* Add new `excludes_trivial_init` configuration for `missing_docs` rule\r\n  to exclude initializers without any parameters.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#4107](https://github.com/realm/SwiftLint/issues/4107)\r\n\r\n* Rewrite some rules with SwiftSyntax, fixing some false positives and catching\r\n  more violations:\r\n  - `anonymous_argument_in_multiline_closure`\r\n  - `array_init`\r\n  - `attributes`\r\n  - `block_based_kvo`\r\n  - `class_delegate_protocol`\r\n  - `closing_brace`\r\n  - `closure_body_length`\r\n  - `closure_parameter_position`\r\n  - `computed_accessors_order`\r\n  - `conditional_returns_on_newline`\r\n  - `contains_over_filter_count`\r\n  - `contains_over_filter_is_empty`\r\n  - `contains_over_first_not_nil`\r\n  - `contains_over_range_nil_comparison`\r\n  - `deployment_target`\r\n  - `discouraged_assert`\r\n  - `discouraged_direct_init`\r\n  - `discouraged_none_name`\r\n  - `discouraged_object_literal`\r\n  - `discouraged_optional_boolean`\r\n  - `duplicate_enum_cases`\r\n  - `dynamic_inline`\r\n  - `empty_collection_literal`\r\n  - `empty_enum_arguments`\r\n  - `empty_parameters`\r\n  - `empty_parentheses_with_trailing_closure`\r\n  - `empty_string`\r\n  - `enum_case_associated_values_count`\r\n  - `explicit_enum_raw_value`\r\n  - `explicit_init`\r\n  - `fallthrough`\r\n  - `first_where`\r\n  - `flatmap_over_map_reduce`\r\n  - `force_try`\r\n  - `force_unwrapping`\r\n  - `function_body_length`\r\n  - `function_default_parameter_at_end`\r\n  - `function_parameter_count`\r\n  - `generic_type_name`\r\n  - `ibinspectable_in_extension`\r\n  - `identical_operands`\r\n  - `implicit_getter`\r\n  - `implicitly_unwrapped_optional`\r\n  - `inert_defer`\r\n  - `is_disjoint`\r\n  - `large_tuple`\r\n  - `last_where`\r\n  - `legacy_cggeometry_functions`\r\n  - `legacy_constant`\r\n  - `legacy_constructor`\r\n  - `legacy_hashing`\r\n  - `legacy_multiple`\r\n  - `legacy_nsgeometry_functions`\r\n  - `legacy_random`\r\n  - `multiple_closures_with_trailing_closure`\r\n  - `no_extension_access_modifier`\r\n  - `no_fallthrough_only`\r\n  - `no_space_in_method_call`\r\n  - `nslocalizedstring_require_bundle`\r\n  - `nsobject_prefer_isequal`\r\n  - `number_separator`\r\n  - `operator_whitespace`\r\n  - `nsobject_prefer_isequal`\r\n  - `private_action`\r\n  - `private_over_fileprivate`\r\n  - `private_outlet`\r\n  - `private_unit_test`\r\n  - `prohibited_interface_builder`\r\n  - `protocol_property_accessors_order`\r\n  - `quick_discouraged_focused_test`\r\n  - `quick_discouraged_pending_test`\r\n  - `reduce_boolean`\r\n  - `redundant_discardable_let`\r\n  - `redundant_nil_coalescing`\r\n  - `redundant_string_enum_value`\r\n  - `self_in_property_initialization`\r\n  - `shorthand_operator`\r\n  - `sorted_first_last`\r\n  - `static_operator`\r\n  - `strict_fileprivate`\r\n  - `strong_iboutlet`\r\n  - `switch_case_alignment`\r\n  - `switch_case_on_newline`\r\n  - `toggle_bool`\r\n  - `trailing_comma`\r\n  - `trailing_semicolon`\r\n  - `type_body_length`\r\n  - `unneeded_break_in_switch`\r\n  - `unneeded_parentheses_in_closure_argument`\r\n  - `unowned_variable_capture`\r\n  - `untyped_error_in_catch`\r\n  - `unused_closure_parameter`\r\n  - `unused_control_flow_label`\r\n  - `unused_enumerated`\r\n  - `unused_setter_value`\r\n  - `valid_ibinspectable`\r\n  - `weak_delegate`\r\n  - `xctfail_message`  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [JP Simard](https://github.com/jpsim)\r\n  [#2915](https://github.com/realm/SwiftLint/issues/2915)\r\n\r\n* The \"body length\" family of rules have changed how they calculate body\r\n  line count to be significantly more correct and intuitive. However,\r\n  this is likely to require adjustments to your configuration or disable\r\n  commands to account for the changes.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Add `accessibility_trait_for_button` rule to warn if a SwiftUI\r\n  View has a tap gesture added to it without having the button or\r\n  link accessibility trait.  \r\n  [Ryan Cole](https://github.com/rcole34)\r\n\r\n* Add methods from SE-0348 to `UnusedDeclarationRule`.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Include the configured `bind_identifier` in `self_binding` violation\r\n  messages.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Add `library_content_provider` file type to `file_types_order` rule \r\n  to allow `LibraryContentProvider` to be ordered independent from `main_type`.  \r\n  [dahlborn](https://github.com/dahlborn)\r\n\r\n* Add `test_parent_classes` option to `test_case_accessibility` rule, which\r\n  allows detection in subclasses of XCTestCase.  \r\n  [Martin Redington](https://github.com/mildm8nnered)\r\n  [#4200](https://github.com/realm/SwiftLint/issues/4200)\r\n\r\n* Add a new `shorthand_optional_binding` opt-in rule that triggers in Swift 5.7\r\n  when a shadowing optional binding is created in an `if` or `guard` statement.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4202](https://github.com/realm/SwiftLint/issues/4202)\r\n\r\n* Use SwiftSyntax instead of SourceKit to determine if a file has parser errors\r\n  before applying corrections. This speeds up corrections significantly when\r\n  none of the rules use SourceKit.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Add Swift Package Build Tool Plugin with support for Swift Packages\r\n  and Xcode projects.  \r\n  [Johannes Ebeling](https://github.com/technocidal)\r\n  [#3679](https://github.com/realm/SwiftLint/issues/3679)\r\n  [#3840](https://github.com/realm/SwiftLint/issues/3840)\r\n\r\n* Make `private_unit_test` rule correctable.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n\r\n* Disregard whitespace differences in `identical_operands` rule. That is, the rule\r\n  now also triggers if the left-hand side and the right-hand side of an operation\r\n  only differ in trivia.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n\r\n* Print violations in realtime if `--progress` and `--output` are both set.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n#### Bug Fixes\r\n\r\n* Respect `validates_start_with_lowercase` option when linting function names.  \r\n  [Chris Brakebill](https://github.com/braker1nine)\r\n  [#2708](https://github.com/realm/SwiftLint/issues/2708)\r\n\r\n* Do not report variables annotated with `@NSApplicationDelegateAdaptor` and\r\n  `@WKExtensionDelegateAdaptor` in `weak_delegate` rule.  \r\n  [Till Hainbach](https://github.com/tillhainbach)\r\n  [#3598](https://github.com/realm/SwiftLint/issues/3456)\r\n  [#3611](https://github.com/realm/SwiftLint/issues/3611)\r\n\r\n* Fix false-positives related to the `willMove` lifecycle method in\r\n  `type_contents_order` rule.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#3478](https://github.com/realm/SwiftLint/issues/3478)\r\n\r\n* Do no longer autocorrect usage of `NSIntersectionRect` in `legacy_nsgeometry_functions`\r\n  rule.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#3703](https://github.com/realm/SwiftLint/issues/3703)\r\n\r\n* Fix Analyzer rules in Xcode 14.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4208](https://github.com/realm/SwiftLint/issues/4208)\r\n\r\n* Add column for SourceKit usage to `rules` command.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Make `nsobject_prefer_isequal` rule work for nested `@objc` classes. Also consider\r\n  the `@objcMembers` annotation.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n\r\n* Print fixed content at most once to STDOUT.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4211](https://github.com/realm/SwiftLint/issues/4211)\r\n\r\n* Fix fatal error when content given via STDIN is corrected in the\r\n  `trailing_newline` rule.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4234](https://github.com/realm/SwiftLint/issues/4234)\r\n\r\n---\r\n\r\n### Using Bazel\r\n\r\nPut this in your `WORKSPACE`:\r\n\r\n<details>\r\n\r\n<summary>WORKSPACE</summary>\r\n\r\n```python\r\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\r\n\r\nhttp_archive(\r\n    name = \"build_bazel_rules_apple\",\r\n    sha256 = \"90e3b5e8ff942be134e64a83499974203ea64797fd620eddeb71b3a8e1bff681\",\r\n    url = \"https://github.com/bazelbuild/rules_apple/releases/download/1.1.2/rules_apple.1.1.2.tar.gz\",\r\n)\r\n\r\nload(\r\n    \"@build_bazel_rules_apple//apple:repositories.bzl\",\r\n    \"apple_rules_dependencies\",\r\n)\r\n\r\napple_rules_dependencies()\r\n\r\nload(\r\n    \"@build_bazel_rules_swift//swift:repositories.bzl\",\r\n    \"swift_rules_dependencies\",\r\n)\r\n\r\nswift_rules_dependencies()\r\n\r\nload(\r\n    \"@build_bazel_rules_swift//swift:extras.bzl\",\r\n    \"swift_rules_extra_dependencies\",\r\n)\r\n\r\nswift_rules_extra_dependencies()\r\n\r\nhttp_archive(\r\n    name = \"SwiftLint\",\r\n    sha256 = \"973587995aab45ac56b963c1768a830a6a66580ccea4d5bf81617106b22bfa3f\",\r\n    url = \"https://github.com/realm/SwiftLint/releases/download/0.50.0-rc.2/bazel.tar.gz\",\r\n)\r\n\r\nload(\"@SwiftLint//bazel:repos.bzl\", \"swiftlint_repos\")\r\n\r\nswiftlint_repos()\r\n\r\nload(\"@SwiftLint//bazel:deps.bzl\", \"swiftlint_deps\")\r\n\r\nswiftlint_deps()\r\n```\r\n\r\n</details>\r\n\r\nThen you can run SwiftLint in the current directory with this command:\r\n\r\n```console\r\nbazel run @SwiftLint//:swiftlint -- --help\r\n```",
    "createdAt" : "2022-10-18T03:51:48+09:00",
    "fetchedFromAPIAt" : "2022-10-18T10:05:58+09:00",
    "id" : "RE_kwDOAiE69s4ExpTb",
    "owner" : "realm",
    "publishedAt" : "2022-10-18T03:54:46+09:00",
    "repository" : "SwiftLint",
    "title" : "0.50.0-rc.2: Artisanal Clothes Pegs",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.50.0-rc.2",
    "version" : "0.50.0-rc.2"
  },
  {
    "body" : "#### Breaking\r\n\r\n* None.\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* Moved the validation of doc comments in local scopes out of\r\n  `orphaned_doc_comment` and into a new opt-in `local_doc_comment` rule.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#4573](https://github.com/realm/SwiftLint/issues/4573)\r\n\r\n* SwiftLint's Swift Package Build Tool Plugin will now only scan files\r\n  in the target being built.  \r\n  [Tony Arnold](https://github.com/tonyarnold)\r\n  [#4406](https://github.com/realm/SwiftLint/pull/4406)\r\n\r\n#### Bug Fixes\r\n\r\n* Fix building with `swift build -c release`.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#4559](https://github.com/realm/SwiftLint/issues/4559)\r\n  [#4560](https://github.com/realm/SwiftLint/issues/4560)\r\n\r\n* Fix false positives in `lower_acl_than_parent` when the nominal parent\r\n  is an extension.  \r\n  [Steffen Matthischke](https://github.com/heeaad)\r\n  [#4564](https://github.com/realm/SwiftLint/issues/4564)\r\n\r\n* Fix `minimum_fraction_length` handling in `number_separator`.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#4576](https://github.com/realm/SwiftLint/issues/4576)\r\n\r\n* Fix false positives in `closure_spacing`.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#4565](https://github.com/realm/SwiftLint/issues/4565)\r\n  [#4582](https://github.com/realm/SwiftLint/issues/4582)\r\n\r\n* Fix line count calculation for multiline string literals.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#4585](https://github.com/realm/SwiftLint/issues/4585)\r\n\r\n* Fix false positives in `unused_closure_parameter` when using\r\n  identifiers with backticks.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#4588](https://github.com/realm/SwiftLint/issues/4588)\r\n\r\n* Fix `type_name` regression where names with backticks would trigger\r\n  violations.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#4571](https://github.com/realm/SwiftLint/issues/4571)",
    "createdAt" : "2022-11-26T01:38:16+09:00",
    "fetchedFromAPIAt" : "2022-11-26T09:42:24+09:00",
    "id" : "RE_kwDOAiE69s4FBNXB",
    "owner" : "realm",
    "publishedAt" : "2022-11-26T01:38:49+09:00",
    "repository" : "SwiftLint",
    "title" : "0.50.1: Artisanal Clothes Pegs Fixup Edition",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.50.1",
    "version" : "0.50.1"
  },
  {
    "body" : "#### Breaking\r\n\r\n* None.\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* The `SwiftLintPlugin` SwiftPM plugin now uses a prebuilt binary on\r\n  macOS.  \r\n  [Tony Arnold](https://github.com/tonyarnold)\r\n  [JP Simard](https://github.com/jpsim)\r\n  [#4558](https://github.com/realm/SwiftLint/issues/4558)\r\n\r\n* Don't trigger `shorthand_operator` violations inside a shorthand\r\n  operator function declaration.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#4611](https://github.com/realm/SwiftLint/issues/4611)\r\n\r\n* The `balanced_xctest_lifecycle`, `single_test_class`,\r\n  `empty_xctest_method` and `test_case_accessibility` rules will now be\r\n  applied to subclasses of `QuickSpec`, as well as `XCTestCase`, by\r\n  default.  \r\n  [Martin Redington](https://github.com/mildm8nnered)\r\n\r\n* Add `test_parent_classes` option to `balanced_xctest_lifecycle`,\r\n  `single_test_class` and `empty_xctest_method` rules.  \r\n  [Martin Redington](https://github.com/mildm8nnered)\r\n  [#4200](https://github.com/realm/SwiftLint/issues/4200)\r\n\r\n* Show warnings in the console for Analyzer rules that are listed in the\r\n  `opt_in_rules` configuration section.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4612](https://github.com/realm/SwiftLint/issues/4612)\r\n\r\n#### Bug Fixes\r\n\r\n* Fix configuration parsing error in `unused_declaration` rule.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4612](https://github.com/realm/SwiftLint/issues/4612)\r\n\r\n* Skip `defer` statements being last in an `#if` block if the `#if`\r\n  statement is not itself the last statement in a block.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4615](https://github.com/realm/SwiftLint/issues/4615)\r\n\r\n* Fix false positives in `empty_enum_arguments` when the called\r\n  expression is an identifier or an init call.  \r\n  [Steffen Matthischke](https://github.com/heeaad)\r\n  [#4597](https://github.com/realm/SwiftLint/issues/4597)\r\n\r\n* Fix correction issue in `comma` when there was too much whitespace\r\n  following the comma.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n---\r\n\r\n### Using Bazel\r\n\r\nPut this in your `WORKSPACE`:\r\n\r\n<details>\r\n\r\n<summary>WORKSPACE</summary>\r\n\r\n```python\r\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\r\n\r\nhttp_archive(\r\n    name = \"build_bazel_rules_apple\",\r\n    sha256 = \"f94e6dddf74739ef5cb30f000e13a2a613f6ebfa5e63588305a71fce8a8a9911\",\r\n    url = \"https://github.com/bazelbuild/rules_apple/releases/download/1.1.3/rules_apple.1.1.3.tar.gz\",\r\n)\r\n\r\nload(\r\n    \"@build_bazel_rules_apple//apple:repositories.bzl\",\r\n    \"apple_rules_dependencies\",\r\n)\r\n\r\napple_rules_dependencies()\r\n\r\nload(\r\n    \"@build_bazel_rules_swift//swift:repositories.bzl\",\r\n    \"swift_rules_dependencies\",\r\n)\r\n\r\nswift_rules_dependencies()\r\n\r\nload(\r\n    \"@build_bazel_rules_swift//swift:extras.bzl\",\r\n    \"swift_rules_extra_dependencies\",\r\n)\r\n\r\nswift_rules_extra_dependencies()\r\n\r\nhttp_archive(\r\n    name = \"SwiftLint\",\r\n    sha256 = \"b8c4d765bcd8b533fcc2e15f32482a1a17572f143b65af388f7d5ac99994a99a\",\r\n    url = \"https://github.com/realm/SwiftLint/releases/download/0.50.3/bazel.tar.gz\",\r\n)\r\n\r\nload(\"@SwiftLint//bazel:repos.bzl\", \"swiftlint_repos\")\r\n\r\nswiftlint_repos()\r\n\r\nload(\"@SwiftLint//bazel:deps.bzl\", \"swiftlint_deps\")\r\n\r\nswiftlint_deps()\r\n```\r\n\r\n</details>\r\n\r\nThen you can run SwiftLint in the current directory with this command:\r\n\r\n```console\r\nbazel run -c opt @SwiftLint//:swiftlint -- --help\r\n```\r\n",
    "createdAt" : "2022-12-10T04:12:02+09:00",
    "fetchedFromAPIAt" : "2022-12-10T09:40:51+09:00",
    "id" : "RE_kwDOAiE69s4FGgff",
    "owner" : "realm",
    "publishedAt" : "2022-12-10T04:15:28+09:00",
    "repository" : "SwiftLint",
    "title" : "0.50.3: Bundle of Towels",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.50.3",
    "version" : "0.50.3"
  },
  {
    "body" : "This is a prerelease version. It won't be published to Homebrew, CocoaPods or bzlmod. But there are many other ways to install:\r\n\r\n* Downloading the attached `SwiftLint.pkg` installer and launching it\r\n* Downloading the attached `portable_swiftlint.zip` archive, extracting it and moving the binary from `portable_swiftlint/swiftlint` to `/usr/local/bin` or elsewhere in your `PATH`\r\n* Using [Mint](https://github.com/yonaskolb/Mint): `mint install realm/SwiftLint@0.51.0-rc.1`\r\n* Cloning and building from source: `git clone https://github.com/realm/SwiftLint.git && cd SwiftLint && git checkout 0.51.0-rc.1 && make install`\r\n* Docker: ```docker run -it -v `pwd`:`pwd` -w `pwd` ghcr.io/realm/swiftlint:0.51.0-rc.1```\r\n* Bazel: See instructions at the bottom\r\n\r\nChanges from 0.50.3: https://github.com/realm/SwiftLint/compare/0.50.3...0.51.0-rc.1\r\n\r\n---\r\n\r\n#### Breaking\r\n\r\n* Deprecate the `unused_capture_list` rule in favor of the Swift compiler\r\n  warning. At the same time, make it an opt-in rule.  \r\n  [Cyberbeni](https://github.com/Cyberbeni)\r\n  [#4656](https://github.com/realm/SwiftLint/issues/4656)\r\n\r\n* Deprecate the `inert_defer` rule in favor of the Swift compiler warning.\r\n  At the same time, make it an opt-in rule.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4615](https://github.com/realm/SwiftLint/issues/4615)\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* Add local links to rule descriptions to every rule listed\r\n  in `Rule Directory.md`.  \r\n  [kattouf](https://github.com/kattouf)\r\n\r\n* Make forceExclude work with directly specified files.  \r\n  [jimmya](https://github.com/jimmya)\r\n  [#issue_number](https://github.com/realm/SwiftLint/issues/4609)\r\n\r\n* Separate analyzer rules as an independent section in the rule directory of\r\n  the reference.  \r\n  [Ethan Wong](https://github.com/GetToSet)\r\n  [#4664](https://github.com/realm/SwiftLint/pull/4664)\r\n\r\n* Add rule identifier to output of Emoji reporter.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4707](https://github.com/realm/SwiftLint/issues/4707)\r\n\r\n* Interpret strings in `excluded` option of `identifier_name`, \r\n  `type_name` and `generic_type_name` rules as regex.  \r\n  [Moly](https://github.com/kyounh12)\r\n  [#4655](https://github.com/realm/SwiftLint/pull/4655)\r\n\r\n* Add new `direct_return` rule that triggers on `return` statements returning\r\n  variables that have been declared in the statement before only.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n\r\n* Add `period_spacing` opt-in rule that checks periods are not followed\r\n  by 2 or more spaces in comments.  \r\n  [Julioacarrettoni](https://github.com/Julioacarrettoni)\r\n  [#4624](https://github.com/realm/SwiftLint/pull/4624)\r\n\r\n* Allow to pass a rule identifier to the `swiftlint docs` command to open its\r\n  specific documentation website, e.g. `swiftlint docs for_where`.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4707](https://github.com/realm/SwiftLint/issues/4707)\r\n\r\n* Allow new Quick APIs `aroundEach` and `justBeforeEach` for\r\n  `quick_discouraged_call`.  \r\n  [David Steinacher](https://github.com/stonko1994)\r\n  [#4626](https://github.com/realm/SwiftLint/issues/4626)\r\n\r\n* Add `relative-path` reporter to generate reports with relative file paths.  \r\n  [Roya1v](https://github.com/roya1v)\r\n  [#4660](https://github.com/realm/SwiftLint/issues/4660)\r\n\r\n* Let `number_separator` rule trigger on misplaced separators, e.g. `10_00`.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4637](https://github.com/realm/SwiftLint/issues/4637)\r\n\r\n* Rewrite `multiline_arguments` rule using SwiftSyntax, ignoring trailing\r\n  closures.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#3399](https://github.com/realm/SwiftLint/issues/3399)\r\n  [#3605](https://github.com/realm/SwiftLint/issues/3605)\r\n\r\n* Speed up linting by up to 6% updating to use a newer version of\r\n  `SwiftSyntax`.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Catch more valid `legacy_multiple` violations.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Catch more valid `no_magic_numbers` violations.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n#### Bug Fixes\r\n\r\n* Report violations in all `<scope>_length` rules when the error threshold is\r\n  smaller than the warning threshold.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4645](https://github.com/realm/SwiftLint/issues/4645)\r\n\r\n* Consider custom attributes in `attributes` rule.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4599](https://github.com/realm/SwiftLint/issues/4599)\r\n\r\n* Stop triggering `strict_fileprivate` rule on symbols implementing a protocol\r\n  in the same file.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4692](https://github.com/realm/SwiftLint/issues/4692)\r\n\r\n* Fix false positives on `private_subject` rule when using\r\n  subjects inside functions.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#4643](https://github.com/realm/SwiftLint/issues/4643)\r\n\r\n* Fix for compiler directives masking subsequent `opening_brace`\r\n  violations.  \r\n  [Martin Redington](https://github.com/mildm8nnered)\r\n  [#3712](https://github.com/realm/SwiftLint/issues/3712)\r\n\r\n* Rewrite `explicit_type_interface` rule with SwiftSyntax fixing a\r\n  false-positive in if-case-let statements.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4548](https://github.com/realm/SwiftLint/issues/4548)\r\n\r\n* Ensure that negative literals in initializers do not trigger\r\n  `no_magic_numbers` rule.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4677](https://github.com/realm/SwiftLint/issues/4677)\r\n\r\n* Fix caching of `indentation_width` rule.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4121](https://github.com/realm/SwiftLint/issues/4121)\r\n\r\n* Updated JUnit reporter to output error count and warning count.  \r\n  [patricks](https://github.com/patricks)\r\n  [#4725](https://github.com/realm/SwiftLint/pull/4725)\r\n\r\n* Fix correction on `lower_acl_than_parent` rule for `open` declarations.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#4753](https://github.com/realm/SwiftLint/issues/4753)\r\n\r\n* Fix `void_return` rule to support async and async throws functions.  \r\n  [Mathias Schreck](https://github.com/lo1tuma)\r\n  [#4772](https://github.com/realm/SwiftLint/issues/4772)\r\n\r\n* Fix false positives in `attributes` rule when using property wrappers\r\n  with keypath arguments.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n---\r\n\r\n### Using Bazel\r\n\r\nPut this in your `WORKSPACE`:\r\n\r\n<details>\r\n\r\n<summary>WORKSPACE</summary>\r\n\r\n```python\r\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\r\n\r\nhttp_archive(\r\n    name = \"build_bazel_rules_apple\",\r\n    sha256 = \"43737f28a578d8d8d7ab7df2fb80225a6b23b9af9655fcdc66ae38eb2abcf2ed\",\r\n    url = \"https://github.com/bazelbuild/rules_apple/releases/download/2.0.0/rules_apple.2.0.0.tar.gz\",\r\n)\r\n\r\nload(\r\n    \"@build_bazel_rules_apple//apple:repositories.bzl\",\r\n    \"apple_rules_dependencies\",\r\n)\r\n\r\napple_rules_dependencies()\r\n\r\nload(\r\n    \"@build_bazel_rules_swift//swift:repositories.bzl\",\r\n    \"swift_rules_dependencies\",\r\n)\r\n\r\nswift_rules_dependencies()\r\n\r\nload(\r\n    \"@build_bazel_rules_swift//swift:extras.bzl\",\r\n    \"swift_rules_extra_dependencies\",\r\n)\r\n\r\nswift_rules_extra_dependencies()\r\n\r\nhttp_archive(\r\n    name = \"SwiftLint\",\r\n    sha256 = \"f44b1e1c9aac0b4febbfae8479fc4e60df099066076fb10dfc0f42fd83731170\",\r\n    url = \"https://github.com/realm/SwiftLint/releases/download/0.51.0-rc.1/bazel.tar.gz\",\r\n)\r\n\r\nload(\"@SwiftLint//bazel:repos.bzl\", \"swiftlint_repos\")\r\n\r\nswiftlint_repos()\r\n\r\nload(\"@SwiftLint//bazel:deps.bzl\", \"swiftlint_deps\")\r\n\r\nswiftlint_deps()\r\n```\r\n\r\n</details>\r\n\r\nThen you can run SwiftLint in the current directory with this command:\r\n\r\n```console\r\nbazel run @SwiftLint//:swiftlint -- --help\r\n```",
    "createdAt" : "2023-02-21T06:46:58+09:00",
    "fetchedFromAPIAt" : "2023-02-21T09:47:54+09:00",
    "id" : "RE_kwDOAiE69s4FjG9b",
    "owner" : "realm",
    "publishedAt" : "2023-02-21T06:47:33+09:00",
    "repository" : "SwiftLint",
    "title" : "0.51.0-rc.1: bzllint",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.51.0-rc.1",
    "version" : "0.51.0-rc.1"
  },
  {
    "body" : "This is a prerelease version. It won't be published to Homebrew, CocoaPods or bzlmod. But there are many other ways to install:\r\n\r\n* Downloading the attached `SwiftLint.pkg` installer and launching it\r\n* Downloading the attached `portable_swiftlint.zip` archive, extracting it and moving the binary from `portable_swiftlint/swiftlint` to `/usr/local/bin` or elsewhere in your `PATH`\r\n* Using [Mint](https://github.com/yonaskolb/Mint): `mint install realm/SwiftLint@0.51.0-rc.2`\r\n* Cloning and building from source: `git clone https://github.com/realm/SwiftLint.git && cd SwiftLint && git checkout 0.51.0-rc.2 && make install`\r\n* Docker: ```docker run -it -v `pwd`:`pwd` -w `pwd` ghcr.io/realm/swiftlint:0.51.0-rc.2```\r\n* Bazel: See instructions at the bottom\r\n\r\nChanges from 0.50.3: https://github.com/realm/SwiftLint/compare/0.50.3...0.51.0-rc.2\r\nChanges from 0.51.0-rc.1: https://github.com/realm/SwiftLint/compare/0.51.0-rc.1...0.51.0-rc.2\r\n\r\n---\r\n\r\n#### Breaking\r\n\r\n* Deprecate the `unused_capture_list` rule in favor of the Swift compiler\r\n  warning. At the same time, make it an opt-in rule.  \r\n  [Cyberbeni](https://github.com/Cyberbeni)\r\n  [#4656](https://github.com/realm/SwiftLint/issues/4656)\r\n\r\n* Deprecate the `inert_defer` rule in favor of the Swift compiler warning.\r\n  At the same time, make it an opt-in rule.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4615](https://github.com/realm/SwiftLint/issues/4615)\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* Add local links to rule descriptions to every rule listed\r\n  in `Rule Directory.md`.  \r\n  [kattouf](https://github.com/kattouf)\r\n\r\n* Make forceExclude work with directly specified files.  \r\n  [jimmya](https://github.com/jimmya)\r\n  [#issue_number](https://github.com/realm/SwiftLint/issues/4609)\r\n\r\n* Separate analyzer rules as an independent section in the rule directory of\r\n  the reference.  \r\n  [Ethan Wong](https://github.com/GetToSet)\r\n  [#4664](https://github.com/realm/SwiftLint/pull/4664)\r\n\r\n* Add rule identifier to output of Emoji reporter.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4707](https://github.com/realm/SwiftLint/issues/4707)\r\n\r\n* Interpret strings in `excluded` option of `identifier_name`, \r\n  `type_name` and `generic_type_name` rules as regex.  \r\n  [Moly](https://github.com/kyounh12)\r\n  [#4655](https://github.com/realm/SwiftLint/pull/4655)\r\n\r\n* Add new `direct_return` rule that triggers on `return` statements returning\r\n  variables that have been declared in the statement before only.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n\r\n* Add `period_spacing` opt-in rule that checks periods are not followed\r\n  by 2 or more spaces in comments.  \r\n  [Julioacarrettoni](https://github.com/Julioacarrettoni)\r\n  [#4624](https://github.com/realm/SwiftLint/pull/4624)\r\n\r\n* Allow to pass a rule identifier to the `swiftlint docs` command to open its\r\n  specific documentation website, e.g. `swiftlint docs for_where`.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4707](https://github.com/realm/SwiftLint/issues/4707)\r\n\r\n* Allow new Quick APIs `aroundEach` and `justBeforeEach` for\r\n  `quick_discouraged_call`.  \r\n  [David Steinacher](https://github.com/stonko1994)\r\n  [#4626](https://github.com/realm/SwiftLint/issues/4626)\r\n\r\n* Add `relative-path` reporter to generate reports with relative file paths.  \r\n  [Roya1v](https://github.com/roya1v)\r\n  [#4660](https://github.com/realm/SwiftLint/issues/4660)\r\n\r\n* Let `number_separator` rule trigger on misplaced separators, e.g. `10_00`.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4637](https://github.com/realm/SwiftLint/issues/4637)\r\n\r\n* Rewrite `multiline_arguments` rule using SwiftSyntax, ignoring trailing\r\n  closures.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#3399](https://github.com/realm/SwiftLint/issues/3399)\r\n  [#3605](https://github.com/realm/SwiftLint/issues/3605)\r\n\r\n* Speed up linting by up to 6% updating to use a newer version of\r\n  `SwiftSyntax`.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Catch more valid `legacy_multiple` violations.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Catch more valid `no_magic_numbers` violations.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n#### Bug Fixes\r\n\r\n* Report violations in all `<scope>_length` rules when the error threshold is\r\n  smaller than the warning threshold.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4645](https://github.com/realm/SwiftLint/issues/4645)\r\n\r\n* Consider custom attributes in `attributes` rule.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4599](https://github.com/realm/SwiftLint/issues/4599)\r\n\r\n* Stop triggering `strict_fileprivate` rule on symbols implementing a protocol\r\n  in the same file.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4692](https://github.com/realm/SwiftLint/issues/4692)\r\n\r\n* Fix false positives on `private_subject` rule when using\r\n  subjects inside functions.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#4643](https://github.com/realm/SwiftLint/issues/4643)\r\n\r\n* Fix for compiler directives masking subsequent `opening_brace`\r\n  violations.  \r\n  [Martin Redington](https://github.com/mildm8nnered)\r\n  [#3712](https://github.com/realm/SwiftLint/issues/3712)\r\n\r\n* Rewrite `explicit_type_interface` rule with SwiftSyntax fixing a\r\n  false-positive in if-case-let statements.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4548](https://github.com/realm/SwiftLint/issues/4548)\r\n\r\n* Ensure that negative literals in initializers do not trigger\r\n  `no_magic_numbers` rule.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4677](https://github.com/realm/SwiftLint/issues/4677)\r\n\r\n* Fix caching of `indentation_width` rule.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4121](https://github.com/realm/SwiftLint/issues/4121)\r\n\r\n* Updated JUnit reporter to output error count and warning count.  \r\n  [patricks](https://github.com/patricks)\r\n  [#4725](https://github.com/realm/SwiftLint/pull/4725)\r\n\r\n* Fix correction on `lower_acl_than_parent` rule for `open` declarations.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#4753](https://github.com/realm/SwiftLint/issues/4753)\r\n\r\n* Fix `void_return` rule to support async and async throws functions.  \r\n  [Mathias Schreck](https://github.com/lo1tuma)\r\n  [#4772](https://github.com/realm/SwiftLint/issues/4772)\r\n\r\n* Fix false positives in `attributes` rule when using property wrappers\r\n  with keypath arguments.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n---\r\n\r\n### Using Bazel\r\n\r\nPut this in your `WORKSPACE`:\r\n\r\n<details>\r\n\r\n<summary>WORKSPACE</summary>\r\n\r\n```python\r\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\r\n\r\nhttp_archive(\r\n    name = \"build_bazel_rules_apple\",\r\n    sha256 = \"43737f28a578d8d8d7ab7df2fb80225a6b23b9af9655fcdc66ae38eb2abcf2ed\",\r\n    url = \"https://github.com/bazelbuild/rules_apple/releases/download/2.0.0/rules_apple.2.0.0.tar.gz\",\r\n)\r\n\r\nload(\r\n    \"@build_bazel_rules_apple//apple:repositories.bzl\",\r\n    \"apple_rules_dependencies\",\r\n)\r\n\r\napple_rules_dependencies()\r\n\r\nload(\r\n    \"@build_bazel_rules_swift//swift:repositories.bzl\",\r\n    \"swift_rules_dependencies\",\r\n)\r\n\r\nswift_rules_dependencies()\r\n\r\nload(\r\n    \"@build_bazel_rules_swift//swift:extras.bzl\",\r\n    \"swift_rules_extra_dependencies\",\r\n)\r\n\r\nswift_rules_extra_dependencies()\r\n\r\nhttp_archive(\r\n    name = \"SwiftLint\",\r\n    sha256 = \"f0e37c2ca277ef8c50d865cbdb75326592bcba11b786caf1fccc3111e9925e01\",\r\n    url = \"https://github.com/realm/SwiftLint/releases/download/0.51.0-rc.2/bazel.tar.gz\",\r\n)\r\n\r\nload(\"@SwiftLint//bazel:repos.bzl\", \"swiftlint_repos\")\r\n\r\nswiftlint_repos()\r\n\r\nload(\"@SwiftLint//bazel:deps.bzl\", \"swiftlint_deps\")\r\n\r\nswiftlint_deps()\r\n```\r\n\r\n</details>\r\n\r\nThen you can run SwiftLint in the current directory with this command:\r\n\r\n```console\r\nbazel run @SwiftLint//:swiftlint -- --help\r\n```",
    "createdAt" : "2023-02-21T08:54:11+09:00",
    "fetchedFromAPIAt" : "2023-02-21T09:47:54+09:00",
    "id" : "RE_kwDOAiE69s4FjItk",
    "owner" : "realm",
    "publishedAt" : "2023-02-21T08:55:37+09:00",
    "repository" : "SwiftLint",
    "title" : "0.51.0-rc.2: bzllint",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.51.0-rc.2",
    "version" : "0.51.0-rc.2"
  },
  {
    "body" : "## 0.51.0: bzllint\r\n\r\n#### Breaking\r\n\r\n* Deprecate the `unused_capture_list` rule in favor of the Swift compiler\r\n  warning. At the same time, make it an opt-in rule.  \r\n  [Cyberbeni](https://github.com/Cyberbeni)\r\n  [#4656](https://github.com/realm/SwiftLint/issues/4656)\r\n\r\n* Deprecate the `inert_defer` rule in favor of the Swift compiler warning.\r\n  At the same time, make it an opt-in rule.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4615](https://github.com/realm/SwiftLint/issues/4615)\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* Add `duplicate_conditions` rule which warns when a condition is duplicated\r\n  in separate branches of the same branching statement (if-else, or switch).  \r\n  [1in1](https://github.com/1in1)\r\n  [#4666](https://github.com/realm/SwiftLint/issues/4666)\r\n\r\n* Add local links to rule descriptions to every rule listed\r\n  in `Rule Directory.md`.  \r\n  [kattouf](https://github.com/kattouf)\r\n\r\n* Make forceExclude work with directly specified files.  \r\n  [jimmya](https://github.com/jimmya)\r\n  [#4609](https://github.com/realm/SwiftLint/issues/4609)\r\n\r\n* Adds `all` pseudo-rule for `opt_in_rules` - enables all opt in rules\r\n  that are not listed in `disabled_rules`  \r\n  [Martin Redington](https://github.com/mildm8nnered)\r\n  [#4540](https://github.com/realm/SwiftLint/issues/4540)\r\n\r\n* Separate analyzer rules as an independent section in the rule directory of\r\n  the reference.  \r\n  [Ethan Wong](https://github.com/GetToSet)\r\n  [#4664](https://github.com/realm/SwiftLint/pull/4664)\r\n\r\n* Add rule identifier to output of Emoji reporter.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4707](https://github.com/realm/SwiftLint/issues/4707)\r\n\r\n* Interpret strings in `excluded` option of `identifier_name`, \r\n  `type_name` and `generic_type_name` rules as regex.  \r\n  [Moly](https://github.com/kyounh12)\r\n  [#4655](https://github.com/realm/SwiftLint/pull/4655)\r\n\r\n* Add new `direct_return` rule that triggers on `return` statements returning\r\n  variables that have been declared in the statement before only.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n\r\n* Add `period_spacing` opt-in rule that checks periods are not followed\r\n  by 2 or more spaces in comments.  \r\n  [Julioacarrettoni](https://github.com/Julioacarrettoni)\r\n  [#4624](https://github.com/realm/SwiftLint/pull/4624)\r\n\r\n* Allow to pass a rule identifier to the `swiftlint docs` command to open its\r\n  specific documentation website, e.g. `swiftlint docs for_where`.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4707](https://github.com/realm/SwiftLint/issues/4707)\r\n\r\n* Allow new Quick APIs `aroundEach` and `justBeforeEach` for\r\n  `quick_discouraged_call`.  \r\n  [David Steinacher](https://github.com/stonko1994)\r\n  [#4626](https://github.com/realm/SwiftLint/issues/4626)\r\n\r\n* Add `relative-path` reporter to generate reports with relative file paths.  \r\n  [Roya1v](https://github.com/roya1v)\r\n  [#4660](https://github.com/realm/SwiftLint/issues/4660)\r\n\r\n* Let `number_separator` rule trigger on misplaced separators, e.g. `10_00`.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4637](https://github.com/realm/SwiftLint/issues/4637)\r\n\r\n* Rewrite `multiline_arguments` rule using SwiftSyntax, ignoring trailing\r\n  closures.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#3399](https://github.com/realm/SwiftLint/issues/3399)\r\n  [#3605](https://github.com/realm/SwiftLint/issues/3605)\r\n\r\n* Speed up linting by up to 6% updating to use a newer version of\r\n  `SwiftSyntax`.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Catch more valid `legacy_multiple` violations.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Catch more valid `no_magic_numbers` violations.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Add `blanket_disable_command` rule that checks whether\r\n  rules are re-enabled after being disabled.  \r\n  [Martin Redington](https://github.com/mildm8nnered)\r\n  [#4731](https://github.com/realm/SwiftLint/pull/4731)\r\n\r\n* Add `invalid_swiftlint_command` rule that validates\r\n  `// swiftlint:enable` and `disable` commands.  \r\n  [Martin Redington](https://github.com/mildm8nnered)\r\n  [#4546](https://github.com/realm/SwiftLint/pull/4546)\r\n\r\n* Improve `identifier_name` documentation.  \r\n  [Martin Redington](https://github.com/mildm8nnered)\r\n  [#4767](https://github.com/realm/SwiftLint/issues/4767)\r\n\r\n* Adds `include_multiline_strings` option to `indentation_width` rule.  \r\n  [Martin Redington](https://github.com/mildm8nnered)\r\n  [#4248](https://github.com/realm/SwiftLint/issues/4248)\r\n\r\n* Adds a new `summary` reporter, that displays the number of violations\r\n  of each rule in a text table.  \r\n  [Martin Redington](https://github.com/mildm8nnered)\r\n\r\n#### Bug Fixes\r\n\r\n* Report violations in all `<scope>_length` rules when the error threshold is\r\n  smaller than the warning threshold.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4645](https://github.com/realm/SwiftLint/issues/4645)\r\n\r\n* Consider custom attributes in `attributes` rule.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4599](https://github.com/realm/SwiftLint/issues/4599)\r\n\r\n* Fix whitespaces issue in auto-fix of `redundant_optional_initialization`\r\n  rule when multiple variable declaration are involved.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4794](https://github.com/realm/SwiftLint/issues/4794)\r\n\r\n* Stop triggering `strict_fileprivate` rule on symbols implementing a protocol\r\n  in the same file.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4692](https://github.com/realm/SwiftLint/issues/4692)\r\n\r\n* Fix false positives on `private_subject` rule when using\r\n  subjects inside functions.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#4643](https://github.com/realm/SwiftLint/issues/4643)\r\n\r\n* Fix for compiler directives masking subsequent `opening_brace`\r\n  violations.  \r\n  [Martin Redington](https://github.com/mildm8nnered)\r\n  [#3712](https://github.com/realm/SwiftLint/issues/3712)\r\n\r\n* Rewrite `explicit_type_interface` rule with SwiftSyntax fixing a\r\n  false-positive in if-case-let statements.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4548](https://github.com/realm/SwiftLint/issues/4548)\r\n\r\n* Stop triggering `unused_capture_list` on captured variable that is only\r\n  referenced by a shorthand optional binding (`if let capturedVar { ... }`).  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4804](https://github.com/realm/SwiftLint/issues/4804)\r\n\r\n* Ensure that negative literals in initializers do not trigger\r\n  `no_magic_numbers` rule.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4677](https://github.com/realm/SwiftLint/issues/4677)\r\n\r\n* Fix caching of `indentation_width` rule.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4121](https://github.com/realm/SwiftLint/issues/4121)\r\n\r\n* Updated JUnit reporter to output error count and warning count.  \r\n  [patricks](https://github.com/patricks)\r\n  [#4725](https://github.com/realm/SwiftLint/pull/4725)\r\n\r\n* Fix correction on `lower_acl_than_parent` rule for `open` declarations.  \r\n  [Marcelo Fabri](https://github.com/marcelofabri)\r\n  [#4753](https://github.com/realm/SwiftLint/issues/4753)\r\n\r\n* Fix `void_return` rule to support async and async throws functions.  \r\n  [Mathias Schreck](https://github.com/lo1tuma)\r\n  [#4772](https://github.com/realm/SwiftLint/issues/4772)\r\n\r\n* Fix false positives in `attributes` rule when using property wrappers\r\n  with keypath arguments.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n* Fix for `superfluous_disable_command` not being completely disabled\r\n  by `disable` commands.  \r\n  [Martin Redington](https://github.com/mildm8nnered)\r\n  [#4788](https://github.com/realm/SwiftLint/issues/4788)\r\n\r\n* Fixed correction for `trailing_comma` rule wrongly removing trailing\r\n  comments.  \r\n  [Martin Redington](https://github.com/mildm8nnered)\r\n  [#4814](https://github.com/realm/SwiftLint/issues/4814)\r\n\r\n---\r\n\r\n### Using Bazel\r\n\r\nWith bzlmod:\r\n\r\n```\r\nTODO...\r\n```\r\n\r\nWithout bzlmod, put this in your `WORKSPACE`:\r\n\r\n<details>\r\n\r\n<summary>WORKSPACE</summary>\r\n\r\n```python\r\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\r\n\r\nhttp_archive(\r\n    name = \"build_bazel_rules_apple\",\r\n    sha256 = \"9e26307516c4d5f2ad4aee90ac01eb8cd31f9b8d6ea93619fc64b3cbc81b0944\",\r\n    url = \"https://github.com/bazelbuild/rules_apple/releases/download/2.2.0/rules_apple.2.2.0.tar.gz\",\r\n)\r\n\r\nload(\r\n    \"@build_bazel_rules_apple//apple:repositories.bzl\",\r\n    \"apple_rules_dependencies\",\r\n)\r\n\r\napple_rules_dependencies()\r\n\r\nload(\r\n    \"@build_bazel_rules_swift//swift:repositories.bzl\",\r\n    \"swift_rules_dependencies\",\r\n)\r\n\r\nswift_rules_dependencies()\r\n\r\nload(\r\n    \"@build_bazel_rules_swift//swift:extras.bzl\",\r\n    \"swift_rules_extra_dependencies\",\r\n)\r\n\r\nswift_rules_extra_dependencies()\r\n\r\nhttp_archive(\r\n    name = \"SwiftLint\",\r\n    sha256 = \"8369ca218c4c898b7af202e2ec6180062396f659debca49a1d6c66902a3a37c3\",\r\n    url = \"https://github.com/realm/SwiftLint/releases/download/0.51.0/bazel.tar.gz\",\r\n)\r\n\r\nload(\"@SwiftLint//bazel:repos.bzl\", \"swiftlint_repos\")\r\n\r\nswiftlint_repos()\r\n\r\nload(\"@SwiftLint//bazel:deps.bzl\", \"swiftlint_deps\")\r\n\r\nswiftlint_deps()\r\n```\r\n\r\n</details>\r\n\r\nThen you can run SwiftLint in the current directory with this command:\r\n\r\n```console\r\nbazel run @SwiftLint//:swiftlint -- --help\r\n```",
    "createdAt" : "2023-03-28T00:44:47+09:00",
    "fetchedFromAPIAt" : "2023-03-28T09:43:31+09:00",
    "id" : "RE_kwDOAiE69s4FyM6L",
    "owner" : "realm",
    "publishedAt" : "2023-03-28T00:45:44+09:00",
    "repository" : "SwiftLint",
    "title" : "0.51.0: bzllint",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.51.0",
    "version" : "0.51.0"
  },
  {
    "body" : "#### Breaking\r\n\r\n* The `attributes` rule now expects attributes with arguments to be placed\r\n  on their own line above the declaration they are supposed to influence.\r\n  This applies to attributes with any kinds of arguments including single\r\n  key path arguments which were previously handled in a different way. This\r\n  behavior can be turned off by setting `attributes_with_arguments_always_on_line_above`\r\n  to `false.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4843](https://github.com/realm/SwiftLint/issues/4843)\r\n\r\n* The internal module structure for SwiftLint has changed to split the\r\n  monolithic `SwiftLintFramework` into new `SwiftLintCore` for core linter\r\n  infrastructure, `SwiftLintBuiltInRules` for built-in rules and\r\n  `SwiftLintExtraRules` to add your own native rules to SwiftLint.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* Add new `superfluous_else` rule that triggers on `if`-statements when an\r\n  attached `else`-block can be removed, because all branches of the previous\r\n  `if`-block(s) would certainly exit the current scope already.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n\r\n* Add `sorted_enum_cases` rule which warns when enum cases are not sorted.  \r\n  [kimdv](https://github.com/kimdv)\r\n\r\n* Add new `redundant_self_in_closure` rule that triggers in closures on\r\n  explicitly used `self` when it's actually not needed due to:\r\n  * Strongly captured `self` (`{ [self] in ... }`)\r\n  * Closure used in a struct declaration (`self` can always be omitted)\r\n  * Anonymous closures that are directly called (`{ ... }()`) as they are\r\n    definitly not escaping\r\n  * Weakly captured `self` with explicit unwrapping\r\n\r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#59](https://github.com/realm/SwiftLint/issues/59)\r\n\r\n* Extend `xct_specific_matcher` rule to check for boolean asserts on (un)equal\r\n  comparisons. The rule can be configured with the matchers that should trigger\r\n  rule violations. By default, all matchers trigger, but that can be limited to\r\n  just `one-argument-asserts` or `two-argument-asserts`.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3726](https://github.com/realm/SwiftLint/issues/3726)\r\n\r\n* Trigger `prefer_self_in_static_references` rule on more type references.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n\r\n* Adds a new `reporters` command, to improve discoverability of reporters.  \r\n  [Martin Redington](https://github.com/mildm8nnered)\r\n  [#4819](https://github.com/realm/SwiftLint/issues/4819)\r\n\r\n* Adds `test_parent_classes` option to the `no_magic_numbers` rule.\r\n  Violations within test classes will now be ignored by default.  \r\n  [Martin Redington](https://github.com/mildm8nnered)\r\n  [#4896](https://github.com/realm/SwiftLint/issues/4896)\r\n\r\n* Stop enforcing calls to super from the override functions `setUp()`,\r\n  `tearDown()`, `setUpWithError()`, and `tearDownWithError()` in `XCTestCase`\r\n  subclasses.  \r\n  [AndrewDMontgomery](https://github.com/andrewdmontgomery)\r\n  [#4875](https://github.com/realm/SwiftLint/pull/4875)\r\n  \r\n* Prepend `warning: ` to error messages so that they show in Xcode.  \r\n  [whiteio](https://github.com/whiteio)\r\n  [#4923](https://github.com/realm/SwiftLint/issues/4923)\r\n\r\n* The `attributes` rule received a new boolean option\r\n  `attributes_with_arguments_always_on_line_above` which is `true` by default.\r\n  Setting it to `false` ensures that attributes with arguments like\r\n  `@Persisted(primaryKey: true)` don't violate the rule if they are on the same\r\n  line with the variable declaration.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4843](https://github.com/realm/SwiftLint/issues/4843)\r\n\r\n* Add new `unhandled_throwing_task` rule that triggers when a Task with an\r\n  implicit error type has unhandled trys or errors thrown inside its body.\r\n  This results in errors being silently discarded, which may be unexpected.\r\n  See this forum thread for more details: https://forums.swift.org/t/56066  \r\n  [kylebshr](https://github.com/kylebshr)\r\n\r\n#### Bug Fixes\r\n\r\n* Fix `lower_acl_than_parent` rule rewriter by preserving leading whitespace.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4860](https://github.com/realm/SwiftLint/issues/4860)\r\n\r\n* Ignore block comments in `let_var_whitespace` rule.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4871](https://github.com/realm/SwiftLint/issues/4871)\r\n\r\n* Fix false positives in `indentation_width` rule.  \r\n  [Sven M√ºnnich](https://github.com/svenmuennich)\r\n\r\n* Do not trigger `reduce_boolean` on `reduce` methods with a first named\r\n  argument that is different from `into`.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4894](https://github.com/realm/SwiftLint/issues/4894)\r\n\r\n* Work around dyld warning about duplicate SwiftSyntax classes.  \r\n  [keith](https://github.com/keith)\r\n  [#4782](https://github.com/realm/SwiftLint/issues/4782)\r\n\r\n* Improve lint times of SwiftLintPlugin by moving the\r\n  `excludedPaths(fileManager:)` operation out of the linting iterations.  \r\n  [andyyhope](https://github.com/andyyhope)\r\n  [#4844](https://github.com/realm/SwiftLint/issues/4844)\r\n\r\n---\r\n\r\n### Using Bazel\r\n\r\nWith bzlmod:\r\n\r\n```\r\n// Pending BCR update: https://github.com/bazelbuild/bazel-central-registry/pull/624\r\nbazel_dep(name = \"swiftlint\", version = \"0.52.0\", repo_name = \"SwiftLint\")\r\n```\r\n\r\nWithout bzlmod, put this in your `WORKSPACE`:\r\n\r\n<details>\r\n\r\n<summary>WORKSPACE</summary>\r\n\r\n```python\r\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\r\n\r\nhttp_archive(\r\n    name = \"build_bazel_rules_apple\",\r\n    sha256 = \"9e26307516c4d5f2ad4aee90ac01eb8cd31f9b8d6ea93619fc64b3cbc81b0944\",\r\n    url = \"https://github.com/bazelbuild/rules_apple/releases/download/2.2.0/rules_apple.2.2.0.tar.gz\",\r\n)\r\n\r\nload(\r\n    \"@build_bazel_rules_apple//apple:repositories.bzl\",\r\n    \"apple_rules_dependencies\",\r\n)\r\n\r\napple_rules_dependencies()\r\n\r\nload(\r\n    \"@build_bazel_rules_swift//swift:repositories.bzl\",\r\n    \"swift_rules_dependencies\",\r\n)\r\n\r\nswift_rules_dependencies()\r\n\r\nload(\r\n    \"@build_bazel_rules_swift//swift:extras.bzl\",\r\n    \"swift_rules_extra_dependencies\",\r\n)\r\n\r\nswift_rules_extra_dependencies()\r\n\r\nhttp_archive(\r\n    name = \"SwiftLint\",\r\n    sha256 = \"c5021aff12fd0e0cbf17c232d8f0e28a27ccf886d5a871681cb78f7b30a20faa\",\r\n    url = \"https://github.com/realm/SwiftLint/releases/download/0.52.0/bazel.tar.gz\",\r\n)\r\n\r\nload(\"@SwiftLint//bazel:repos.bzl\", \"swiftlint_repos\")\r\n\r\nswiftlint_repos()\r\n\r\nload(\"@SwiftLint//bazel:deps.bzl\", \"swiftlint_deps\")\r\n\r\nswiftlint_deps()\r\n```\r\n\r\n</details>\r\n\r\nThen you can run SwiftLint in the current directory with this command:\r\n\r\n```console\r\nbazel run @SwiftLint//:swiftlint -- --help\r\n```",
    "createdAt" : "2023-05-11T04:15:09+09:00",
    "fetchedFromAPIAt" : "2023-05-11T09:43:39+09:00",
    "id" : "RE_kwDOAiE69s4GHISB",
    "owner" : "realm",
    "publishedAt" : "2023-05-11T04:16:09+09:00",
    "repository" : "SwiftLint",
    "title" : "0.52.0: Crisp Clear Pleats",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.52.0",
    "version" : "0.52.0"
  },
  {
    "body" : "## 0.52.1: Crisp Clear Pleats\r\n\r\n#### Bug Fixes\r\n\r\n* Let the `validates_start_with_lowercase` option in name configurations\r\n  expect a severity (warning or error). Not setting it disables the check.\r\n  Boolean values are now deprecated. A `true` value enables the check as an\r\n  error for the time being to keep the previous behavior.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#2180](https://github.com/realm/SwiftLint/issues/2180)\r\n\r\n* Fixed a false positive in `unhandled_throwing_task`.  \r\n  [kylebshr](https://github.com/kylebshr)\r\n  [#4984](https://github.com/realm/SwiftLint/issues/4984)\r\n\r\n* Fix Bazel release tarball for compiling on macOS.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#4985](https://github.com/realm/SwiftLint/issues/4985)\r\n\r\n## 0.52.0: Crisp Clear Pleats\r\n\r\n#### Breaking\r\n\r\n* The `attributes` rule now expects attributes with arguments to be placed\r\n  on their own line above the declaration they are supposed to influence.\r\n  This applies to attributes with any kinds of arguments including single\r\n  key path arguments which were previously handled in a different way. This\r\n  behavior can be turned off by setting `attributes_with_arguments_always_on_line_above`\r\n  to `false.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4843](https://github.com/realm/SwiftLint/issues/4843)\r\n\r\n* The internal module structure for SwiftLint has changed to split the\r\n  monolithic `SwiftLintFramework` into new `SwiftLintCore` for core linter\r\n  infrastructure, `SwiftLintBuiltInRules` for built-in rules and\r\n  `SwiftLintExtraRules` to add your own native rules to SwiftLint.  \r\n  [JP Simard](https://github.com/jpsim)\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* Add new `superfluous_else` rule that triggers on `if`-statements when an\r\n  attached `else`-block can be removed, because all branches of the previous\r\n  `if`-block(s) would certainly exit the current scope already.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n\r\n* Add `sorted_enum_cases` rule which warns when enum cases are not sorted.  \r\n  [kimdv](https://github.com/kimdv)\r\n\r\n* Add new `redundant_self_in_closure` rule that triggers in closures on\r\n  explicitly used `self` when it's actually not needed due to:\r\n  * Strongly captured `self` (`{ [self] in ... }`)\r\n  * Closure used in a struct declaration (`self` can always be omitted)\r\n  * Anonymous closures that are directly called (`{ ... }()`) as they are\r\n    definitly not escaping\r\n  * Weakly captured `self` with explicit unwrapping\r\n\r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#59](https://github.com/realm/SwiftLint/issues/59)\r\n\r\n* Extend `xct_specific_matcher` rule to check for boolean asserts on (un)equal\r\n  comparisons. The rule can be configured with the matchers that should trigger\r\n  rule violations. By default, all matchers trigger, but that can be limited to\r\n  just `one-argument-asserts` or `two-argument-asserts`.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [JP Simard](https://github.com/jpsim)\r\n  [#3726](https://github.com/realm/SwiftLint/issues/3726)\r\n\r\n* Trigger `prefer_self_in_static_references` rule on more type references.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n\r\n* Adds a new `reporters` command, to improve discoverability of reporters.  \r\n  [Martin Redington](https://github.com/mildm8nnered)\r\n  [#4819](https://github.com/realm/SwiftLint/issues/4819)\r\n\r\n* Adds `test_parent_classes` option to the `no_magic_numbers` rule.\r\n  Violations within test classes will now be ignored by default.  \r\n  [Martin Redington](https://github.com/mildm8nnered)\r\n  [#4896](https://github.com/realm/SwiftLint/issues/4896)\r\n\r\n* Stop enforcing calls to super from the override functions `setUp()`,\r\n  `tearDown()`, `setUpWithError()`, and `tearDownWithError()` in `XCTestCase`\r\n  subclasses.  \r\n  [AndrewDMontgomery](https://github.com/andrewdmontgomery)\r\n  [#4875](https://github.com/realm/SwiftLint/pull/4875)\r\n  \r\n* Prepend `warning: ` to error messages so that they show in Xcode.  \r\n  [whiteio](https://github.com/whiteio)\r\n  [#4923](https://github.com/realm/SwiftLint/issues/4923)\r\n\r\n* The `attributes` rule received a new boolean option\r\n  `attributes_with_arguments_always_on_line_above` which is `true` by default.\r\n  Setting it to `false` ensures that attributes with arguments like\r\n  `@Persisted(primaryKey: true)` don't violate the rule if they are on the same\r\n  line with the variable declaration.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4843](https://github.com/realm/SwiftLint/issues/4843)\r\n\r\n* Add new `unhandled_throwing_task` rule that triggers when a Task with an\r\n  implicit error type has unhandled trys or errors thrown inside its body.\r\n  This results in errors being silently discarded, which may be unexpected.\r\n  See this forum thread for more details: https://forums.swift.org/t/56066  \r\n  [kylebshr](https://github.com/kylebshr)\r\n\r\n#### Bug Fixes\r\n\r\n* Fix `lower_acl_than_parent` rule rewriter by preserving leading whitespace.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4860](https://github.com/realm/SwiftLint/issues/4860)\r\n\r\n* Ignore block comments in `let_var_whitespace` rule.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4871](https://github.com/realm/SwiftLint/issues/4871)\r\n\r\n* Fix false positives in `indentation_width` rule.  \r\n  [Sven M√ºnnich](https://github.com/svenmuennich)\r\n\r\n* Do not trigger `reduce_boolean` on `reduce` methods with a first named\r\n  argument that is different from `into`.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4894](https://github.com/realm/SwiftLint/issues/4894)\r\n\r\n* Work around dyld warning about duplicate SwiftSyntax classes.  \r\n  [keith](https://github.com/keith)\r\n  [#4782](https://github.com/realm/SwiftLint/issues/4782)\r\n\r\n* Improve lint times of SwiftLintPlugin by moving the\r\n  `excludedPaths(fileManager:)` operation out of the linting iterations.  \r\n  [andyyhope](https://github.com/andyyhope)\r\n  [#4844](https://github.com/realm/SwiftLint/issues/4844)\r\n\r\n---\r\n\r\n### Using Bazel\r\n\r\nWith bzlmod:\r\n\r\n```\r\nbazel_dep(name = \"swiftlint\", version = \"0.52.1\", repo_name = \"SwiftLint\")\r\n```\r\n\r\nWithout bzlmod, put this in your `WORKSPACE`:\r\n\r\n<details>\r\n\r\n<summary>WORKSPACE</summary>\r\n\r\n```python\r\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\r\n\r\nhttp_archive(\r\n    name = \"build_bazel_rules_apple\",\r\n    sha256 = \"9e26307516c4d5f2ad4aee90ac01eb8cd31f9b8d6ea93619fc64b3cbc81b0944\",\r\n    url = \"https://github.com/bazelbuild/rules_apple/releases/download/2.2.0/rules_apple.2.2.0.tar.gz\",\r\n)\r\n\r\nload(\r\n    \"@build_bazel_rules_apple//apple:repositories.bzl\",\r\n    \"apple_rules_dependencies\",\r\n)\r\n\r\napple_rules_dependencies()\r\n\r\nload(\r\n    \"@build_bazel_rules_swift//swift:repositories.bzl\",\r\n    \"swift_rules_dependencies\",\r\n)\r\n\r\nswift_rules_dependencies()\r\n\r\nload(\r\n    \"@build_bazel_rules_swift//swift:extras.bzl\",\r\n    \"swift_rules_extra_dependencies\",\r\n)\r\n\r\nswift_rules_extra_dependencies()\r\n\r\nhttp_archive(\r\n    name = \"SwiftLint\",\r\n    sha256 = \"22973f004310a1e5611ae6d08077e907be4883929d10c049cc0b9846463b3d9a\",\r\n    url = \"https://github.com/realm/SwiftLint/releases/download/0.52.1/bazel.tar.gz\",\r\n)\r\n\r\nload(\"@SwiftLint//bazel:repos.bzl\", \"swiftlint_repos\")\r\n\r\nswiftlint_repos()\r\n\r\nload(\"@SwiftLint//bazel:deps.bzl\", \"swiftlint_deps\")\r\n\r\nswiftlint_deps()\r\n```\r\n\r\n</details>\r\n\r\nThen you can run SwiftLint in the current directory with this command:\r\n\r\n```console\r\nbazel run @SwiftLint//:swiftlint -- --help\r\n```",
    "createdAt" : "2023-05-12T00:13:58+09:00",
    "fetchedFromAPIAt" : "2023-05-13T09:39:04+09:00",
    "id" : "RE_kwDOAiE69s4GHnMT",
    "owner" : "realm",
    "publishedAt" : "2023-05-12T00:15:22+09:00",
    "repository" : "SwiftLint",
    "title" : "0.52.1: Crisp Clear Pleats",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.52.1",
    "version" : "0.52.1"
  },
  {
    "body" : "#### Breaking\r\n\r\n* None.\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* Exclude simple assignments of the form `self.x = x` from being reported by\r\n  the `redundant_self_in_closure` rule.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#4988](https://github.com/realm/SwiftLint/issues/4988)\r\n\r\n#### Bug Fixes\r\n\r\n* Make `unhandled_throwing_task` opt-in instead of enabled by default. The rule\r\n  is still prone to false positives at this point, so this makes enabling the\r\n  rule a conscious decision by end-users.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#4987](https://github.com/realm/SwiftLint/issues/4987)\r\n\r\n* Fix `unhandled_throwing_task` false positives when the `Task` is returned or\r\n  where the throwing code is handled in a `Result` initializer.  \r\n  [JP Simard](https://github.com/jpsim)\r\n  [#4987](https://github.com/realm/SwiftLint/issues/4987)\r\n\r\n---\r\n\r\n### Using Bazel\r\n\r\nWith bzlmod:\r\n\r\n```\r\nbazel_dep(name = \"swiftlint\", version = \"0.52.2\", repo_name = \"SwiftLint\")\r\n```\r\n\r\nWithout bzlmod, put this in your `WORKSPACE`:\r\n\r\n<details>\r\n\r\n<summary>WORKSPACE</summary>\r\n\r\n```python\r\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\r\n\r\nhttp_archive(\r\n    name = \"build_bazel_rules_apple\",\r\n    sha256 = \"9e26307516c4d5f2ad4aee90ac01eb8cd31f9b8d6ea93619fc64b3cbc81b0944\",\r\n    url = \"https://github.com/bazelbuild/rules_apple/releases/download/2.2.0/rules_apple.2.2.0.tar.gz\",\r\n)\r\n\r\nload(\r\n    \"@build_bazel_rules_apple//apple:repositories.bzl\",\r\n    \"apple_rules_dependencies\",\r\n)\r\n\r\napple_rules_dependencies()\r\n\r\nload(\r\n    \"@build_bazel_rules_swift//swift:repositories.bzl\",\r\n    \"swift_rules_dependencies\",\r\n)\r\n\r\nswift_rules_dependencies()\r\n\r\nload(\r\n    \"@build_bazel_rules_swift//swift:extras.bzl\",\r\n    \"swift_rules_extra_dependencies\",\r\n)\r\n\r\nswift_rules_extra_dependencies()\r\n\r\nhttp_archive(\r\n    name = \"SwiftLint\",\r\n    sha256 = \"2b95a592304bc377aa29d92683618376975f93553be62f132de7424819f6fc4a\",\r\n    url = \"https://github.com/realm/SwiftLint/releases/download/0.52.2/bazel.tar.gz\",\r\n)\r\n\r\nload(\"@SwiftLint//bazel:repos.bzl\", \"swiftlint_repos\")\r\n\r\nswiftlint_repos()\r\n\r\nload(\"@SwiftLint//bazel:deps.bzl\", \"swiftlint_deps\")\r\n\r\nswiftlint_deps()\r\n```\r\n\r\n</details>\r\n\r\nThen you can run SwiftLint in the current directory with this command:\r\n\r\n```console\r\nbazel run @SwiftLint//:swiftlint -- --help\r\n```\r\n",
    "createdAt" : "2023-05-13T00:02:03+09:00",
    "fetchedFromAPIAt" : "2023-05-13T09:39:04+09:00",
    "id" : "RE_kwDOAiE69s4GIKHm",
    "owner" : "realm",
    "publishedAt" : "2023-05-13T00:02:07+09:00",
    "repository" : "SwiftLint",
    "title" : "0.52.2: Crisper Clearer Pleats",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.52.2",
    "version" : "0.52.2"
  },
  {
    "body" : "#### Breaking\n\n* None.\n\n#### Experimental\n\n* None.\n\n#### Enhancements\n\n* Make severity for unallowed symbols configurable. The option name is\n  `unallowed_symbols_severity`. It accepts the two values `warning` and `error`\n  (default) as usual.  \n  [SimplyDanny](https://github.com/SimplyDanny)\n\n* Mention a rule's identifier in the console message that is printed when the\n  rule's associated configuration entry contains invalid values.  \n  [SimplyDanny](https://github.com/SimplyDanny)\n\n* Silence `xct_specific_matcher` rule on \"one argument asserts\" if there are\n  potential types or tuples involved in the comparison as types and tuples do\n  not conform to `Equatable`.  \n  [SimplyDanny](https://github.com/SimplyDanny)\n  [#4990](https://github.com/realm/SwiftLint/issues/4990)\n\n* Add `grouping` option to the `sorted_imports` rule allowing\n  to sort groups of imports defined by their preceding attributes\n  (e.g. `@testable`, `@_exported`, ...).  \n  [hiltonc](https://github.com/hiltonc)\n\n* Add new `--silence-deprecation-warnings` flag that silences deprecation\n  warnings that would otherwise be printed to the console.  \n  [SimplyDanny](https://github.com/SimplyDanny)\n  [#4989](https://github.com/realm/SwiftLint/issues/4989)\n\n* Do not trigger `redundant_self_in_closure` rule when another idenfier `x` in\n  scope shadows the field accessed by `self.x` to avoid semantical changes.  \n  [SimplyDanny](https://github.com/SimplyDanny)\n  [#5010](https://github.com/realm/SwiftLint/issues/5010)\n\n* Rewrite `todo` rule with SwiftSyntax.  \n  [woxtu](https://github.com/woxtu)\n\n* Adds an `unneeded_synthesized_initializer` rule, based on\n  `swift-format`'s `UseSynthesizedInitializer` rule, which warns\n  when a defined default or memberwise initializer would have been\n  automatically synthesized.  \n  [Martin Redington](https://github.com/mildm8nnered)\n\n#### Bug Fixes\n\n* The option `validates_start_with_lowercase` can now be disabled by setting it\n  to `off`.  \n  [SimplyDanny](https://github.com/SimplyDanny)\n  [#5036](https://github.com/realm/SwiftLint/issues/5036)\n\n* Do not trigger `prefer_self_in_static_references` rule on `typealias`\n  declarations in classes.  \n  [SimplyDanny](https://github.com/SimplyDanny)\n  [#5009](https://github.com/realm/SwiftLint/issues/5009)\n\n* Do not trigger `prefer_self_in_static_references` rule on collection types in\n  classes, but on initializers like `[C]()` in all types.  \n  [SimplyDanny](https://github.com/SimplyDanny)\n  [#5042](https://github.com/realm/SwiftLint/issues/5042)\n\n* Fix false positives on `redundant_objc_attribute` rule for enums\n  and private members.  \n  [Martin Redington](https://github.com/mildm8nnered)\n  [#4633](https://github.com/realm/SwiftLint/issues/4633)\n\n* Fix autocorrect for `CGIntersectionRect` in `legacy_cggeometry_functions`\n  rule.  \n  [Haoocen](https://github.com/Haoocen)\n  [#5023](https://github.com/realm/SwiftLint/pull/5023)\n\n* Fix false positives on `sorted_first_last` rule when `first`/`last` have\n  a predicate.  \n  [woxtu](https://github.com/woxtu)\n  [#3023](https://github.com/realm/SwiftLint/issues/3023)\n\n* Work around dyld warning about duplicate SwiftSyntax classes with Xcode 15\n  betas.  \n  [keith](https://github.com/keith)\n  [JP Simard](https://github.com/jpsim)\n  [#4782](https://github.com/realm/SwiftLint/issues/4782)\n\n---\n\n### Using Bazel\n\nWith bzlmod:\n\n```\n// Pending BCR update\nbazel_dep(name = \"swiftlint\", version = \"0.52.3\", repo_name = \"SwiftLint\")\n```\n\nWithout bzlmod, put this in your `WORKSPACE`:\n\n<details>\n\n<summary>WORKSPACE</summary>\n\n```python\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\n\nhttp_archive(\n    name = \"build_bazel_rules_apple\",\n    sha256 = \"9e26307516c4d5f2ad4aee90ac01eb8cd31f9b8d6ea93619fc64b3cbc81b0944\",\n    url = \"https://github.com/bazelbuild/rules_apple/releases/download/2.2.0/rules_apple.2.2.0.tar.gz\",\n)\n\nload(\n    \"@build_bazel_rules_apple//apple:repositories.bzl\",\n    \"apple_rules_dependencies\",\n)\n\napple_rules_dependencies()\n\nload(\n    \"@build_bazel_rules_swift//swift:repositories.bzl\",\n    \"swift_rules_dependencies\",\n)\n\nswift_rules_dependencies()\n\nload(\n    \"@build_bazel_rules_swift//swift:extras.bzl\",\n    \"swift_rules_extra_dependencies\",\n)\n\nswift_rules_extra_dependencies()\n\nhttp_archive(\n    name = \"SwiftLint\",\n    sha256 = \"20c09504184d2496a4b40bc6f77a03d443fe4ba79b4bbbab61382bc5241d24aa\",\n    url = \"https://github.com/realm/SwiftLint/releases/download/0.52.3/bazel.tar.gz\",\n)\n\nload(\"@SwiftLint//bazel:repos.bzl\", \"swiftlint_repos\")\n\nswiftlint_repos()\n\nload(\"@SwiftLint//bazel:deps.bzl\", \"swiftlint_deps\")\n\nswiftlint_deps()\n```\n\n</details>\n\nThen you can run SwiftLint in the current directory with this command:\n\n```console\nbazel run @SwiftLint//:swiftlint -- --help\n```\n",
    "createdAt" : "2023-06-23T00:00:07+09:00",
    "fetchedFromAPIAt" : "2023-06-23T09:53:17+09:00",
    "id" : "RE_kwDOAiE69s4Gh9JX",
    "owner" : "realm",
    "publishedAt" : "2023-06-23T00:00:12+09:00",
    "repository" : "SwiftLint",
    "title" : "0.52.3: Duplicate Hampers",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.52.3",
    "version" : "0.52.3"
  },
  {
    "body" : "#### Breaking\r\n\r\n* None.\r\n\r\n#### Experimental\r\n\r\n* None.\r\n\r\n#### Enhancements\r\n\r\n* Handle static `spec` methods in `quick_discouraged_call` rule. The method\r\n  type changed from an instance method to a class method in Quick 7.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#5072](https://github.com/realm/SwiftLint/issues/5072)\r\n\r\n* Prettify the rule configuration presentation on the command line as well as\r\n  on the website.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n\r\n#### Bug Fixes\r\n\r\n* Fix false positives for the `unneeded_synthesized_initializer` rule, when\r\n  no argument initializers had side-effects.  \r\n  [Martin Redington](https://github.com/mildm8nnered)\r\n  [#5075](https://github.com/realm/SwiftLint/issues/5075)\r\n\r\n* Ignore `switch` expressions assigned to variables in `switch_case_alignment`\r\n  rule.  \r\n  [SimplyDanny](https://github.com/SimplyDanny)\r\n  [#5080](https://github.com/realm/SwiftLint/issues/5080)\r\n\r\n* Fix auto-correction for the `direct_return` rule, when statements have\r\n  trailing comments.  \r\n  [Martin Redington](https://github.com/mildm8nnered)\r\n  [#5081](https://github.com/realm/SwiftLint/issues/5081)\r\n\r\n* Fix false positives for the `private_subject` rule when creating subjects\r\n  inside initializers.  \r\n  [kasrababaei](https://github.com/kasrababaei)\r\n\r\n* Fix false positive for `prefer_self_in_static_references` when a class\r\n  inherits from another class with generic types.  \r\n  [kasrababaei](https://github.com/kasrababaei)\r\n\r\n---\r\n\r\n### Using Bazel\r\n\r\nWith bzlmod:\r\n\r\n```\r\n// Pending BCR update: https://github.com/bazelbuild/bazel-central-registry/pull/750\r\nbazel_dep(name = \"swiftlint\", version = \"0.52.4\", repo_name = \"SwiftLint\")\r\n```\r\n\r\nWithout bzlmod, put this in your `WORKSPACE`:\r\n\r\n<details>\r\n\r\n<summary>WORKSPACE</summary>\r\n\r\n```python\r\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\r\n\r\nhttp_archive(\r\n    name = \"build_bazel_rules_apple\",\r\n    sha256 = \"9e26307516c4d5f2ad4aee90ac01eb8cd31f9b8d6ea93619fc64b3cbc81b0944\",\r\n    url = \"https://github.com/bazelbuild/rules_apple/releases/download/2.2.0/rules_apple.2.2.0.tar.gz\",\r\n)\r\n\r\nload(\r\n    \"@build_bazel_rules_apple//apple:repositories.bzl\",\r\n    \"apple_rules_dependencies\",\r\n)\r\n\r\napple_rules_dependencies()\r\n\r\nload(\r\n    \"@build_bazel_rules_swift//swift:repositories.bzl\",\r\n    \"swift_rules_dependencies\",\r\n)\r\n\r\nswift_rules_dependencies()\r\n\r\nload(\r\n    \"@build_bazel_rules_swift//swift:extras.bzl\",\r\n    \"swift_rules_extra_dependencies\",\r\n)\r\n\r\nswift_rules_extra_dependencies()\r\n\r\nhttp_archive(\r\n    name = \"SwiftLint\",\r\n    sha256 = \"c6ea58b9c72082cdc1ada4a2d48273ecc355896ed72204cedcc586b6ccb8aca6\",\r\n    url = \"https://github.com/realm/SwiftLint/releases/download/0.52.4/bazel.tar.gz\",\r\n)\r\n\r\nload(\"@SwiftLint//bazel:repos.bzl\", \"swiftlint_repos\")\r\n\r\nswiftlint_repos()\r\n\r\nload(\"@SwiftLint//bazel:deps.bzl\", \"swiftlint_deps\")\r\n\r\nswiftlint_deps()\r\n```\r\n\r\n</details>\r\n\r\nThen you can run SwiftLint in the current directory with this command:\r\n\r\n```console\r\nbazel run @SwiftLint//:swiftlint -- --help\r\n```\r\n",
    "createdAt" : "2023-07-07T03:43:54+09:00",
    "fetchedFromAPIAt" : "2023-09-06T01:58:35+09:00",
    "id" : "RE_kwDOAiE69s4GonKW",
    "owner" : "realm",
    "publishedAt" : "2023-07-07T03:43:58+09:00",
    "repository" : "SwiftLint",
    "title" : "0.52.4: Lid Switch",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.52.4",
    "version" : "0.52.4"
  },
  {
    "body" : "#### Breaking\n\n* Hide all `Reporter`s from SwiftLint's' public interface.  \n  [SimplyDanny](https://github.com/SimplyDanny)\n\n* The options `inlcuded`, `name` and `message` are from now on ignored in the\n  configuration for the `private_unit_test` rule. The option `regex` is still\n  supported but is deprecated. It's recommended to use the list\n  `test_parent_classes` instead which accepts names of parent test classes.  \n  [SimplyDanny](https://github.com/SimplyDanny)\n\n* Remove support for disable and enable commands in multiline comments.  \n  [Martin Redington](https://github.com/mildm8nnered)\n  [#4798](https://github.com/realm/SwiftLint/issues/4798)\n\n#### Experimental\n\n* None.\n\n#### Enhancements\n\n* Show specific violation message for the `attributes` rule when the option\n  `always_on_line_above` or `attributes_with_arguments_always_on_line_above`\n  is involved.  \n  [chrisngabp](https://github.com/chrisngabp)\n  [5103](https://github.com/realm/SwiftLint/issues/5103)\n\n* Rewrite `control_statement` rule using SwiftSyntax.  \n  [SimplyDanny](https://github.com/SimplyDanny)\n\n* Add new `non_overridable_class_declaration` rule that triggers on `class`\n  function and variable declarations in final classes that are not final\n  themselves or private.  \n  [SimplyDanny](https://github.com/SimplyDanny)\n\n* The Homebrew formula for SwiftLint now also installs completion scripts for\n  Bash, Zsh and fish.  \n  [SimplyDanny](https://github.com/SimplyDanny)\n\n* Add new `private_swiftui_state_property` opt-in rule to encourage setting\n  SwiftUI `@State` and `@StateObject` properties to private.  \n  [mt00chikin](https://github.com/mt00chikin)\n  [#3173](https://github.com/realm/SwiftLint/issues/3173)\n\n* The `implicit_return` rule now supports the kinds `subscript` and\n  `initializer` in the `included` configuration list.  \n  [SimplyDanny](https://github.com/SimplyDanny)\n\n* Add `unneeded_override` rule to remove function overrides that only\n  call super.  \n  [keith](https://github.com/keith)\n  [5139](https://github.com/realm/SwiftLint/pull/5139)\n\n* Show a rule's active YAML configuration in output of\n  `swiftlint rules <rule>`.  \n  [SimplyDanny](https://github.com/SimplyDanny)\n\n* Add `invokeTest()` to `overridden_super_call` defaults.  \n  [DylanBettermannDD](https://github.com/DylanBettermannDD)\n\n* Add `--config-only` option to `rules` command allowing to print only the YAML\n  configuration of a single or all rules.  \n  [SimplyDanny](https://github.com/SimplyDanny)\n\n* Add `--default-config` option to `rules` command allowing to use default\n  values for configurations being printed for a single rule or all rules.  \n  [SimplyDanny](https://github.com/SimplyDanny)\n\n* Add `include_bare_init` option to the `explicit_init` rule. `include_bare_init`\n  encourages using named constructors over `.init()` and type inference.  \n  [Martin Redington](https://github.com/mildm8nnered)\n  [#5203](https://github.com/realm/SwiftLint/issues/5203)\n\n* Improved the reported location and reasons provided for issues\n  detected by the `invalid_seiftlint_command` rule.  \n  [Martin Redington](https://github.com/mildm8nnered)\n  [#5204](https://github.com/realm/SwiftLint/issues/5204)\n\n* 100 is no longer considered to be a magic number by the `no_magic_numbers`\n  rule.  \n  [Martin Redington](https://github.com/mildm8nnered)\n  [#5215](https://github.com/realm/SwiftLint/issues/5215)\n\n* Adds a `strict` configuration file setting, equivalent to the `--strict`\n  command line option.\n  [Martin Redington](https://github.com/mildm8nnered)\n  [#5226](https://github.com/realm/SwiftLint/issues/5226)\n\n* Extend `implicitly_unwrapped_optional` rule with the new mode\n  `weak_except_iboutlets` that only checks `weak` variables.  \n  [Ricky Tan](https://github.com/rickytan)\n\n#### Bug Fixes\n\n* Respect grapheme clusters in counting the number of characters in the `collection_alignment` rule.  \n  [kishikawakatsumi](https://github.com/kishikawakatsumi)\n  [#4837](https://github.com/realm/SwiftLint/issues/4837)\n\n* Fix false positive in `control_statement` rule that triggered on conditions\n  with trailing closures where parentheses are recommended by the compiler.  \n  [SimplyDanny](https://github.com/SimplyDanny)\n  [#5135](https://github.com/realm/SwiftLint/issues/5135)\n\n* Fix runtime error when an excluded directory does not exist.  \n  [SimplyDanny](https://github.com/SimplyDanny)\n  [#5078](https://github.com/realm/SwiftLint/issues/5078)\n\n* Support `switch` expressions used in expression contexts in\n  `switch_case_alignment` rule.  \n  [SimplyDanny](https://github.com/SimplyDanny)\n  [#5191](https://github.com/realm/SwiftLint/issues/5191)\n  [#5227](https://github.com/realm/SwiftLint/issues/5272)\n  [#5080](https://github.com/realm/SwiftLint/issues/5080)\n\n* Fix bug in `prefer_self_in_static_references` rule that triggered on\n  initializers of computed properties in classes when the property had an\n  accessor block.  \n  [SimplyDanny](https://github.com/SimplyDanny)\n  [#5118](https://github.com/realm/SwiftLint/issues/5118)\n\n* Document `exclude_ranges` option for `number_separator` rule.  \n  [SimplyDanny](https://github.com/SimplyDanny)\n\n* Rewrite `implicit_return` rule with SwiftSyntax fixing a few false positives\n  and false negatives in the process.  \n  [SimplyDanny](https://github.com/SimplyDanny)\n  [#5161](https://github.com/realm/SwiftLint/issues/5161)\n\n* Make sure `severity` is configurable for `type_contents_order` rule.  \n  [SimplyDanny](https://github.com/SimplyDanny)\n\n* Bazel: Mark `rules_xcodeproj` as a development dependency.  \n  [Thi Do√£n](https://github.com/thii)\n  [JP Simard](https://github.com/jpsim)\n  [#4737](https://github.com/realm/SwiftLint/issues/4737)\n\n* Fix false negatives for the `unneeded_synthesized_initializer` rule\n  for nested structs in classes.  \n  [Martin Redington](https://github.com/mildm8nnered)\n  [#5120](https://github.com/realm/SwiftLint/issues/5120)\n\n* Fix some unexpected rule enablement interactions between parent and\n  child configurations.  \n  [Martin Redington](https://github.com/mildm8nnered)\n  [#4876](https://github.com/realm/SwiftLint/issues/4876)\n\n* The `no_magic_numbers` rule will not trigger for violations in an\n  extension, if the extended class inherits from one of the specified\n  `test_parent_classes`, as long as the class declaration and the\n  extension are in the same source file.  \n  [Martin Redington](https://github.com/mildm8nnered)\n  [#5137](https://github.com/realm/SwiftLint/issues/5137)\n\n* Fix false positive in the `ns_number_init_as_function_reference` rule\n  when calling `NSNumber.init(value:)` directly.  \n  [Marcelo Fabri](https://github.com/marcelofabri)\n  [#5172](https://github.com/realm/SwiftLint/issues/5172)\n\n* The `no_magic_numbers` rule will not trigger for bitwise shift\n  operations.  \n  [Martin Redington](https://github.com/mildm8nnered)\n  [#5171](https://github.com/realm/SwiftLint/issues/5171)\n\n* The `accessibility_label_for_image` rule will no longer ignore the\n  `Image(systemName:)` constructor, as many system images do not\n  have good accessibility labels.  \n  [Martin Redington](https://github.com/mildm8nnered)\n  [#5165](https://github.com/realm/SwiftLint/issues/5165)\n\n* Fix false positives for `superfluous_disable_command` rule.  \n  [Martin Redington](https://github.com/mildm8nnered)\n  [#4798](https://github.com/realm/SwiftLint/issues/4798)\n\n* Fix false positive in the `test_case_accessibility` rule.  \n  [gibachan](https://github.com/gibachan)\n  [#5211](https://github.com/realm/SwiftLint/issues/5211)\n\n---\n\n### Using Bazel\n\nWith bzlmod:\n\n```\n// Pending BCR update\nbazel_dep(name = \"swiftlint\", version = \"0.53.0\", repo_name = \"SwiftLint\")\n```\n\nWithout bzlmod, put this in your `WORKSPACE`:\n\n<details>\n\n<summary>WORKSPACE</summary>\n\n```python\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\n\nhttp_archive(\n    name = \"build_bazel_rules_apple\",\n    sha256 = \"9e26307516c4d5f2ad4aee90ac01eb8cd31f9b8d6ea93619fc64b3cbc81b0944\",\n    url = \"https://github.com/bazelbuild/rules_apple/releases/download/2.2.0/rules_apple.2.2.0.tar.gz\",\n)\n\nload(\n    \"@build_bazel_rules_apple//apple:repositories.bzl\",\n    \"apple_rules_dependencies\",\n)\n\napple_rules_dependencies()\n\nload(\n    \"@build_bazel_rules_swift//swift:repositories.bzl\",\n    \"swift_rules_dependencies\",\n)\n\nswift_rules_dependencies()\n\nload(\n    \"@build_bazel_rules_swift//swift:extras.bzl\",\n    \"swift_rules_extra_dependencies\",\n)\n\nswift_rules_extra_dependencies()\n\nhttp_archive(\n    name = \"SwiftLint\",\n    sha256 = \"75839dc9e8a492a86bb585a3cda3d73b58997d7a14d02f1dba94171766bb8599\",\n    url = \"https://github.com/realm/SwiftLint/releases/download/0.53.0/bazel.tar.gz\",\n)\n\nload(\"@SwiftLint//bazel:repos.bzl\", \"swiftlint_repos\")\n\nswiftlint_repos()\n\nload(\"@SwiftLint//bazel:deps.bzl\", \"swiftlint_deps\")\n\nswiftlint_deps()\n```\n\n</details>\n\nThen you can run SwiftLint in the current directory with this command:\n\n```console\nbazel run @SwiftLint//:swiftlint -- --help\n```\n",
    "createdAt" : "2023-09-27T00:09:52+09:00",
    "fetchedFromAPIAt" : "2023-10-18T13:22:51+09:00",
    "id" : "RE_kwDOAiE69s4HT0Fg",
    "owner" : "realm",
    "publishedAt" : "2023-09-27T00:09:56+09:00",
    "repository" : "SwiftLint",
    "title" : "0.53.0: Laundry List",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.53.0",
    "version" : "0.53.0"
  },
  {
    "body" : "#### Breaking\n\n* SwiftLint now requires Swift 5.9 or higher to build.  \n  [SimplyDanny](https://github.com/SimplyDanny)\n  [JP Simard](https://github.com/jpsim)\n\n#### Experimental\n\n* None.\n\n#### Enhancements\n\n* Add `only` configuration option to `todo` rule which allows to specify\n  whether the rule shall trigger on `TODO`s, `FIXME`s or both.  \n  [gibachan](https://github.com/gibachan)\n  [#5233](https://github.com/realm/SwiftLint/pull/5233)\n\n* Make `unneeded_break_in_switch` auto correctable.  \n  [KS1019](https://github.com/KS1019/)\n\n* Speed up `closure_parameter_position` rule when there are no violations.  \n  [Marcelo Fabri](https://github.com/marcelofabri)\n\n* Rewrite `cyclomatic_complexity` rule using SwiftSyntax.  \n  [Marcelo Fabri](https://github.com/marcelofabri)\n\n* Rewrite `redundant_void_return` rule using SwiftSyntax.\n  Also include redundant void return clauses for closures in addition to\n  functions. This can be disabled by configuring the rule with\n  `include_closures: false`.  \n  [Marcelo Fabri](https://github.com/marcelofabri)\n  [JP Simard](https://github.com/jpsim)\n\n* Rewrite `discouraged_optional_collection` rule using SwiftSyntax, catching\n  more violations.  \n  [JP Simard](https://github.com/jpsim)\n\n* Rewrite `duplicate_imports` rule using SwiftSyntax.  \n  [JP Simard](https://github.com/jpsim)\n\n* Handle `viewIsAppearing` in the `type_contents_order` rule.  \n  [u-abyss](https://github.com/u-abyss)\n  [#5259](https://github.com/realm/SwiftLint/issues/5259)\n\n* Rewrite `vertical_parameter_alignment_on_call` rule using SwiftSyntax, fixing\n  some false positives.  \n  [Marcelo Fabri](https://github.com/marcelofabri)\n  [#3581](https://github.com/realm/SwiftLint/issues/3581)\n\n* Rewrite `no_grouping_extension` rule using SwiftSyntax.  \n  [Marcelo Fabri](https://github.com/marcelofabri)\n\n#### Bug Fixes\n\n* Fix false positive in `implicit_getter` rule when using unknown accessors.  \n  [kabiroberai](https://github.com/kabiroberai)\n  [#5300](https://github.com/realm/SwiftLint/issues/5300)\n\n* Fix correction of `explicit_init` rule by keeping significant trivia.  \n  [BB9z](https://github.com/BB9z)\n  [#5289](https://github.com/realm/SwiftLint/issues/5289)\n\n* Fix invalid corrections for opaque and existential optionals in \n  `syntactic_sugar` rule.  \n  [SimplyDanny](https://github.com/SimplyDanny)\n  [#5277](https://github.com/realm/SwiftLint/issues/5277)\n\n* Fix false positive in `unused_import` rule that triggered on \n  `@_exported` imports which could break downstream modules if removed.  \n  [jszumski](https://github.com/jszumski)\n  [#5242](https://github.com/realm/SwiftLint/pull/5242)\n\n* Fix false positive in `unused_import` rule when using a constructor \n  defined in a transitive module.  \n  [jszumski](https://github.com/jszumski)\n  [#5246](https://github.com/realm/SwiftLint/pull/5246)\n\n---\n\n### Using Bazel\n\nWith bzlmod:\n\n```\n// Pending BCR update\nbazel_dep(name = \"swiftlint\", version = \"0.54.0\", repo_name = \"SwiftLint\")\n```\n\nWithout bzlmod, put this in your `WORKSPACE`:\n\n<details>\n\n<summary>WORKSPACE</summary>\n\n```python\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\n\nhttp_archive(\n    name = \"build_bazel_rules_apple\",\n    sha256 = \"9e26307516c4d5f2ad4aee90ac01eb8cd31f9b8d6ea93619fc64b3cbc81b0944\",\n    url = \"https://github.com/bazelbuild/rules_apple/releases/download/2.2.0/rules_apple.2.2.0.tar.gz\",\n)\n\nload(\n    \"@build_bazel_rules_apple//apple:repositories.bzl\",\n    \"apple_rules_dependencies\",\n)\n\napple_rules_dependencies()\n\nload(\n    \"@build_bazel_rules_swift//swift:repositories.bzl\",\n    \"swift_rules_dependencies\",\n)\n\nswift_rules_dependencies()\n\nload(\n    \"@build_bazel_rules_swift//swift:extras.bzl\",\n    \"swift_rules_extra_dependencies\",\n)\n\nswift_rules_extra_dependencies()\n\nhttp_archive(\n    name = \"SwiftLint\",\n    sha256 = \"3a97a7d225c6a39716c48aea88eee38df052f678bf6dad73f62c746a3d9cc10c\",\n    url = \"https://github.com/realm/SwiftLint/releases/download/0.54.0/bazel.tar.gz\",\n)\n\nload(\"@SwiftLint//bazel:repos.bzl\", \"swiftlint_repos\")\n\nswiftlint_repos()\n\nload(\"@SwiftLint//bazel:deps.bzl\", \"swiftlint_deps\")\n\nswiftlint_deps()\n```\n\n</details>\n\nThen you can run SwiftLint in the current directory with this command:\n\n```console\nbazel run @SwiftLint//:swiftlint -- --help\n```\n",
    "createdAt" : "2023-11-11T05:54:29+09:00",
    "fetchedFromAPIAt" : "2023-12-06T22:38:35+09:00",
    "id" : "RE_kwDOAiE69s4HsA7S",
    "owner" : "realm",
    "publishedAt" : "2023-11-11T05:54:33+09:00",
    "repository" : "SwiftLint",
    "title" : "0.54.0: Macro-Economic Forces",
    "url" : "https://github.com/realm/SwiftLint/releases/tag/0.54.0",
    "version" : "0.54.0"
  }
]