[
  {
    "body" : "Initial release.",
    "createdAt" : "2020-02-28T06:45:22+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTI0MDU2MjAw",
    "owner" : "apple",
    "publishedAt" : "2020-02-28T07:08:00+09:00",
    "repository" : "swift-argument-parser",
    "title" : "ArgumentParser 0.0.1",
    "url" : "https://github.com/apple/swift-argument-parser/releases/tag/0.0.1",
    "version" : "0.0.1"
  },
  {
    "body" : "### Additions\r\n\r\n- The `EX_USAGE` exit code is now used for validation errors.\r\n- The parser provides near-miss suggestions when a user provides an unknown option.\r\n- `ArgumentParser` now builds on Windows.\r\n- You can throw an `ExitCode` error to exit without printing any output.\r\n- You can now create optional Boolean flags with inversions that default to `nil`:\r\n  ```swift\r\n  @Flag(inversion: .prefixedNo) var takeMyShot: Bool?\r\n  ```\r\n- You can now specify exclusivity for case-iterable flags and for Boolean flags with inversions.\r\n\r\n### Fixes\r\n\r\n- Cleaned up a wide variety of documentation typos and shortcomings.\r\n- Improved different kinds of error messages:\r\n  - Duplicate exclusive flags now show the duplicated arguments.\r\n  - Subcommand validation errors print the correct usage string.\r\n- In the help screen:\r\n  - Removed the extra space before the default value for arguments without descriptions.\r\n  - Removed the default value note when the default value is an empty string.\r\n  - Default values are now shown for Boolean options.\r\n  - Case-iterable flags are now grouped correctly.\r\n  - Case-iterable flags with default values now show the default value.\r\n  - Arguments from parent commands that are included via `@OptionGroup` in subcommands are no longer duplicated.\r\n- Case-iterable flags created with the `.chooseFirst` exclusivity parameter now correctly ignore additional flags.\r\n",
    "createdAt" : "2020-03-07T08:36:57+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTI0MzA4NDc1",
    "owner" : "apple",
    "publishedAt" : "2020-03-07T08:42:20+09:00",
    "repository" : "swift-argument-parser",
    "title" : "ArgumentParser 0.0.2",
    "url" : "https://github.com/apple/swift-argument-parser/releases/tag/0.0.2",
    "version" : "0.0.2"
  },
  {
    "body" : "### Additions\r\n\r\n- You can specify the `.unconditionalRemaining` parsing strategy for arrays of\r\n  positional arguments to accept dash-prefixed input, like\r\n  `example --one two -three`.\r\n- You can now provide a default value for a positional argument.\r\n- You can now customize the display of default values in the extended help for\r\n  an `ExpressibleByArgument` type.\r\n- You can call the static `exitCode(for:)` method on any command to retrieve the\r\n  exit code for a given error.\r\n\r\n### Fixes\r\n\r\n- Supporting targets are now prefixed to prevent conflicts with other libraries.\r\n- The extension providing `init?(argument:)` to `RawRepresentable` types is now\r\n  properly constrained.\r\n- The parser no longer treats passing the same exclusive flag more than once as\r\n  an error.\r\n- `ParsableArguments` types that are declared as `@OptionGroup()` properties on\r\n  commands can now also be declared on subcommands. Previosuly, the parent \r\n  command's declaration would prevent subcommands from seeing the user-supplied \r\n  arguments.\r\n- Default values are rendered correctly for properties with `Optional` types.\r\n- The output of help requests is now printed during the \"exit\" phase of execution, \r\n  instead of during the \"run\" phase.\r\n- Usage strings now correctly show that optional positional arguments aren't \r\n  required.\r\n- Extended help now omits extra line breaks when displaying arguments or commands\r\n  with long names that don't provide help text.\r\n",
    "createdAt" : "2020-03-23T09:03:38+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTI0NzU1OTE1",
    "owner" : "apple",
    "publishedAt" : "2020-03-23T09:04:54+09:00",
    "repository" : "swift-argument-parser",
    "title" : "ArgumentParser 0.0.3",
    "url" : "https://github.com/apple/swift-argument-parser/releases/tag/0.0.3",
    "version" : "0.0.3"
  },
  {
    "body" : "### Fixes\r\n\r\n- Removed usage of 5.2-only syntax.\r\n",
    "createdAt" : "2020-03-24T03:47:23+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTI0Nzg0NjM1",
    "owner" : "apple",
    "publishedAt" : "2020-03-24T03:48:07+09:00",
    "repository" : "swift-argument-parser",
    "title" : "ArgumentParser 0.0.4",
    "url" : "https://github.com/apple/swift-argument-parser/releases/tag/0.0.4",
    "version" : "0.0.4"
  },
  {
    "body" : "### Additions\r\n\r\n- You can now specify a version string in a `ParsableCommand`'s configuration.\r\n  The generated tool will then automatically respond to a `--version` flag.\r\n- Command definitions are now validated at runtime in debug mode, to check\r\n  issues that can't be detected during compilation.\r\n\r\n### Fixes\r\n\r\n- Deprecation warnings during compilation on Linux have been removed.\r\n- The `validate()` method is now called on each command in the matched command\r\n  stack, instead of only the last command in the stack.",
    "createdAt" : "2020-04-16T04:48:23+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTI1NTQ0ODcy",
    "owner" : "apple",
    "publishedAt" : "2020-04-16T04:49:35+09:00",
    "repository" : "swift-argument-parser",
    "title" : "ArgumentParser 0.0.5",
    "url" : "https://github.com/apple/swift-argument-parser/releases/tag/0.0.5",
    "version" : "0.0.5"
  },
  {
    "body" : "### Additions\r\n\r\n- Command definition validation now checks for name collisions between options\r\n  and flags.\r\n- `ValidationError.message` is now publicly accessible.\r\n- Added an `EnumerableFlag` protocol for `CaseIterable` types that are used to\r\n  provide the names for flags. When declaring conformance to `EnumerableFlag`,\r\n  you can override the name specification and help text for individual flags.\r\n  See [#65] for more detail.\r\n- When a command that requires arguments is called with no arguments at all, \r\n  the error message includes the full help text instead of the short usage\r\n  string. This is intended to provide a better experience for first-time users.\r\n- Added a `helpMessage()` method for generating the help text for a command\r\n  or subcommand.\r\n\r\n### Deprecations\r\n\r\n- `@Flag` properties that use `CaseIterable`/`String` types as their values\r\n  are deprecated, and the related `@Flag` initializers will be removed \r\n  in a future version. \r\n  \r\n  *Migration:* Add `EnumerableFlag` conformance to the type of these kinds of\r\n  `@Flag` properties.\r\n\r\n### Fixes\r\n\r\n- Errors thrown while parsing in a `transform` closure are printed correclty\r\n  instead of a general `Invalid state` error.\r\n- Improvements to the guides and in the error message when attempting to access\r\n  a value from an argument/option/flag definition.\r\n- Fixed issues in the CMake and Windows build configurations.\r\n- You can now use an `=` to join a value with an option's short name when calling\r\n  a command. This previously only worked for long names.\r\n\r\n[#65]: https://github.com/apple/swift-argument-parser/pull/65\r\n",
    "createdAt" : "2020-05-15T02:55:32+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTI2NTI2MDAw",
    "owner" : "apple",
    "publishedAt" : "2020-05-15T02:57:02+09:00",
    "repository" : "swift-argument-parser",
    "title" : "ArgumentParser 0.0.6",
    "url" : "https://github.com/apple/swift-argument-parser/releases/tag/0.0.6",
    "version" : "0.0.6"
  },
  {
    "body" : "### Additions\r\n\r\n- Error messages and help screens now include information about how to request\r\n  more help.\r\n- CMake builds now support installation.\r\n\r\n### Changes\r\n\r\n- The `static func main()` method on `ParsableCommand` no longer returns\r\n  `Never`. This allows `ParsableCommand` types to be designated as the entry\r\n  point for a Swift executable by using the `@main` attribute.\r\n  \r\n  *Migration:* For most uses, this change is source compatible. If you have\r\n  used `main()` where a `() -> Never` function is explicitly required, you'll\r\n  need to change your usage or capture the method in another function.\r\n\r\n- `Optional` no longer conforms to `ExpressibleByArgument`, to avoid some\r\n  property declarations that don't make sense. \r\n\r\n  *Migration:* This is source-compatible for all property declarations, with\r\n  deprecations for optional properties that define an explicit default. If\r\n  you're using optional values where an `ExpressibleByArgument` type is\r\n  expected, such as a generic function, you will need to change your usage\r\n  or provide an explicit override.\r\n\r\n- `ParsableCommand`'s `run()` method requirement is now a `mutating` method,\r\n  allowing mutations to a command's properties, such as sorting an array of\r\n  arguments, without additional copying.\r\n  \r\n  *Migration:* No changes are required for commands that are executed through\r\n  the `main()` method. If you manually parse a command and then call its\r\n  `run()` method, you may need to change the command from a constant to a\r\n  variable.\r\n\r\n### Removals\r\n\r\n- The `@Flag` initializers that were deprecated in version 0.0.6 are now\r\n  marked as unavailable.\r\n\r\n### Fixes\r\n\r\n- `@Option` properties of an optional type that use a `transform` closure now\r\n  correctly indicate their optionality in the usage string.\r\n- Correct wrapping and indentation are maintained for abstracts and discussions \r\n  with short lines.\r\n- Empty abstracts no longer add extra blank lines to the help screen.\r\n- Help requests are still honored even when a parsed command fails validation.\r\n- The `--` terminator isn't consumed when parsing a command, so that it can be\r\n  parsed as a value when a subcommand includes an `.unconditionalRemaining`\r\n  argument array.\r\n- CMake builds work correctly again.\r\n",
    "createdAt" : "2020-06-04T03:56:44+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTI3MTkyNTI2",
    "owner" : "apple",
    "publishedAt" : "2020-06-04T03:59:56+09:00",
    "repository" : "swift-argument-parser",
    "title" : "ArgumentParser 0.1.0",
    "url" : "https://github.com/apple/swift-argument-parser/releases/tag/0.1.0",
    "version" : "0.1.0"
  },
  {
    "body" : "### Additions\r\n\r\n- You can now specify default values for array properties of parsable types.\r\n  The default values are overridden if the user provides at least one value\r\n  as part of the command-line arguments.\r\n\r\n### Changes\r\n\r\n- This release of `swift-argument-parser` requires Swift 5.2.\r\n- Default values for all properties are now written using default initialization\r\n  syntax, including some values that were previously implicit, such as empty\r\n  arrays and `false` for Boolean flags.\r\n  \r\n  *Migration:* Specify default values using typical Swift default value syntax\r\n  to remove the deprecation warnings:\r\n  \r\n  ```swift\r\n  // old\r\n  @Flag() var verbose: Bool\r\n  // new\r\n  @Flag() var verbose = false\r\n  ```\r\n  \r\n  **_Important:_** There is a semantic change for flags with inversions that do\r\n  not have a default value. In previous releases, these flags had a default\r\n  value of `false`; starting in 0.2.0, these flags will have no default, and\r\n  will therefore be required by the user. Specify a default value of `false` to\r\n  retain the old behavior.\r\n\r\n### Fixes\r\n\r\n- Options with multiple names now consistently show the first-declared name\r\n  in usage and help screens.\r\n- Default subcommands are indicated in the help screen.\r\n- User errors with options are now shown before positional argument errors,\r\n  eliminating some false negative reports.\r\n- CMake compatibility fixes.\r\n",
    "createdAt" : "2020-06-24T01:02:53+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTI3ODM2NDQ4",
    "owner" : "apple",
    "publishedAt" : "2020-06-24T01:05:18+09:00",
    "repository" : "swift-argument-parser",
    "title" : "ArgumentParser 0.2.0",
    "url" : "https://github.com/apple/swift-argument-parser/releases/tag/0.2.0",
    "version" : "0.2.0"
  },
  {
    "body" : "### Additions\r\n\r\n- You can now generate Bash and Zsh shell completion scripts for commands, \r\n  either by using the `--generate-completion-script` flag when running a \r\n  command, or by calling the static `completionScript(for:)` method on a root \r\n  `ParsableCommand` type. See the [guide to completion scripts][comp-guide] for \r\n  information on customizing and installing the completion script for your \r\n  command.\r\n\r\n### Fixes\r\n\r\n- Property wrappers without parameters can now be written without parentheses\r\n  — e.g. `@Flag var verbose = false`.\r\n- When displaying default values for array properties, the help screen now \r\n  correctly uses the element type's `ExpressibleByArgument` conformance to \r\n  generate the description.\r\n- Running a project that defines a command as its own subcommand now fails with\r\n  a useful error message.\r\n\r\n[comp-guide]: https://github.com/apple/swift-argument-parser/blob/280700d361c1b3af6e2345f5e24f67fa9450bec6/Documentation/07%20Completion%20Scripts.md\r\n",
    "createdAt" : "2020-07-31T01:15:37+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTI5MTI2NDg0",
    "owner" : "apple",
    "publishedAt" : "2020-07-31T01:18:39+09:00",
    "repository" : "swift-argument-parser",
    "title" : "ArgumentParser 0.2.1",
    "url" : "https://github.com/apple/swift-argument-parser/releases/tag/0.2.1",
    "version" : "0.2.1"
  },
  {
    "body" : "### Fixes\r\n\r\n- Zsh completion scripts have improved documentation and better support\r\n  multi-word completion strings, escaped characters, non-standard executable\r\n  locations, and empty help strings.\r\n",
    "createdAt" : "2020-08-06T02:46:50+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTI5Mzc0ODY3",
    "owner" : "apple",
    "publishedAt" : "2020-08-06T02:52:08+09:00",
    "repository" : "swift-argument-parser",
    "title" : "ArgumentParser 0.2.2",
    "url" : "https://github.com/apple/swift-argument-parser/releases/tag/0.2.2",
    "version" : "0.2.2"
  },
  {
    "body" : "### Additions\r\n\r\n- Shell completions scripts are now available for Fish.\r\n\r\n### Changes\r\n\r\n- Array properties without a default value are now treated as required for the\r\n  user of a command-line tool. In previous versions of the library, these\r\n  properties defaulted to an empty array; a deprecation was introduced for this\r\n  behavior in version 0.2.0.\r\n\r\n  *Migration:* Specify an empty array as the default value for properties that\r\n  should not require user input:\r\n\r\n  ```swift\r\n  // old\r\n  @Option var names: [String]\r\n  // new\r\n  @Option var names: [String] = []\r\n  ```",
    "createdAt" : "2020-08-16T03:14:52+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTI5NzM2OTgx",
    "owner" : "apple",
    "publishedAt" : "2020-08-16T03:16:12+09:00",
    "repository" : "swift-argument-parser",
    "title" : "ArgumentParser 0.3.0",
    "url" : "https://github.com/apple/swift-argument-parser/releases/tag/0.3.0",
    "version" : "0.3.0"
  },
  {
    "body" : "### Fixes\r\n\r\n- Changes made to a command's properties in its `validate` method are now persisted.\r\n- The exit code defined by error types that conform to `CustomNSError` are now honored.\r\n- Improved error message when declaring a command type with an unadorned  mutable property. (See [#256] for more.)\r\n- Migrated from `CRT` to `MSVCRT` for Windows platforms.\r\n- Fixes and improvements for building with CMake for Windows and Apple Silicon.\r\n- Documentation improvements.\r\n\r\n[#256]: https://github.com/apple/swift-argument-parser/pull/256\r\n",
    "createdAt" : "2021-01-16T14:46:48+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTM2NDg1Nzcz",
    "owner" : "apple",
    "publishedAt" : "2021-01-16T14:47:24+09:00",
    "repository" : "swift-argument-parser",
    "title" : "ArgumentParser 0.3.2",
    "url" : "https://github.com/apple/swift-argument-parser/releases/tag/0.3.2",
    "version" : "0.3.2"
  },
  {
    "body" : "### Additions\r\n\r\n- Short options can now support \"joined option\" syntax, which lets users specify a value appended immediately after the option's short name. For example, in addition to calling this `example` command with `-D debug` and `-D=debug`, users can now write `-Ddebug` for the same parsed value. (#240)\r\n\r\n  ```swift\r\n  @main\r\n  struct Example: ParsableCommand {\r\n      @Option(name: .customShort(\"D\", allowingJoined: true))\r\n      var debugValue: String\r\n    \r\n      func run() {\r\n          print(debugValue)\r\n      }\r\n  }\r\n  ```\r\n\r\n### Changes\r\n\r\n- The `CommandConfiguration.helpNames` property is now optional, to allow the overridden help flags of parent commands to flow down to their children. Most existing code should not be affected, but if you've customized a command's help flags you may see different behavior. (#251)\r\n- The `errorCode` property is no longer used as a command's exit code when `CustomNSError` types are thrown. (#276)\r\n\r\n  *Migration:* Instead of throwing a `CustomNSError` type, print your error manually and throw an `ExitCode` error to customize your command's exit code.\r\n\r\n### Removals\r\n\r\n- Old, deprecated property wrapper initializers have been removed.\r\n\r\n### Fixes\r\n\r\n- Validation errors now show the correct help flags when help flags have been  customized.\r\n- Options, flags, and arguments that are marked as hidden from the help screen are also suppressed from completion scripts.\r\n- Non-parsed variable properties are now allowed in parsable types.\r\n- Error messages produced when `NSError` types are thrown have been improved.\r\n- The usage line for commands with a large number of options includes more detail about required flags and positional arguments.\r\n- Support for CMake builds on Apple Silicon is improved.\r\n",
    "createdAt" : "2021-03-05T06:50:42+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTM5MzA2NjU5",
    "owner" : "apple",
    "publishedAt" : "2021-03-05T06:52:04+09:00",
    "repository" : "swift-argument-parser",
    "title" : "ArgumentParser 0.4.0",
    "url" : "https://github.com/apple/swift-argument-parser/releases/tag/0.4.0",
    "version" : "0.4.0"
  },
  {
    "body" : "### Additions\r\n\r\n- When a user provides an invalid value as an argument or option, the error message now includes the help text for that argument.\r\n\r\n### Fixes\r\n\r\n- Zsh completion scripts for commands that include a hyphen no longer cause errors.\r\n- Optional unparsed values are now decoded correctly in `ParsableArguments` types.\r\n",
    "createdAt" : "2021-03-09T06:00:41+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTM5NDY3NTQ2",
    "owner" : "apple",
    "publishedAt" : "2021-03-09T06:01:13+09:00",
    "repository" : "swift-argument-parser",
    "title" : "ArgumentParser 0.4.1",
    "url" : "https://github.com/apple/swift-argument-parser/releases/tag/0.4.1",
    "version" : "0.4.1"
  },
  {
    "body" : "### Fixes\r\n\r\n- An option or flag can now declare a name with both single- and double-\r\n  dash prefixes, such as `-my-flag` and `--my-flag`. Specify both names in the\r\n  `name` parameter when declaring your property:\r\n  \r\n  ```swift\r\n  @Flag(name: [.long, .customLong(\"my-flag\", withSingleDash: true)])\r\n  var myFlag = false\r\n  ```\r\n\r\n- Parsing performance improvements.\r\n",
    "createdAt" : "2020-09-03T00:41:59+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTMwNTk1MTE3",
    "owner" : "apple",
    "publishedAt" : "2020-09-03T00:42:57+09:00",
    "repository" : "swift-argument-parser",
    "title" : "ArgumentParser 0.3.1",
    "url" : "https://github.com/apple/swift-argument-parser/releases/tag/0.3.1",
    "version" : "0.3.1"
  },
  {
    "body" : "### Fixes\r\n\r\n- Includes a workaround for a runtime crash with certain `OptionGroup` configurations when a command is compiled in release mode.\r\n",
    "createdAt" : "2021-07-31T02:17:57+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTQ3MDYyOTg4",
    "owner" : "apple",
    "publishedAt" : "2021-07-31T02:19:54+09:00",
    "repository" : "swift-argument-parser",
    "title" : "ArgumentParser 0.4.4",
    "url" : "https://github.com/apple/swift-argument-parser/releases/tag/0.4.4",
    "version" : "0.4.4"
  },
  {
    "body" : "### Additions\r\n\r\n- When a user doesn't provide a required argument, the error message now includes that argument's help text. (#324)\r\n- Command-line tools built with `ArgumentParser` now include an experimental flag to dump command/argument/help information as JSON: `--experimental-dump-help`. (#310)\r\n\r\n### Changes\r\n\r\n- All public enumerations are now structs with static properties, to make compatibility with future additions simpler.\r\n\r\n### Fixes\r\n\r\n- Array properties defined as `@Option` with the `.upToNextOption` parsing strategy now include all provided values. (#304) In the example below, all four values are now included in the resulting array, where only the last two were included in previous releases:\r\n \r\n    ```swift   \r\n    struct Example: ParsableCommand {\r\n        @Option(parsing: .upToNextOption)\r\n        var option: String\r\n    }\r\n    ```\r\n    ```\r\n    $ example --option one two --option three four\r\n    ```\r\n\r\n- When a command defines an array property as an `@Argument` with the `.unconditionalRemaining` parsing strategy, option and flag parsing now stops at the first positional argument or unrecognized flag. (#333)\r\n- Completion scripts correctly use customized help flags. (#308)\r\n- Fixes errors with bash custom completion arguments and the executable path. (#320, #323)\r\n- Fixes the behavior when a user specifies both the `help` subcommand and a help flag. (#309)\r\n- A variety of internal improvements. (#315, #316, #321, #341)\r\n",
    "createdAt" : "2021-09-04T02:30:52+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTQ4OTgyMTYx",
    "owner" : "apple",
    "publishedAt" : "2021-09-04T02:32:18+09:00",
    "repository" : "swift-argument-parser",
    "title" : "ArgumentParser 0.5.0",
    "url" : "https://github.com/apple/swift-argument-parser/releases/tag/0.5.0",
    "version" : "0.5.0"
  },
  {
    "body" : "### Fixes\r\n\r\n- Both parts of a flag with an inversion are now hidden when specified.\r\n- Better support for building on OpenBSD.\r\n- Optional unparsed values are now always properly decoded. (#290)\r\n- Help information from super-commands is no longer unnecessarily injected into subcommand help screens.",
    "createdAt" : "2021-04-22T08:00:54+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTQxODA3NDQ3",
    "owner" : "apple",
    "publishedAt" : "2021-04-22T08:01:59+09:00",
    "repository" : "swift-argument-parser",
    "title" : "ArgumentParser 0.4.2",
    "url" : "https://github.com/apple/swift-argument-parser/releases/tag/0.4.2",
    "version" : "0.4.2"
  },
  {
    "body" : "### Additions\r\n\r\n- Experimental API for hiding `@OptionGroup`-declared properties from the help screen.\r\n",
    "createdAt" : "2021-04-29T00:41:32+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTQyMTQ4MjE0",
    "owner" : "apple",
    "publishedAt" : "2021-04-29T00:42:31+09:00",
    "repository" : "swift-argument-parser",
    "title" : "ArgumentParser 0.4.3",
    "url" : "https://github.com/apple/swift-argument-parser/releases/tag/0.4.3",
    "version" : "0.4.3"
  },
  {
    "body" : "## Fixes\r\n\r\n- Addresses an issue when compiling under Mac Catalyst.\r\n",
    "createdAt" : "2021-09-14T23:46:59+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "RE_kwDODmuHYc4C89sy",
    "owner" : "apple",
    "publishedAt" : "2021-09-14T23:47:46+09:00",
    "repository" : "swift-argument-parser",
    "title" : "ArgumentParser 1.0.1",
    "url" : "https://github.com/apple/swift-argument-parser/releases/tag/1.0.1",
    "version" : "1.0.1"
  },
  {
    "body" : "The 1.0 release marks an important milestone — `ArgumentParser` is now source stable!\r\n\r\n### Changes\r\n\r\n- `ArgumentParser` now provides a DocC documentation catalog, so you can view rendered articles and symbol documentation directly within Xcode.\r\n\r\n### Fixes\r\n\r\n- Parsing works as expected for options with single-dash names that are declared using the `.upToNextOption` parsing strategy.\r\n",
    "createdAt" : "2021-09-11T09:04:33+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "RE_kwDODmuHYc4C8Xer",
    "owner" : "apple",
    "publishedAt" : "2021-09-11T09:06:39+09:00",
    "repository" : "swift-argument-parser",
    "title" : "ArgumentParser 1.0",
    "url" : "https://github.com/apple/swift-argument-parser/releases/tag/1.0.0",
    "version" : "1.0.0"
  },
  {
    "body" : "### Changes\r\n\r\n- CMake builds now always statically link `ArgumentParserToolInfo`. (#424)\r\n\r\n### Fixes\r\n\r\n- When a user provides an array-based option's key (e.g. `--key`) without any values, the error message now correctly describes the problem. (#435)\r\n\r\nThe 1.1.2 release includes contributions from @compnerd and @KeithBird. Thank you!\r\n",
    "createdAt" : "2022-04-12T03:49:23+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "RE_kwDODmuHYc4D0tLC",
    "owner" : "apple",
    "publishedAt" : "2022-04-12T03:50:30+09:00",
    "repository" : "swift-argument-parser",
    "title" : "ArgumentParser 1.1.2",
    "url" : "https://github.com/apple/swift-argument-parser/releases/tag/1.1.2",
    "version" : "1.1.2"
  },
  {
    "body" : "## Fixes\r\n\r\n- Addresses an issue when building tests under Mac Catalyst.\r\n",
    "createdAt" : "2021-11-11T02:04:24+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "RE_kwDODmuHYc4DKlNC",
    "owner" : "apple",
    "publishedAt" : "2021-11-11T02:05:32+09:00",
    "repository" : "swift-argument-parser",
    "title" : "ArgumentParser 1.0.2",
    "url" : "https://github.com/apple/swift-argument-parser/releases/tag/1.0.2",
    "version" : "1.0.2"
  },
  {
    "body" : "### Changes\r\n\r\n- When a user provides an incorrect value for an option, an `ArgumentParser`-based program now includes the valid values when possible.\r\n\r\n    ```\r\n    $ example --format png\r\n    Error: The value 'png' is invalid for '--format <format>'.\r\n    Please provide one of 'text', 'json' or 'csv'.\r\n    ```\r\n\r\n### Fixes\r\n\r\n- Resolves an issue with `zsh` custom completions for command names that include a dash.\r\n- Improves the generated completions scripts for `fish`.\r\n- Resolves issues that prevented building `ArgumentParser` for WebAssembly using SwiftWasm toolchains.\r\n- Improved window size handling on Windows.\r\n- Fixed a crash when using `--experimental-dump-help` with commands that provide non-parsed values.\r\n- Fixes an issue where subcommands that declare array arguments with the `.unconditionalRemaining` parsing strategy unexpectedly miss arguments, extending the change in #333 to subcommands. (#397)\r\n- Corrects the order of an `@Option` initializer's parameters, deprecating the old version. (#391)\r\n- Expanded and corrected documentation.\r\n\r\nThe 1.0.3 release includes contributions from @atierian, @CraigSiemens, @dduan, @floam, @KS1019, @McNight, @mdznr, @natecook1000, @rauhul, and @yonihemi. Thank you!\r\n",
    "createdAt" : "2022-02-01T15:18:35+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "RE_kwDODmuHYc4DexnF",
    "owner" : "apple",
    "publishedAt" : "2022-02-01T15:27:38+09:00",
    "repository" : "swift-argument-parser",
    "title" : "ArgumentParser 1.0.3",
    "url" : "https://github.com/apple/swift-argument-parser/releases/tag/1.0.3",
    "version" : "1.0.3"
  },
  {
    "body" : "### Additions\r\n\r\n- A command's `run()` method now supports `async`/`await` when the command conforms to `AsyncParsableCommand`. (#404)\r\n- New API for distinguishing between public, hidden, and private arguments and option groups, and a new extended help screen accessible via `--help-hidden`. (#366, #390, and [#405 through #413][group])\r\n- You can now override the autogenerated usage string when configuring a command. (#400)\r\n\r\n### Changes\r\n\r\n- `ArgumentParser` now requires Swift 5.5.\r\n\r\n### Fixes\r\n\r\n- The auto-generated usage string now correctly hides all optional parameters when over the length limit. (#416)\r\n- One `@Option` initializer now has its parameters in the correct order; the incorrect initializer is deprecated. (#391)\r\n- Help flags are now correctly captured in `.unconditionalRemaining` argument arrays.\r\n- Documentation fixes and improvements.\r\n\r\nThe 1.1.0 release includes contributions from @keith, @MartinP7r, @McNight, @natecook1000, @rauhul, and @zkiraly. Thank you!\r\n\r\n[group]: https://github.com/apple/swift-argument-parser/compare/1.0.3...HEAD",
    "createdAt" : "2022-03-15T15:34:11+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "RE_kwDODmuHYc4Dr8PV",
    "owner" : "apple",
    "publishedAt" : "2022-03-15T15:37:08+09:00",
    "repository" : "swift-argument-parser",
    "title" : "ArgumentParser 1.1.0",
    "url" : "https://github.com/apple/swift-argument-parser/releases/tag/1.1.0",
    "version" : "1.1.0"
  },
  {
    "body" : "### Fixes\r\n\r\n- Moves the platform requirement from the package level down to the new types and protocols with `async` members. This was a source-breaking change in 1.1.0. (#427)\r\n- Fixed issues in the CMake build configuration.",
    "createdAt" : "2022-03-16T22:18:20+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "RE_kwDODmuHYc4DsiCz",
    "owner" : "apple",
    "publishedAt" : "2022-03-16T23:25:10+09:00",
    "repository" : "swift-argument-parser",
    "title" : "ArgumentParser 1.1.1",
    "url" : "https://github.com/apple/swift-argument-parser/releases/tag/1.1.1",
    "version" : "1.1.1"
  },
  {
    "body" : "### Additions\r\n\r\n- You can now provide a title in an `@OptionGroup` declaration. Titled option groups are listed separately in the help screen under that title as a heading. (#492)\r\n- Two new parsing strategies have been added for `@Argument` array properties:\r\n\r\n  - `.allUnrecognized` captures all unrecognized inputs after parsing known flags, options, and arguments.\r\n  - `.postTerminator` collects any inputs that follow the `--` terminator.\r\n\r\n  See the [`ArgumentArrayParsingStrategy` documentation][arrayparse-docs] for more. (#496)\r\n- Default values are now supported for `@Argument` or `@Option` properties with optional type, allowing you to initialize those properties with `nil`. Providing a non-`nil` default value results in a warning, since optional properties with non-`nil` defaults don't need to be declared as optionals. (#477, #480)\r\n\r\n### Changes\r\n\r\n- The `.unconditionalRemaining` array parsing strategy has been deprecated and renamed to `.captureForPassthrough`, to better fit its semantic behavior and intended usage. See the [`ArgumentArrayParsingStrategy` documentation][arrayparse-docs] for more. (#496)\r\n\r\n### Fixes\r\n\r\n- Invalid `init(from:)` decoding initializers are now correctly diagnosed by ArgumentParser's validators. (#487)\r\n- Default values are now correctly displayed as flags for `@Flag` properties with inversions or `EnumerableFlag` types. (#486)\r\n- The help display for non-string-backed raw representable types has been corrected to not show raw Swift values. Instead, the help display uses the type's customized `defaultValueDescription` and `allValues` implementations. (#494)\r\n- Properties at different levels of a command hierarchy with the same Swift name but different argument names no longer collide. (#495)\r\n- The **`generate-manual`** plugin name is improved when used from within Xcode. (#505)\r\n- Documentation fixes and improvements.\r\n\r\nThe 1.2.0 release includes contributions from @allevato, @clayellis, @compnerd, @d-ronnqvist, @natecook1000, @randomeizer, and @rauhul. Thank you!\r\n\r\n[arrayparse-docs]: https://apple.github.io/swift-argument-parser/documentation/argumentparser/argumentarrayparsingstrategy\r\n",
    "createdAt" : "2022-11-09T04:45:58+09:00",
    "fetchedFromAPIAt" : "2022-11-09T09:54:53+09:00",
    "id" : "RE_kwDODmuHYc4E6dcs",
    "owner" : "apple",
    "publishedAt" : "2022-11-09T04:47:21+09:00",
    "repository" : "swift-argument-parser",
    "title" : "ArgumentParser 1.2.0",
    "url" : "https://github.com/apple/swift-argument-parser/releases/tag/1.2.0",
    "version" : "1.2.0"
  },
  {
    "body" : "### Additions\r\n\r\n- `ArgumentParser` now includes a SwiftPM plugin for generating `man` pages. Explore the functionality and configuration by running `swift package plugin experimental-generate-manual --help` from your package root. (#332)\r\n\r\n### Fixes\r\n\r\n- Hidden subcommands are now excluded from completion scripts. (#443)\r\n- When an invalid value is provided for a `CaseIterable` type, the error message now includes a list of valid inputs. (#445)\r\n- There's now a diagnostic when an `AsyncParsableCommand` is incorrectly placed under a non-`async` root command. (#436)\r\n\r\nThe 1.1.3 release includes contributions from @keith, @KeithBird, @konomae, @LucianoPAlmeida, and @rauhul. Thank you!\r\n",
    "createdAt" : "2022-06-24T03:28:27+09:00",
    "fetchedFromAPIAt" : "2022-06-24T09:48:29+09:00",
    "id" : "RE_kwDODmuHYc4EMpWL",
    "owner" : "apple",
    "publishedAt" : "2022-06-24T03:30:35+09:00",
    "repository" : "swift-argument-parser",
    "title" : "ArgumentParser 1.1.3",
    "url" : "https://github.com/apple/swift-argument-parser/releases/tag/1.1.3",
    "version" : "1.1.3"
  },
  {
    "body" : "### Changes\r\n\r\n- The **`generate-manual`** plugin now defaults to creating single page manuals. The `--single-page` flag has been replaced with `--multi-page` to restore the previous default functionality. (#472)\r\n\r\n  *Migration:* Update scripts that invoked **`generate-manual`** without `--single-page` to include `--multi-page` and update scripts that invoked **`generate-manual`** with `--single-page` to omit the flag.\r\n\r\n- The \"experimental\" prefix from the **`generate-manual`** plugin has been removed. (#475)\r\n\r\n  *Migration:* Update scripts to invoke the **`generate-manual`** plugin via `swift package generate-manual` instead of `swift package plugin experimental-generate-manual`.\r\n\r\n### Fixes\r\n\r\n- The **`generate-manual`** plugin is correctly declared as a product, making the plugin visible to clients. (#456)\r\n- The **`generate-manual`** plugin's `--authors` arguments are now correctly passed to the underlying generation tool. (#471)\r\n- Manuals generated by the **`generate-manual`** plugin now include the option's value names and do not include value names for flags. (#473)\r\n- Built-in flags such as `--help` and `--version` are now correctly marked as optional fixing some generated content which indicated the flags are always required. (#474)\r\n- Value descriptions are now correctly derived for types which are `ExpressibleByArgument` and `RawRepresentable` by `String`. Help menus will now display valid default values for such types. (#476)\r\n\r\nThe 1.1.4 release includes contributions from @ian-twilightcoder, @MarcoEidinger, and @rauhul. Thank you!\r\n",
    "createdAt" : "2022-08-27T12:30:47+09:00",
    "fetchedFromAPIAt" : "2022-08-28T09:58:01+09:00",
    "id" : "RE_kwDODmuHYc4EgImk",
    "owner" : "apple",
    "publishedAt" : "2022-08-27T12:34:40+09:00",
    "repository" : "swift-argument-parser",
    "title" : "ArgumentParser 1.1.4",
    "url" : "https://github.com/apple/swift-argument-parser/releases/tag/1.1.4",
    "version" : "1.1.4"
  },
  {
    "body" : "### Changes\r\n\r\n- Documentation is now primarily hosted at the [Swift Package Index](https://swiftpackageindex.com/apple/swift-argument-parser).\r\n\r\n### Fixes\r\n\r\n- `exit(_:)` no longer causes infinite recursion on the WASI platform. (#520)\r\n- Completion scripts for `fish` now provide completions after a non-hyphen-prefixed argument has been provided. (#535) \r\n- Overload selection for custom `ExpressibleByArgument` types has been improved. (#522)\r\n- The usage string for `.postTerminator` arguments now includes the required terminator (`--`). (#542)\r\n- Documentation and testing fixes and improvements.\r\n\r\nThe 1.2.1 release includes contributions from @Chamepp, @kkk669, @mtj0928, @natecook1000, @rauhul, @rickrizzo, @TiagoMaiaL, and @yim-lee. Thank you!\r\n",
    "createdAt" : "2023-01-14T04:15:14+09:00",
    "fetchedFromAPIAt" : "2023-01-14T09:42:11+09:00",
    "id" : "RE_kwDODmuHYc4FTJTz",
    "owner" : "apple",
    "publishedAt" : "2023-01-14T04:19:24+09:00",
    "repository" : "swift-argument-parser",
    "title" : "ArgumentParser 1.2.1",
    "url" : "https://github.com/apple/swift-argument-parser/releases/tag/1.2.1",
    "version" : "1.2.1"
  },
  {
    "body" : "### Fixes\r\n\r\n- Arguments with the `.allUnrecognized` parsing strategy no longer consume built-in flags like `--help` and `--version`. (#550)\r\n- Fixes an issue introduced in version 1.2.0 where properties with underscored names couldn't be parsed. (#548)\r\n- Improves the error message for cases where platform availability causes the synchronous `ParsableCommand.main()` static method to be run on an `AsyncParsableCommand` type. (#547)\r\n",
    "createdAt" : "2023-02-10T02:25:51+09:00",
    "fetchedFromAPIAt" : "2023-02-11T23:53:40+09:00",
    "id" : "RE_kwDODmuHYc4FeqCi",
    "owner" : "apple",
    "publishedAt" : "2023-02-10T02:27:47+09:00",
    "repository" : "swift-argument-parser",
    "title" : "ArgumentParser 1.2.2",
    "url" : "https://github.com/apple/swift-argument-parser/releases/tag/1.2.2",
    "version" : "1.2.2"
  },
  {
    "body" : "### Additions\r\n\r\n- You can now use ArgumentParser with Musl libc. (#574)\r\n\r\n### Fixes\r\n\r\n- Fixes a bug where single-page manuals did not include command abstracts for\r\n  subcommands. (#552)\r\n- Fixes a bug where non-optional properties in ParsableCommands could cause\r\n  ArgumentParser to crash. You can now include properties like dictionaries in\r\n  ParsableCommands without issue. (#554)\r\n- Fixes a configuration issue which would cause `ArgumentParserTestHelpers` to\r\n  fail to link when building for Windows. (#579)\r\n\r\nThe 1.2.3 release includes contributions from @compnerd, @gwynne,\r\n@MaxDesiatov, @natecook1000, and @rauhul. Thank you!",
    "createdAt" : "2023-08-16T04:01:35+09:00",
    "fetchedFromAPIAt" : "2023-09-06T01:58:35+09:00",
    "id" : "RE_kwDODmuHYc4G_qPq",
    "owner" : "apple",
    "publishedAt" : "2023-08-16T04:04:53+09:00",
    "repository" : "swift-argument-parser",
    "title" : "ArgumentParser 1.2.3",
    "url" : "https://github.com/apple/swift-argument-parser/releases/tag/1.2.3",
    "version" : "1.2.3"
  },
  {
    "body" : "### Changes\r\n\r\n- The `@Option`, `@Argument`, `@Flag`, and `@OptionGroup` property wrappers now conditionally conform to `Sendable` when the wrapper's `Value` type conforms. With this change, you can mark `ParsableCommand` types as `Sendable` when you want to be able to pass a parsed command across concurrent contexts. (#582)\r\n\r\n   *Migration:* Users that aren't ready to resolve sendability warnings can add the `@preconcurrency` attribute to `import ArgumentParser` statements.\r\n\r\n- To support migration to `Sendable` annotation, the minimum Swift version for `swift-argument-parser` has been increased to Swift 5.7. Users of older Swift versions will be able to continue using version 1.2.3 of the library. (#582)\r\n\r\n### Additions\r\n\r\n- Help screens now include possible options for `ExpressibleByArgument` types with non empty `allValueStrings`. Types also conforming to `CaseIterable` do not need to manually implement `allValueStrings`, instead it is derived from `allCases`. (#594)\r\n\r\n### Fixes\r\n\r\n- The titles for nested option groups are preserved when embedded into commands without specifying a new title. (#592)\r\n- When wrapping help and error messages, the library now uses the `COLUMNS` environment variable when set, instead of immediately falling back to 80 columns. (#596)\r\n- Bash completion scripts now respect the extensions given in a `.file(...)` completion kind. (#590)\r\n- Bash completion scripts now properly escape command names that include hyphens. (#573)\r\n- Documentation improvements. (#572, #565, #602)\r\n\r\nThe 1.2.3 release includes contributions from @Alkenso, @compnerd, @gwynne,\r\n@kennyyork, @natecook1000, @rauhul, @robertmryan, and @vlm. Thank you!\r\n",
    "createdAt" : "2023-12-07T02:30:44+09:00",
    "fetchedFromAPIAt" : "2024-01-23T13:39:16+09:00",
    "id" : "RE_kwDODmuHYc4H7OWh",
    "owner" : "apple",
    "publishedAt" : "2023-12-07T14:27:53+09:00",
    "repository" : "swift-argument-parser",
    "title" : "ArgumentParser 1.3.0",
    "url" : "https://github.com/apple/swift-argument-parser/releases/tag/1.3.0",
    "version" : "1.3.0"
  }
]