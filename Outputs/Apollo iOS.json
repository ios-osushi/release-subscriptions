[
  {
    "body" : "- **POSSIBLY BREAKING**: Updated behavior of `URLSessionClient` when it's been invalidated to throw an error instead of crashing. If you were relying on this failing loudly before, please be aware it's going to fail a lot more quietly now. ([#1489](https://github.com/apollographql/apollo-ios/pull/1489))\r\n- Improved performance of `loadRecords` for the SQLite cache. ([#1519](https://github.com/apollographql/apollo-ios/pull/1519))\r\n- Added support for use of `Apollo` as a dynamic lib. ([#1483](https://github.com/apollographql/apollo-ios/pull/1483))\r\n- Updated the legacy CLI to `2.31.0`. ([#1510](https://github.com/apollographql/apollo-ios/pull/1510))\r\n- Fixed some bugs in our `JSONSerialization` handling. ([#1478](https://github.com/apollographql/apollo-ios/pull/1478))\r\n- Fixed an issue with callback queue handling for websockets. ([#1507](https://github.com/apollographql/apollo-ios/pull/1507))\r\n- Fixed an issue with callback queue handling for errors. ([#1468](https://github.com/apollographql/apollo-ios/pull/1468))\r\n- Removed a redundant `nil` check while clearing the cache. ([#1508](https://github.com/apollographql/apollo-ios/pull/1508))\r\n",
    "createdAt" : "2020-11-19T05:00:39+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTM0MTM4NDA1",
    "owner" : "apollographql",
    "publishedAt" : "2020-11-19T05:02:16+09:00",
    "repository" : "apollo-ios",
    "title" : "Version 0.37.0",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/0.37.0",
    "version" : "0.37.0"
  },
  {
    "body" : "- **BREAKING**: We've made some significant (~4x) performance improvements to the cache and eliminated _all_ our known Thread Sanitizer issues by removing some overly agressive multithreading and our internal Promises implementation. ([#1531](https://github.com/apollographql/apollo-ios/pull/1531)) Related Changes: \r\n    - **POSSIBLY BREAKING**: These improvements caused changes in our `NormalizedCache` and `ApolloClientProtocol` protocols, so if you're implementing these yourself, you'll need to update. \r\n    - **BREAKING**: Removed the `loadRecords(forKeys:)` method on `ReadTransaction`. We'd recommended that you use either `read` or `readObject` with the transaction, but if you were using `loadRecords`, you will need to shift to those other methds.\r\n    - **NEW**: `ApolloStore`'s `load(query:resultHandler:)` method now also takes an optional callback queue. \r\n- **NEW**: Added the ability to say whether the results from a mutation should be published to the store are not. This is a boolean value which defeaults to `true`, to match existing behavior. ([#1521](https://github.com/apollographql/apollo-ios/pull/1521))\r\n- **BREAKING**: The setter for `Atomic`'s `value` is no longer public to prevent accidental misuse. If you were using this, use the `mutate` method instead to ensure the thread lock works properly. ([#1538](https://github.com/apollographql/apollo-ios/pull/1538))",
    "createdAt" : "2020-12-02T07:38:46+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTM0NjYwMDc3",
    "owner" : "apollographql",
    "publishedAt" : "2020-12-02T07:40:30+09:00",
    "repository" : "apollo-ios",
    "title" : "Version 0.38.0",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/0.38.0",
    "version" : "0.38.0"
  },
  {
    "body" : "- Updates `apollo-tooling` version to include a bugfix there. ([#1554](https://github.com/apollographql/apollo-ios/pull/1554))",
    "createdAt" : "2020-12-03T12:22:00+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTM0NzMwNzE5",
    "owner" : "apollographql",
    "publishedAt" : "2020-12-03T12:23:12+09:00",
    "repository" : "apollo-ios",
    "title" : "Version 0.38.1",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/0.38.1",
    "version" : "0.38.1"
  },
  {
    "body" : "- Updates a dependency used for Experimental Swift Codegen to use a version to fix an issue with resolution failures ",
    "createdAt" : "2020-12-04T08:46:14+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTM0Nzk5MjE1",
    "owner" : "apollographql",
    "publishedAt" : "2020-12-04T10:14:30+09:00",
    "repository" : "apollo-ios",
    "title" : "Version 0.38.2",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/0.38.2",
    "version" : "0.38.2"
  },
  {
    "body" : "- Fixes an issue that could cause callbacks to fail if a `retry` was performed in an `additionalErrorInterceptor`. ([#1563](https://github.com/apollographql/apollo-ios/pull/1563))",
    "createdAt" : "2020-12-08T10:52:25+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTM0OTYxNDQ5",
    "owner" : "apollographql",
    "publishedAt" : "2020-12-08T12:37:32+09:00",
    "repository" : "apollo-ios",
    "title" : "Version 0.38.3",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/0.38.3",
    "version" : "0.38.3"
  },
  {
    "body" : "- **POSSIBLY BREAKING**: Updated `swift-tools` version to 5.3, and added a fallback version of `Package.swift` for 5.2. ([#1584](https://github.com/apollographql/apollo-ios/pull/1584))\r\n- **BREAKING**, technically: Switched `cachePolicy` to a `var` on `HTTPRequest`. This makes it possible for retries to use a different cache policy, such as when an error has occurred at the network level and you want to fall back to showing what's in the cache without retrying the network call. ([#1569](https://github.com/apollographql/apollo-ios/pull/1569))\r\n- Added validation in Swift Codegen wrapper that a URL passed in for `singleFile` code generation is a `.swift` file and a URL passed in for `multipleFiles` code generation is a folder. ([#1580](https://github.com/apollographql/apollo-ios/pull/1580))",
    "createdAt" : "2020-12-25T04:01:19+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTM1NzA3MDU3",
    "owner" : "apollographql",
    "publishedAt" : "2020-12-25T04:03:53+09:00",
    "repository" : "apollo-ios",
    "title" : "Version 0.39.0",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/0.39.0",
    "version" : "0.39.0"
  },
  {
    "body" : "- **BREAKING**: Dropped support for iOS/tvOS < 12, watchOS < 5, and macOS < 10.14. This also involved removing a couple of public functions that were workarounds for support for lower versions. ([#1605](https://github.com/apollographql/apollo-ios/pull/1605))\r\n- Updated the typescript CLI to version `2.32.1`. There may be some structural changes to generated code but it should not actually break anything. Please file bugs immediately if it does. ([#1618](https://github.com/apollographql/apollo-ios/pull/1618))",
    "createdAt" : "2021-01-12T06:06:09+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTM2MjQ4MzY4",
    "owner" : "apollographql",
    "publishedAt" : "2021-01-12T06:07:19+09:00",
    "repository" : "apollo-ios",
    "title" : "Version 0.40.0",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/0.40.0",
    "version" : "0.40.0"
  },
  {
    "body" : "- **BREAKING**: Fixed an issue in which `UploadRequests` were not getting headers added via the `RequestChainNetworkTransport`'s `additionalHeaders`. Please note that if you've subclassed the RCNT, you'll need to update your overrides since we had to add a parameter. ([#1644](https://github.com/apollographql/apollo-ios/pull/1644))\r\n- Stopped `GET` requests from sending a `Content-Type` header, which could cause servers not configured to ignore that header when the body is empty to freak out. ([#1649](https://github.com/apollographql/apollo-ios/pull/1649))",
    "createdAt" : "2021-02-03T12:15:09+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTM3MjczMDA3",
    "owner" : "apollographql",
    "publishedAt" : "2021-02-03T12:15:48+09:00",
    "repository" : "apollo-ios",
    "title" : "Version 0.41.0",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/0.41.0",
    "version" : "0.41.0"
  },
  {
    "body" : "- **BREAKING**: Finally updates our `Starscream` dependency to 4.0.x. Note that due to SOCKS proxy support being removed from `Starscream`, we've correspondeingly removed such support.([#1659](https://github.com/apollographql/apollo-ios/pull/1659))\r\n- **BREAKING**, but only to Swift Scripting: Updated `ApolloSchemaOptions` to more clearly handle introspection (ie, from a URL) vs registry (ie, from Apollo Studio) requests by using an enum. If you were passing in an `endpointURL` previously, you need to use the `.introspection` enum value going forward. Also changed the name of the field to match the new type. ([#1691](https://github.com/apollographql/apollo-ios/pull/1691))\r\n- **BREAKING**: Removed `CoadableParsingInterceptor` and related code designed for new codegen (which is still in progress) since we were wildly over-optimistic on how quickly we'd be using it. ([#1670](https://github.com/apollographql/apollo-ios/pull/1670))\r\n- Fixed an issue where tasks that were in the `canceling` state could trigger a `No data found for task` assertion failure. ([#1677](https://github.com/apollographql/apollo-ios/pull/1677))\r\n- Fixed an issue with encoding `+` in `GET` requests. ([#1653](https://github.com/apollographql/apollo-ios/pull/1653))\r\n- Fixed an issue where creating `GET` requests removed existing query params from the URL. ([#1687](https://github.com/apollographql/apollo-ios/pull/1687))\r\n- Prevented a retain cycle during web socket reconnection. ([#1674](https://github.com/apollographql/apollo-ios/pull/1674))\r\n- Added better handling for calling `cancel` on a `RequestChain` which has already been cancelled. ([#1679](https://github.com/apollographql/apollo-ios/pull/1679))",
    "createdAt" : "2021-03-03T10:32:07+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTM5MTU1NDA0",
    "owner" : "apollographql",
    "publishedAt" : "2021-03-03T10:36:46+09:00",
    "repository" : "apollo-ios",
    "title" : "Version 0.42.0",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/0.42.0",
    "version" : "0.42.0"
  },
  {
    "body" : "- **SPECTACULARLY BREAKING**: As noted in the beta and RC release notes, the networking stack for HTTP requests has been completely rewritten. This is described in great detail in the [RFC for the networking changes](https://github.com/apollographql/apollo-ios/issues/1340), as well as the [updated documentation for Advanced Client Creation](https://www.apollographql.com/docs/ios/initialization/#advanced-client-creation) and the [updated tutorial section on setting up authentication](https://www.apollographql.com/docs/ios/tutorial/tutorial-mutations/). Thank you all for the excellent feedback and looking forward to hearing about the cool stuff you're able to build with this! ([#1386](https://github.com/apollographql/apollo-ios/pull/1386)) \r\n- **REMINDER**: If you're using Carthage with Xcode 12, please make sure you're using the workaround script as outlined in the [release notes for `0.33.0`](https://github.com/apollographql/apollo-ios/releases/tag/0.33.0).",
    "createdAt" : "2020-09-29T13:11:24+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTMxOTE1OTQ4",
    "owner" : "apollographql",
    "publishedAt" : "2020-09-29T13:18:39+09:00",
    "repository" : "apollo-ios",
    "title" : "Version 0.34.0",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/0.34.0",
    "version" : "0.34.0"
  },
  {
    "body" : "- Fixes an issue that would cause headers to get lost when sending with `useGETForQueries`. ([#1420](https://github.com/apollographql/apollo-ios/pull/1420))",
    "createdAt" : "2020-10-01T05:23:00+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTMyMDcyMjg1",
    "owner" : "apollographql",
    "publishedAt" : "2020-10-02T08:45:16+09:00",
    "repository" : "apollo-ios",
    "title" : "Version 0.34.1",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/0.34.1",
    "version" : "0.34.1"
  },
  {
    "body" : "- **BREAKING**: Removed the now-unused-in-the-SDK `GraphQLHTTPResponseError` type. If you were relying on this class, please copy it out of v0.34.1. ([#1437](https://github.com/apollographql/apollo-ios/pull/1437))\r\n- **BREAKING**: Removed default parameters from `RequestBodyCreator`'s default implementation to fix an issue where when default parameters were passed, the compiler would always select the default implementation even if a full alternate implementation was provided. ([#1450](https://github.com/apollographql/apollo-ios/pull/1450))\r\n- Removed unnecessary manual task clearing when invalidating a URLSession. ([#1443](https://github.com/apollographql/apollo-ios/pull/1443))",
    "createdAt" : "2020-10-16T13:38:40+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTMyNjUzNzAw",
    "owner" : "apollographql",
    "publishedAt" : "2020-10-16T13:40:13+09:00",
    "repository" : "apollo-ios",
    "title" : "Version 0.35.0",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/0.35.0",
    "version" : "0.35.0"
  },
  {
    "body" : "- **POSSIBLY BREAKING**: We removed some default parameters for the `ApolloStore` from `ApolloClient` and `LegacyInterceptorProvider` to prevent an issue where developers could accidentally create these objects with different caches. ([#1461](https://github.com/apollographql/apollo-ios/pull/1461))\r\n- Added a new parameter to allow the option to not automatically connect a websocket on initialization. ([#1458](https://github.com/apollographql/apollo-ios/pull/1458))",
    "createdAt" : "2020-10-21T06:19:43+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTMyODM1ODM4",
    "owner" : "apollographql",
    "publishedAt" : "2020-10-21T06:53:01+09:00",
    "repository" : "apollo-ios",
    "title" : "Version 0.36.0",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/0.36.0",
    "version" : "0.36.0"
  },
  {
    "body" : "- **BREAKING**: Split `ApolloCore` into two more granular libraries, `ApolloAPI` (which will contain the parts necessary to compile generated code) and `ApolloUtils` (which will contain code shared between `Apollo` and `ApolloCodegenLib`). If you were previously importing `ApolloCore`, in most places you will need to import `ApolloUtils`. If you're using Carthage, you will need to remove the old `ApolloCore` xcframework and replace it with the two `ApolloAPI` and `ApolloUtils` frameworks. ([#1817](https://github.com/apollographql/apollo-ios/pull/1817))\r\n- Fixed a retain cycle in `GraphQLQueryWatcher`. Thanks @gpambrozio! (#1826)\r\n- Fixed a stray CocoaPods warning. ([#1769](https://github.com/apollographql/apollo-ios/pull/1769))\r\n- Updated the Typescript CLI to version 2.32.13. ([#1773](https://github.com/apollographql/apollo-ios/pull/1773)) \r\n- Added the ability to specify a `cachePolicy` when calling `refresh` on a `GraphQLWatcher`. ([#1802](https://github.com/apollographql/apollo-ios/pull/1802))\r\n",
    "createdAt" : "2021-06-17T06:07:38+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTQ0NzU2MTcx",
    "owner" : "apollographql",
    "publishedAt" : "2021-06-17T06:10:43+09:00",
    "repository" : "apollo-ios",
    "title" : "Version 0.44.0",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/0.44.0",
    "version" : "0.44.0"
  },
  {
    "body" : "- **Breaking - Downgraded from Starscream v4 to v3!** After upgrading to Starscream 4.0, a lot of our users started to experience crashes while using web sockets. We've decided to revert to the more stable Starscream version 3. In order to fix a few known bugs in Starscream 3, we have made a fork of Starscream that Apollo will depend on going forward. In preparation for moving to Apple WebSockets in the future, we have also fully inverted the dependency on Starscream. Between these two changes, a lot of breaking changes to our Web Socket API have been made:\r\n  - The `ApolloWebSocketClient` protocol was removed and replaced with `WebSocketClient`.\r\n  - `WebSocketClient` does not rely directly on Starscream anymore and has been streamlined for easier conformance.\r\n  - `ApolloWebSocket`, the default implementation of the `WebSocketClient` has been replaced with `DefaultWebSocket`. This implementation uses Starscream, but implementations using other websocket libraries can now be created and used with no need for Starscream.\r\n  - `WebSocketClientDelegate` replaces direct dependency on `Starscream.WebSocketDelegate` for delegates.\r\n- **Breaking:** Renamed some of the request chain interceptors object:\r\n  - `LegacyInterceptorProvider` -> `DefaultInterceptorProvider`\r\n  - `LegacyCacheReadInterceptor` -> `CacheReadInterceptor`\r\n  - `LegacyCacheWriteInterceptor` -> `CacheWriteInterceptor`\r\n  - `LegacyParsingInterceptor` -> `JSONResponseParsingInterceptor`\r\n- **Breaking:** `WebSocketTransport` is now initialized with an `ApolloWebSocket` (or other object conforming to the `ApolloWebSocketClient` protocol.) Previously, the initializer took in the necessary parameters to create the web socket internally. This provides better dependency injection capabilities and makes testing easier.\r\n- Removed class constraint on `ApolloInterceptor` and converted to structs for all interceptors that could be structs instead of classes.\r\n- Added `removeRecords(matching pattern: CacheKey)` function to the normalized cache.",
    "createdAt" : "2021-07-07T08:11:43+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTQ1ODAzNjA3",
    "owner" : "apollographql",
    "publishedAt" : "2021-07-07T08:14:16+09:00",
    "repository" : "apollo-ios",
    "title" : "Version 0.45.0",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/0.45.0",
    "version" : "0.45.0"
  },
  {
    "body" : "- **Removed - Swift experimental codegen:** The [experimental Swift code generation](https://github.com/apollographql/apollo-ios/blob/0.45.0/Sources/ApolloCodegenLib/ApolloCodegenOptions.swift#L21) has been removed from `main` and will instead become available in the [`release/1.0-alpha-incubating` branch](https://github.com/apollographql/apollo-ios/tree/release/1.0-alpha-incubating) until a 1.0 release. [#1873](https://github.com/apollographql/apollo-ios/pull/1873)\r\n- **Fixed - [Query watcher not being called when the cache is updated on an element by another query/subscrition/mutation](https://github.com/apollographql/apollo-ios/issues/1422):** The long-term solution is to integrate web sockets into the request chain but this is an interim fix that allows `WebSocketTransport` to be configured with a store to update the cache when receiving data. This should not break any workarounds others have already implemented. [#1889](https://github.com/apollographql/apollo-ios/pull/1889), [#1892](https://github.com/apollographql/apollo-ios/pull/1892) - _Thank you to [tgyhlsb](https://github.com/tgyhlsb) for the contribution!_",
    "createdAt" : "2021-08-10T05:49:53+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTQ3NTY2NDMy",
    "owner" : "apollographql",
    "publishedAt" : "2021-08-10T06:34:01+09:00",
    "repository" : "apollo-ios",
    "title" : "Version 0.46.0",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/0.46.0",
    "version" : "0.46.0"
  },
  {
    "body" : "- **Breaking - Removed Starscream dependency:** Due to dependency management conflicts it has become easier for us to maintain our WebSockets as part of the `ApolloWebSockets` target instead of an external dependency on a forked version of Starscream. [#1906](https://github.com/apollographql/apollo-ios/pull/1906)\r\n  - Removed Starscream as an external dependency in Cocoapods and Swift Package Manager.\r\n  - The `DefaultWebSocket` implementation has been replaced with `WebSocket`.\r\n- **Fixed - `clearCache` not using the provided callback queue:** `ApolloClient` was not passing the provided callback queue to `ApolloStore` and therefore the completion block for `clearCache` was being called on the main queue. [#1904](https://github.com/apollographql/apollo-ios/pull/1904), [#1901](https://github.com/apollographql/apollo-ios/pull/1901) - _Thank you to [Isaac Ressler](https://github.com/isaacressler) for the contribution!_\r\n- **Removed - Swift playground:** The playground has been moved to a [separate repository](https://github.com/apollographql/apollo-client-swift-playground). [#1905](https://github.com/apollographql/apollo-ios/pull/1905)",
    "createdAt" : "2021-08-17T13:13:51+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTQ3OTQ4NTk3",
    "owner" : "apollographql",
    "publishedAt" : "2021-08-17T13:24:06+09:00",
    "repository" : "apollo-ios",
    "title" : "Version 0.47.0",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/0.47.0",
    "version" : "0.47.0"
  },
  {
    "body" : "- **Fixed - Websocket default implementation not included in `ApolloWebSocket` via Cocoapods:** _Thank you to [ketenshi](https://github.com/ketenshi) for the contribution!_",
    "createdAt" : "2021-08-18T05:08:02+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTQ4MDAyMDg1",
    "owner" : "apollographql",
    "publishedAt" : "2021-08-18T05:09:24+09:00",
    "repository" : "apollo-ios",
    "title" : "Version 0.47.1",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/0.47.1",
    "version" : "0.47.1"
  },
  {
    "body" : "- **Customizable subscription message identifiers:** The `WebSocketTransport` initializer can be configured with a subclass of `OperationMessageIdCreator` to provide a unique identifier per request. The default implementation is `ApolloSequencedOperationMessageIdCreator` and retains the current behavior of sequential message numbering. [#1919](https://github.com/apollographql/apollo-ios/pull/1919) - _Thank you to [Clark McNally](https://github.com/cmcnally-beachbody) for the contribution!_\r\n- **AWS AppSync Compatibility:** Apollo-ios will now correctly handle the `start_ack` message that AWS AppSync servers respond with when a subscription is requested. [#1919](https://github.com/apollographql/apollo-ios/pull/1919) - _Thank you to [Clark McNally](https://github.com/cmcnally-beachbody) for the contribution!_\r\n- **Updated to version 2.33.6 of the Apollo CLI:** Applies some new vulnerability patches to the CLI, but should not change any output. [#1929](https://github.com/apollographql/apollo-ios/pull/1929)\r\n- **Improved documentation:** Clarification of cache normalization concepts. [#1710](https://github.com/apollographql/apollo-ios/pull/1710) - _Thank you to [Daniel Morgan](https://github.com/morgz) for the contribution!_",
    "createdAt" : "2021-09-03T05:02:39+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTQ4OTIyMDMx",
    "owner" : "apollographql",
    "publishedAt" : "2021-09-03T05:36:21+09:00",
    "repository" : "apollo-ios",
    "title" : "Version 0.48.0",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/0.48.0",
    "version" : "0.48.0"
  },
  {
    "body" : "- **BREAKING** (or hopefully, fixing): We removed our test libraries from our `Package.swift` file since we're not using it to run tests directly at this time. This prevents SPM from trying to resolve test dependencies that are not actually used in the library, which should reduce any version conflicts. However, if you were using any of our test libs in an unsupported fashion, these will no longer be directly available. ([#1745](https://github.com/apollographql/apollo-ios/pull/1745))\r\n- Fixed an issue where when `Starscream` returned multiple errors in close succession, an exponential number of web socket reconnections could be created. ([#1762](https://github.com/apollographql/apollo-ios/pull/1762))\r\n- Updated `class` constraints to `AnyObject` constraints, which should silence a few warnings in 12.5 and be more forward compatible. ([#1733](https://github.com/apollographql/apollo-ios/pull/1733))\r\n- Added the ability to specify a callback queue for the result handler of `GraphQLWatcher`. ([#1723](https://github.com/apollographql/apollo-ios/pull/1723))\r\n- Fixed a crash when closing a web socket connection and re-opening it immediately. ([#1740](https://github.com/apollographql/apollo-ios/pull/1740))\r\n- You can now skip auto-reconnection for updating the header values and connecting payload in `ApolloWebSocket`. ([#1759](https://github.com/apollographql/apollo-ios/pull/1759))\r\n- Now avoids the `?` when generating a `GET` URL if `queryItems` is empty. ([#1729](https://github.com/apollographql/apollo-ios/pull/1729))\r\n- Updated use of the `default` fetch policy to include fetch and watch. Note that under the hood, this does not change what fetch policy was pointed to at this time, it just centralizes the logic. ([#1737](https://github.com/apollographql/apollo-ios/pull/1737))",
    "createdAt" : "2021-04-28T02:09:38+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "MDc6UmVsZWFzZTQyMDg4MDg0",
    "owner" : "apollographql",
    "publishedAt" : "2021-04-28T02:15:26+09:00",
    "repository" : "apollo-ios",
    "title" : "Version 0.43.0",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/0.43.0",
    "version" : "0.43.0"
  },
  {
    "body" : "- **Breaking - Schema download is now Swift-based:** The dependency on the Apollo CLI (Typescript-based) for schema downloading has been removed. Schema downloading is now Swift-based, outputs GraphQL SDL (Schema Definition Language) by default, and is maintainable/extensible within apollo-ios with full [API documentation](https://www.apollographql.com/docs/ios/api/ApolloCodegenLib/structs/ApolloSchemaDownloader/). This is a breaking change because some of the API signatures have changed. [Swift scripting](https://www.apollographql.com/docs/ios/swift-scripting/) offers a convenient way to perform certain operations that would otherwise require the command line - it's worth a look if you haven't tried it yet. [#1935](https://github.com/apollographql/apollo-ios/pull/1935)",
    "createdAt" : "2021-09-22T03:14:58+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "RE_kwDOA9NCTc4C-wiF",
    "owner" : "apollographql",
    "publishedAt" : "2021-09-22T03:21:50+09:00",
    "repository" : "apollo-ios",
    "title" : "Version 0.49.0",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/0.49.0",
    "version" : "0.49.0"
  },
  {
    "body" : "- **`ApolloSchemaDownloadConfiguration.HTTPHeader` initializer was not public**: The struct initializer that Swift automatically generates is marked with the `internal` access level, which meant that custom HTTP headers could not be added to an instance of `ApolloSchemaDownloadConfiguration`. [#1962](https://github.com/apollographql/apollo-ios/pull/1962) - _Thank you to [Nikolai Sivertsen](https://github.com/nsivertsen) for the contribution!_\r\n- **Documentation update**: Fixed an inline code block that had specified language where such specification is not supported. [#1954](https://github.com/apollographql/apollo-ios/pull/1954) - _Thank you to [Kim Røen](https://github.com/kimroen) for the contribution!_\r\n- **Fix - ApolloCodegenOptions could not find schema input file**: - If you created `ApolloSchemaDownloadConfiguration` and `ApolloCodegenOptions` objects using only output folders the default output filename for the schema download was different from the default schema input filename for codegen. [#1968](https://github.com/apollographql/apollo-ios/pull/1968) - _Thank you to [Arnaud Coomans](https://github.com/acoomans) for finding this issue!_",
    "createdAt" : "2021-09-25T07:16:16+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "RE_kwDOA9NCTc4C_o67",
    "owner" : "apollographql",
    "publishedAt" : "2021-09-25T07:20:24+09:00",
    "repository" : "apollo-ios",
    "title" : "Version 0.49.1",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/0.49.1",
    "version" : "0.49.1"
  },
  {
    "body" : "This is the third Alpha Release of Apollo iOS 1.0. This first major version will include a new code generation engine, better generated models, and many syntax and performance improvements across the entire library. The primary goal of Apollo iOS 1.0 is to stabilize the API of the model layer and provide a foundation for future feature additions and evolution of the library.\r\n\r\n* **Include/Skip Directives are now supported!**\r\n  * Adding `@include/@skip` directives to fields, inline fragments, or fragment spreads will now generate code that respects the optionality of these conditionally included selections.\r\n* **Changed - Generated TypeCase renamed to InlineFragment** These are now used for both type cases and inline fragments that are conditionally included using `@include/@skip` directives. \r\n* **Custom Scalars are now supported!**\r\n  * Template Files will be generated for custom scalars. The template files `typealias` each custom scalar to a `String` by default. These generated files can be edited to provide custom functionality for advanced custom scalars. Custom scalar template files that have been edited will not be overwritten on later code generation executions.    \r\n* **Improved multi-module support** \r\n  * Including your generated code using package managers other than SPM can be done using the `.other` option for `moduleType` in your code generation configuration.  \r\n* **Nil Coalescing Operator added to `GraphQLNullable`**\r\n  * This allows for optional variables to easily be used with `GraphQLNullable` parameters and a default value\r\n\r\n```swift\r\nvar myVar: GraphQLNullable<String>\r\nlet optionalString: String?\r\n\r\n// Before\r\nmyVar = optionalString.map { .some($0) } ?? .none\r\n\r\n// After\r\nmyVar = optionalString ?? .none\r\n```\r\n* **Fixed - `fragments` not accessible on generated `SelectionSets`.**\r\n* **Fixed - `__typename` is now added to all operation and fragment definitions.**\r\n* **Fixed - Missing Generated Interface Types** \r\n  * Interface types that were only referenced as an implemented interface of a referenced concrete type were not being generated previously.\r\n",
    "createdAt" : "2022-04-12T09:33:17+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "RE_kwDOA9NCTc4D00QF",
    "owner" : "apollographql",
    "publishedAt" : "2022-04-12T09:58:42+09:00",
    "repository" : "apollo-ios",
    "title" : "1.0.0 Alpha 3",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.0.0-alpha.3",
    "version" : "1.0.0-alpha.3"
  },
  {
    "body" : "This is the fourth Alpha Release of Apollo iOS 1.0. This first major version will include a new code generation engine, better generated models, and many syntax and performance improvements across the entire library. The primary goal of Apollo iOS 1.0 is to stabilize the API of the model layer and provide a foundation for future feature additions and evolution of the library.\r\n\r\n* **Client Controlled Nullability (CCN) is now supported!**\r\n  * CCN is an experimental new feature addition to GraphQL. This feature allows you to override the optionality of fields from a schema in your client operations. CCN can help you create cleaner generated models that require less optional unwrapping.\r\n  * You can read more about CCN [here](https://github.com/graphql/graphql-spec/issues/867). \r\n  * Because CCN is an experimental feature, the API is subject to change before its final release.\r\n  * Apollo iOS 1.0.0 is the first client to provide support for this new functionality! Huge thanks to [@twof](https://github.com/twof)!\r\n* **Fixed - Names of generated objects are now correctly uppercased.**\r\n* **Fixed - Names of inline fragments with inclusion conditions were sometimes generated incorrectly.**\r\n* **Fixed - `__typename` field is now selected by executor on all entities automatically.**",
    "createdAt" : "2022-04-16T05:37:43+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "RE_kwDOA9NCTc4D2SaN",
    "owner" : "apollographql",
    "publishedAt" : "2022-04-16T05:38:57+09:00",
    "repository" : "apollo-ios",
    "title" : "1.0.0 Alpha 4",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.0.0-alpha.4",
    "version" : "1.0.0-alpha.4"
  },
  {
    "body" : "- **Dropped SPM support for Swift 5.2**: The minimum version of the Swift tools and language compatibilty required to process the SPM manifest is Swift 5.3. This means a minimum of Xcode version 12 is required for Swift Package Manager support. [#1992](https://github.com/apollographql/apollo-ios/pull/1992)\r\n- **Removed unnecessary assertion failure**: The completion handler on `returnResultAsyncIfNeeded` is defined as optional but if not included would cause debug builds to crash with an `assertionFailure` in the case of a `failure` of the `Result`. [#2005](https://github.com/apollographql/apollo-ios/pull/2005) - _Thank you to [Richard Topchii](https://github.com/richardtop) for raising this issue!_\r\n- **`CachePolicy.default` is now a stored property**: It is now easier to configure a different default value for the `CachePolicy` property on any `ApolloClient` instance instead of having to override it in a subclass. [#1998](https://github.com/apollographql/apollo-ios/pull/1998) - _Thank you to [Tiziano Coroneo](https://github.com/TizianoCoroneo) for the contribution!_\r\n- **Exposed `cacheKey` function as `public`**: The access modifier of this function on `GraphQLField` has changed from `internal` to `public`. It is not recommended to rely on internal behaviour of the cache, and this is subject to change in future major versions. [#2014](https://github.com/apollographql/apollo-ios/pull/2014) - _Thank you to [Peter Potrebic](https://github.com/potrebic) for the discussion!_\r\n- **GET method support for `ApolloSchemaDownloader`**: Introspection-based schema downloads can now be queried using a GET request. [#2010](https://github.com/apollographql/apollo-ios/pull/2010) - _Thank you to [Mike Pitre](https://github.com/mikepitre) for the contribution!_\r\n- **Updated to version 2.33.9 of the Apollo CLI**: This update will add `__typename` fields to inline fragments in operations to match the output from the `client:push` CLI command which used for operation safelisting. This should not affect the behaviour of your operations. [#2028](https://github.com/apollographql/apollo-ios/pull/2028).\r\n- **Updated to version 0.13.1 of SQLite.swift**: This update brings in some iOS 14 fixes and new table functionality such as `upsert` and `insertMany`.  [#2015](https://github.com/apollographql/apollo-ios/pull/2015) - _Thank you to [Hesham Salman](https://github.com/Iron-Ham) for the contribution._",
    "createdAt" : "2021-11-18T05:51:58+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "RE_kwDOA9NCTc4DMbpR",
    "owner" : "apollographql",
    "publishedAt" : "2021-11-18T05:54:18+09:00",
    "repository" : "apollo-ios",
    "title" : "Version 0.50.0",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/0.50.0",
    "version" : "0.50.0"
  },
  {
    "body" : "This is the first Alpha Release of Apollo iOS 1.0. This first major version will include a new code generation engine, better generated models, and many syntax and performance improvements across the entire library. The primary goal of Apollo iOS 1.0 is to stabilize the API of the model layer and provide a foundation for future feature additions and evolution of the library.\r\n\r\n## What’s New\r\n\r\n* The size of generated code has been reduced dramatically. In the most complex operations, the generated code can be up to **90% smaller** than in the previous version.\r\n* Generated response objects are more powerful and easier to consume.\r\n    * The response objects now intelligently merge fields from not only their parents, but also other matching sibling fragments.\r\n\r\n```\r\nquery AnimalQuery {\r\n  allAnimals {\r\n    species\r\n    ... on Pet {\r\n      name\r\n    }\r\n    ... on Cat {\r\n      furColor\r\n    }\r\n}\r\n```\r\n\r\nIn the past, the `AsCat` model would have fields for `species`, and `furColor`, but to access the `name` field, you would need to keep a reference to the `AllAnimal` object and call `AsPet.name`. This means that you couldn’t just pass the `AsCat` object to a UI component. \r\n\r\nIn 1.0, because we know that `Cat` implements the `Pet` interface, the `name` field is merged into the `Cat` object. \r\n\r\n*Any property that should exist based on the type of the object will be accessible.* This makes consuming our generated response objects in your applications much easier. This should greatly reduce the need for view models to wrap our generated response objects.\r\n\r\n* The code generation engine is now written in native Swift! This makes it easier for Swift developers to contribute to the project or alter the generated code for their specific needs! In future iterations, we hope to open up the code generation templating API to allow for even easier customization of your generated code!\r\n* Computation of Cache Keys is protocol oriented now. Instead of a single `cacheKeyForObject` closure on your `ApolloClient`, you can implement cache key computation on individual object types with the `CacheKeyProvider` protocol. See [Cache Key Resolution](https://github.com/apollographql/apollo-ios/blob/release/1.0-alpha-incubating/CodegenProposal.md#cache-key-resolution) in the RFC for more information.\r\n\r\n## What’s Next - (Things Not Supported in Alpha 1)\r\n\r\n* **Operation Variables and Field Arguments**\r\n* **@include/@skip Directives**\r\n* **Cocoapods and Carthage Support for Generated Objects**\r\n    * Currently, the generated code supports creating an SPM package you can include as a target in your `Package.swift` file. Cocoapods and Carthage support will be coming soon.\r\n    * In the mean time, you can still generate your operations and manually include the generated code in your project.\r\n* **Automatically Persisted Queries**\r\n* **Cache Mutations**\r\n    * We are re-writing the entire cache mutation system to be easier to work with. Instead of exposing the cache via the operations you have defined, you’ll be able to access the cache through custom generated types that have a view of the entire cache at once. *This means no more writing query operations that are only used for local cache mutations.\r\n\r\n## Feedback we are looking for\r\n\r\nWhile any and all feedback about the API design, structure, and usability of the library is appreciated, this Alpha version version focuses on the new generated operation models. We would love to hear about your experiences with:\r\n\r\n* Generating your models using the SwiftScripts method\r\n* Consuming the new generated models in your application code\r\n    * Are there any use cases that were supported in the previous versions that are not supported or regress in the Alpha? (Other than the known cases listed above that will be supported soon.)\r\n    * Do the new generated models make working with your data easier or more difficult?\r\n    * Do you have specific suggestions for things that can be added or altered in the generated objects to make them more useful?\r\n\r\n## Expected Alpha Roadmap\r\n\r\n* **Operation Variables and Field Arguments**\r\n    * ASAP - Planned for next Alpha release within a week or two.\r\n* **@include/@skip Directives**\r\n    * Next priority after variables and arguments. Maybe the same release, maybe the next release after that\r\n* **Cocoapods and Carthage Support for Generated Objects**\r\n    * Probably a little while out, but shouldn’t be too hard. So maybe after the two above this.\r\n* **Automatically Persisted Queries**\r\n    * This is mostly done, just need to actually figure out how to compute the operation identifier hash and generate the operationIds.json file. This is lower priority though, since not a ton of people use it.\r\n* **Cache Mutations**\r\n    * This is going to take a long time still. We won’t move into Beta until we have the solution for this ready to test, but it’s only about 70% solved so far, and the implementation is not written yet. \r\n    * I’m considering exposing an API to mutate the cache just using the stringly-typed dictionary of data in the mean time, to unblock people from trying out the Alpha in their applications while we solve this. This would be unsafe and not great for production, but should work just fine and be quick and easy to implement as a stop-gap.\r\n\r\n## Installation\r\n\r\nCurrently, only SPM is fully supported. Because the generated models can’t easily be consumed by a Cocoapods project yet, we have not included support for installation of the client with Cocoapods. This will be included in an upcoming release shortly.\r\n\r\n## SPM\r\n\r\n```\r\n.package(name: \"Apollo\",\r\n         url: \"https://github.com/apollographql/apollo-ios.git\", \r\n         from: \"1.0.0-alpha.1\")\r\n```\r\n\r\nRun codegen using the instructions from the [Swift scripting documentation](https://www.apollographql.com/docs/ios/v1.0-(Alpha)/swift-scripting/).\r\n",
    "createdAt" : "2022-02-09T06:07:03+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "RE_kwDOA9NCTc4DhSiE",
    "owner" : "apollographql",
    "publishedAt" : "2022-02-09T06:49:34+09:00",
    "repository" : "apollo-ios",
    "title" : "1.0.0 Alpha 1",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.0.0-alpha.1",
    "version" : "1.0.0-alpha.1"
  },
  {
    "body" : "This is the second Alpha Release of Apollo iOS 1.0. This first major version will include a new code generation engine, better generated models, and many syntax and performance improvements across the entire library. The primary goal of Apollo iOS 1.0 is to stabilize the API of the model layer and provide a foundation for future feature additions and evolution of the library.\r\n\r\n* **Operation Variables and Field Arguments are now supported!**\r\n* **Fixed - Capitalized field names generate code that doesn't compile** [#2167](https://github.com/apollographql/apollo-ios/issues/2167)",
    "createdAt" : "2022-02-23T08:42:03+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "RE_kwDOA9NCTc4DlkeM",
    "owner" : "apollographql",
    "publishedAt" : "2022-02-23T08:43:46+09:00",
    "repository" : "apollo-ios",
    "title" : "1.0.0 Alpha 2",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.0.0-alpha.2",
    "version" : "1.0.0-alpha.2"
  },
  {
    "body" : "- **Allow periods in arguments to be ignored when parsing cacheKeys**: If your query arguments include periods they will no longer cause broken cache keys. This means the cached data for those queries can be correctly found and returned. The caveat with this change though is that if you use a persisted cache, after the upgrade you could see cache misses and the data would be refetched. [#2057](https://github.com/apollographql/apollo-ios/pull/2057) - _Thanks to [Hesham Salman](https://github.com/Iron-Ham) for the contribution._\r\n- **Fixed - [`Sendable` class `JavaScriptError` cannot inherit from another class other than `NSObject`](https://github.com/apollographql/apollo-ios/issues/2146):** Xcode 13.3 introduced some additional requirements for `Error` types and `JavaScriptError` did not conform causing compile errors in `ApolloCodegenLib`. This change disables `Sendable` type checking for `JavaScriptError` while maintaining type-safety across concurrency boundaries. [#2147](https://github.com/apollographql/apollo-ios/pull/2147) - _Thank you to [Tiziano Coroneo](https://github.com/TizianoCoroneo) for the contribution._\r\n- **Fixed - [Watcher using a policy that shouldn't hit the network, can still hit the network](https://github.com/apollographql/apollo-ios/issues/2170):** If the cache policy given to the `watch(query:cachePolicy:)` method of `ApolloClient` was `.returnCacheDataDontFetch` it could still trigger a remote fetch of the query. - _Thank you to [Peter Potrebic](https://github.com/potrebic) for raising the issue._\r\n- **BREAKING CHANGE - [`graphql-ws` Protocol Support](https://github.com/apollographql/apollo-ios/issues/1622):** We've added official support for the [graphql-ws](https://github.com/enisdenjo/graphql-ws) library and its [`graphql-transport-ws`](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md) protocol. This is a breaking change because the `WebSocket` initializers now require you to specify which protocol to use.",
    "createdAt" : "2022-03-01T06:28:17+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "RE_kwDOA9NCTc4DnXb-",
    "owner" : "apollographql",
    "publishedAt" : "2022-03-01T06:32:01+09:00",
    "repository" : "apollo-ios",
    "title" : "Version 0.51.0",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/0.51.0",
    "version" : "0.51.0"
  },
  {
    "body" : "* **Expose request body creation to better support custom interceptors:** Enable lazy access to the request body creation for leverage in custom built interceptors, since JSONRequest.toURLRequest() encapsulates the creation. This enables the GraphQLMap to be accessed without re-creating the body. [#2184](https://github.com/apollographql/apollo-ios/pull/2184) - Thanks to [Rick Fast](https://github.com/rickfast) for the contribution.",
    "createdAt" : "2022-03-08T05:19:06+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "RE_kwDOA9NCTc4DpdJj",
    "owner" : "apollographql",
    "publishedAt" : "2022-03-08T05:21:00+09:00",
    "repository" : "apollo-ios",
    "title" : "Version 0.51.1",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/0.51.1",
    "version" : "0.51.1"
  },
  {
    "body" : "- **Fixed - APQ Retrying Failing in `0.51.1`**: Fixes a bug introduced in the last version that broke APQs. [#2206](https://github.com/apollographql/apollo-ios/pull/2206) - _Thanks to [Kyle Browning](https://github.com/kylebrowning) for bringing this to our attention._",
    "createdAt" : "2022-03-19T04:06:12+09:00",
    "fetchedFromAPIAt" : "2022-04-28T05:24:51+09:00",
    "id" : "RE_kwDOA9NCTc4DtWHX",
    "owner" : "apollographql",
    "publishedAt" : "2022-03-19T04:37:56+09:00",
    "repository" : "apollo-ios",
    "title" : "Version 0.51.2",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/0.51.2",
    "version" : "0.51.2"
  },
  {
    "body" : "#### Fixed\r\n- **Fixed - Convenience initializer for mock objects without fields:** When mock objects did not have any fields a convenience initializer would still be generated causing infinite recursion during initialization. [#2634](https://github.com/apollographql/apollo-ios/pull/2634) _Thank you to [@Gois](https://github.com/Gois) for the contribution!_\r\n- **Fixed - Ambiguous use of operator '??':** When the nil coalescing operator was used on variables without a type the compiler could not determine which one to use. [#2650](https://github.com/apollographql/apollo-ios/pull/2650). _Thanks to [@skreberem](https://github.com/skreberem) for raising the issue._\r\n- **Fixed - Generate library for test mock target:** Previous versions would generate the SPM target for test mocks but not a library to properly import it into your unit tests. [#2638](https://github.com/apollographql/apollo-ios/pull/2638) _Thank you to [@Gois](https://github.com/Gois) for the contribution!_\r\n- **Fixed - Podspec Swift version mismatched with SPM package version:** The Swift version is now the same between the two dependency managers. [#2657](https://github.com/apollographql/apollo-ios/pull/2657)\r\n- **Fixed - Conflicting configuration values:** There is now an error during code generation when the given configuration has conflicting values that cannot be fulfilled. [#2677](https://github.com/apollographql/apollo-ios/pull/2677)\r\n- **Fixed - `DocumentType` namespacing:** The correct module namespacing is now used for `DocumentType` in generated operation code. [#2679](https://github.com/apollographql/apollo-ios/pull/2679)\r\n\r\n#### New\r\n- **New - CLI version checker:** This ensures that the version of the CLI being used to generate Swift code is the same as the version of the Apollo iOS dependency being used. [#2659](https://github.com/apollographql/apollo-ios/issues/2659)\r\n\r\n#### Changed\r\n- **Changed - Removed SPM plug-ins:** The SPM plug-ins for the CLI commands `init`, `fetch-schema`, and `generate` have been removed. There is a new plug-in to install the CLI and the CLI commands should be used from the command line instead. [#2649](https://github.com/apollographql/apollo-ios/pull/2649)\r\n- **Changed - CLI defaults:** The updated default for the output of operation files is now `.inSchemaModule`, and the `init` command now requires a module type to be specified when creating a configuration file. [#2673](https://github.com/apollographql/apollo-ios/pull/2673)",
    "createdAt" : "2022-11-19T08:23:44+09:00",
    "fetchedFromAPIAt" : "2022-11-19T09:53:29+09:00",
    "id" : "RE_kwDOA9NCTc4E-_aC",
    "owner" : "apollographql",
    "publishedAt" : "2022-11-19T08:37:06+09:00",
    "repository" : "apollo-ios",
    "title" : "1.0.4",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.0.4",
    "version" : "1.0.4"
  },
  {
    "body" : "- **Fixed - Generated code produces compile error when accessing `data` dictionary in the `InputDict` struct if the name of the accessed property is `hash`:** Dyanamic Member Lookup has been removed from `InputDict` to prevent potential name clashes. [#2607](https://github.com/apollographql/apollo-ios/pull/2607)\r\n- **Fixed - XCFramework archive builds:** `@inlinable` has been removed from parts of `ApolloAPI` that were preventing xcframework builds with the `BUILD_LIBRARY_FOR_DISTRIBUTION` build setting. [#2613](https://github.com/apollographql/apollo-ios/pull/2613)\r\n- **Fixed - `Variables` type in local cache mutations is not properly namespaced:** The `Variables` type in `LocalCacheMutation` now has the required prefix of `GraphQLOperation` to build successfully. [#2615](https://github.com/apollographql/apollo-ios/pull/2615)\r\n- **Fixed - Return error if no matches to schema or operation search paths:** When a schema file could not be found errors were emitted but they were not indicative of the underlying problem. There is now validation to ensure that at least one match of the schema/operation search paths is found otherwise an error is thrown. [#2618](https://github.com/apollographql/apollo-ios/pull/2618)\r\n- **Fixed - File generation should ignore the `.build`/`.swiftpm`/`.Pods` folders:** If code generation was executed from a path where subfolders contained the apollo-ios repo, it would find internal test schemas and fail. These special folders are now ignored. [#2628](https://github.com/apollographql/apollo-ios/pull/2628)\r\n- **Fixed - Download schema relative to root URL:** Even though a root URL could be provided it was not being used in all schema download logic to output the downloaded schema file to the correct locaiton. This is now fixed. [#2609](https://github.com/apollographql/apollo-ios/pull/2609) _Thanks to [@Anteo95](https://github.com/Anteo95) for the contribution._",
    "createdAt" : "2022-11-02T13:20:07+09:00",
    "fetchedFromAPIAt" : "2022-11-03T09:57:29+09:00",
    "id" : "RE_kwDOA9NCTc4E35bx",
    "owner" : "apollographql",
    "publishedAt" : "2022-11-02T13:22:41+09:00",
    "repository" : "apollo-ios",
    "title" : "1.0.3",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.0.3",
    "version" : "1.0.3"
  },
  {
    "body" : "This is the fifth Alpha Release of Apollo iOS 1.0. This first major version will include a new code generation engine, better generated models, and many syntax and performance improvements across the entire library. The primary goal of Apollo iOS 1.0 is to stabilize the API of the model layer and provide a foundation for future feature additions and evolution of the library.\r\n\r\n* **Test Mocks are now supported!**\r\n  * Test mocks can be generated to make it much easier to create mocks of your generated selection sets for unit testing.\r\n  * This long requested feature can be enabled in your code generation config with the option `config.output.testMocks`.\r\n  * Once you've generated test mocks, import the new `ApolloTestSupport` target (as well as your generated mocks) in your unit tests to start.\r\n  * More documentation for test mocks will be coming soon. In the mean time, here is some example usage: \r\n```swift\r\nlet mockDog = Mock<Dog>()\r\nmock.species = \"Canine\"\r\nmock.height = Mock<Height>(feet: 3, inches: 6)\r\n\r\n// To mock an object in a generated operation:\r\nlet generatedDogMock: AnimalQuery.Data.Animal = AnimalQuery.Data.Animal.mock(from: mockDog)\r\n\r\n// To mock an entire query:\r\nlet queryMock = Mock<Query>()\r\nqueryMock.animals = [mockDog]\r\nlet generatedSelectionSetMock: AnimalQuery.Data = AnimalQuery.Data.mock(from: queryMock)\r\n```\r\n\r\n* `GraphQLNullable` and `GraphQLEnum` from the `ApolloAPI` target are now exported by your generated operations. This prevents you from having to `import ApolloAPI` everywhere that you are consuming your generated models.\r\n* `CacheKeyProvider` now supports grouping multiple types that share key uniqueness.   \r\n* Lots of performance improvements\r\n  * Using `StaticString` instead of `String` in generated files.\r\n  * Added `@inlinable` to many `ApolloAPI` functions consumed by generated code.\r\n  * And more!",
    "createdAt" : "2022-05-20T04:36:28+09:00",
    "fetchedFromAPIAt" : "2022-05-20T09:48:10+09:00",
    "id" : "RE_kwDOA9NCTc4EAzfe",
    "owner" : "apollographql",
    "publishedAt" : "2022-05-20T04:38:29+09:00",
    "repository" : "apollo-ios",
    "title" : "1.0.0 Alpha 5",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.0.0-alpha.5",
    "version" : "1.0.0-alpha.5"
  },
  {
    "body" : "This is the sixth Alpha Release of Apollo iOS 1.0. This first major version will include a new code generation engine, better generated models, and many syntax and performance improvements across the entire library. The primary goal of Apollo iOS 1.0 is to stabilize the API of the model layer and provide a foundation for future feature additions and evolution of the library.\r\n\r\n* **New - Objects and InputObjects are now equatable:** Many objects now conform to `AnyHashable` bringing with them the ability to conform to `Equatable`, this should make tests easier to write.\r\n* **Change - GraphQLOperation fields are now static:** Previously an instance of a `GraphQLOperation` was required to query any of it's properties, you can do that on the type now.\r\n* **Fixed - Nested fragment type cases:** Nested fragment type cases were not being generated causing a crash in selection set generation.\r\n* **New - Code generation now has a CLI:** A new command line executable has been built and will be available on Homebrew very soon! Check it out [here](https://github.com/apollographql/apollo-ios/tree/release/1.0/CodegenCLI).\r\n* **Fixed - SelectionSet and InlineFragment protocol definitions:** These were incorrectly being generated within the namespace when a module of type `.embeddedInTarget` was being used.\r\n* **Fixed - Test mock convenience initializers:** These were incorrectly defining parameter types for `Interface` and `Union` fields and the generated package could not successfully build.",
    "createdAt" : "2022-06-08T02:20:13+09:00",
    "fetchedFromAPIAt" : "2022-06-08T09:46:16+09:00",
    "id" : "RE_kwDOA9NCTc4EGsrT",
    "owner" : "apollographql",
    "publishedAt" : "2022-06-08T02:29:14+09:00",
    "repository" : "apollo-ios",
    "title" : "1.0.0 Alpha 6",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.0.0-alpha.6",
    "version" : "1.0.0-alpha.6"
  },
  {
    "body" : "This is the seventh Alpha Release of Apollo iOS 1.0. This first major version will include a new code generation engine, better generated models, and many syntax and performance improvements across the entire library. The primary goal of Apollo iOS 1.0 is to stabilize the API of the model layer and provide a foundation for future feature additions and evolution of the library.\r\n\r\n* **New: Local Cache Mutations are now supported:** In order to perform a local cache mutation, define a `.graphql` file with an operation or a fragment and mark it with the directive `@apollo_client_ios_localCacheMutation`. This will ensure the code generator generates a mutable cache mutation operation.\r\n  * **Note: Local Cache Mutation operations cannot be used for fetching from the network!** You should define separate GraphQL operations for network operations and local cache mutations.\r\n  * Example Usage:\r\n  \r\n```graphql\r\n/// SampleLocalCacheMutation.graphql\r\nquery SampleLocalCacheMutation @apollo_client_ios_localCacheMutation {\r\n  allAnimals {\r\n    species\r\n    skinCovering\r\n    ... on Bird {\r\n      wingspan\r\n    }\r\n  }\r\n}\r\n\r\n/// SampleLocalCacheMutationFragment.graphql\r\nfragment SampleLocalCacheMutationFragment on Pet @apollo_client_ios_localCacheMutation {\r\n  owner {\r\n    firstName\r\n  }\r\n}\r\n```\r\n  \r\n* **New: Support Code Generation Configuration Option: `deprecatedEnumCases`:** If `deprecatedEnumCases` is set to `exclude`, deprecated cases in graphql enums from your schema will not be generated and will be treated as unknown enum values.  \r\n* **Fixed - Compilation Errors in Generated Code When Schema was Embedded In Target:** When embedding the generated schema in your own target, rather than generating a separate module for it, there were compilation errors due to access control and namespacing issues. These are resolved. This fixes #2301 & #2302. Thanks [@kimdv](https://github.com/kimdv) for calling attention to these bugs!\r\n  * **Note: Compilation Errors for Test Mocks are still present.** We are aware of ongoing issues with generated test mocks. We are actively working on fixing these issues and they will be resolved in a future alpha release soon.\r\n* **Fixed: Crash When Accessing a Conditionally Included Fragment That is Nil.** This is fixed now and will return `nil` as it should. This fixes #2310.",
    "createdAt" : "2022-06-15T08:59:13+09:00",
    "fetchedFromAPIAt" : "2022-06-15T09:51:11+09:00",
    "id" : "RE_kwDOA9NCTc4EJA2f",
    "owner" : "apollographql",
    "publishedAt" : "2022-06-15T09:01:05+09:00",
    "repository" : "apollo-ios",
    "title" : "1.0.0 Alpha 7",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.0.0-alpha.7",
    "version" : "1.0.0-alpha.7"
  },
  {
    "body" : "This is the eighth Alpha Release of Apollo iOS 1.0. This first major version will include a new code generation engine, better generated models, and many syntax and performance improvements across the entire library. The primary goal of Apollo iOS 1.0 is to stabilize the API of the model layer and provide a foundation for future feature additions and evolution of the library.\r\n\r\n* **New: Added `Equatable` and `Hashable` Conformance to public API Models:** Object's like `GraphQLRequest` and `GraphQLError` now can be compared!\r\n* **New: Code Generation now supports Schema Extensions**.\r\n* **Fixed: Namespacing and Access Control on Generated Models:** Generated models were failing to compile due to namespacing and access control issues in certain code generation configurations. This is fixed now!\r\n* **Improved: Custom Scalar Default Float Behavior:** If the response for a custom scalar is provided as a `Float`, it will automatically be converetd to a `String` (just like it's always done for `Int`).\r\n* **Improved: GraphQL Float now treated as Swift Double:** The `Float` defined in the GraphQL spec is actually compliant with a Swift `Double`. Generated code will now generate Swift code with fields of type `Double` for GraphQL `Float`.\r\n* **Improved: Rename `SelectionSet.data` to `SelectionSet.__data`:** This is to prevent naming conflicts with GraphQL fields named `data`.\r\n* **Fixed: `graphql_transport_ws` protocol now sends 'complete' to end subscription:** The protocol implementation was previously sending the wrong message to close the connection.\r\n* **Improved: Generated Operations Folder Structure:** The generated output folder structure for fragments and operations are now organized into sub-folders.\r\n* **New: Introspection Schema Download can output JSON:** Schema downloads via Introspection now support output as JSON instead of only SDL. Note that Apollo Registry schema downloads still only support SDL as the output.",
    "createdAt" : "2022-06-28T03:21:37+09:00",
    "fetchedFromAPIAt" : "2022-06-28T09:53:07+09:00",
    "id" : "RE_kwDOA9NCTc4ENmCB",
    "owner" : "apollographql",
    "publishedAt" : "2022-06-28T03:34:45+09:00",
    "repository" : "apollo-ios",
    "title" : "1.0.0 Alpha 8",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.0.0-alpha.8",
    "version" : "1.0.0-alpha.8"
  },
  {
    "body" : "This is the first Beta Release of Apollo iOS 1.0. The Beta version has full feature parity with the 0.x.x releases. The API is expected to be mostly stable. Some breaking changes may occur due to user feedback prior to General Availability (GA) Release. The Beta does not have complete documentation or usage guides, which will be completed prior to GA.\r\n\r\nThis first major version will include a new code generation engine, better generated models, and many syntax and performance improvements across the entire library. The primary goal of Apollo iOS 1.0 is to stabilize the API of the model layer and provide a foundation for future feature additions and evolution of the library.\r\n\r\n* **New: Additional Generated Code Output Configuration Options.**\r\n  * `queryStringLiteralFormat`: Configures how the generated operations render the operation document source. Either multi-line (as defined in operation definition) or minified to a single line.\r\n  * `schemaDocumentation`: Documentation of fields and objects from your schema will now be included as in-line documentation on generated objects. This can be disabled by setting `schemaDocumentation` to `.excluded` in your codegen configuration.\r\n  * `warningsOnDeprecatedUsage`: Adds warning annotation when using fields and arguments in generated operations that are deprecated by the schema.\r\n  * `additionalInflectionRules`: Allows you to configure custom singularization rules for generated fields names.\r\n* **New: Support Automatic Persisted Queries:** APQs are now fully functional. *Note: Legacy operation safelisting support may experience issues in some cases.* If you have problems using operation safelisting, please create an issue so that we may understand and resolve the edge cases in the safelisting process. \r\n* **Fixed: Singularization of plural names for non-list fields.**\r\n* **Fixed: Runtime failure on execution of operations with InputObjects.**\r\n* **Fixed: `__typename` field no longer generated when manually included:** `__typename` is automatically included in all operations and fragments and has a default property on all Selection Sets. Generating the field was redundant and caused compilation errors.",
    "createdAt" : "2022-07-02T08:41:21+09:00",
    "fetchedFromAPIAt" : "2022-07-02T09:51:19+09:00",
    "id" : "RE_kwDOA9NCTc4EPQvn",
    "owner" : "apollographql",
    "publishedAt" : "2022-07-02T08:44:40+09:00",
    "repository" : "apollo-ios",
    "title" : "1.0.0 Beta 1",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.0.0-beta.1",
    "version" : "1.0.0-beta.1"
  },
  {
    "body" : "- **Add codegen option for excludes**: There is a new property on the codegen configuration options to allow files matching the pattern to be excluded, in the case they are found in the `includes` path. [#2205](https://github.com/apollographql/apollo-ios/pull/2205) - _Thanks to [@bannzai](https://github.com/bannzai) for the contribution!_\r\n- **Fixed - Using the `graphql_transport_ws` protocol could result in `4400` errors from the server**: The correct protocol message is now being sent to the server to end communication. [#2320](https://github.com/apollographql/apollo-ios/pull/2320)\r\n- **Replace `print` statement with `CodegenLogger.log`**: All codegen output is logged with `CodegenLogger` which can be disabled if needed. [#2348](https://github.com/apollographql/apollo-ios/issues/2348) - _Thanks to [@hiltonc](https://github.com/hiltonc) for the contribution!_\r\n- **Expose `GraphQLResultError` path string**: Adds a new publicly available computed property to `GraphQLResultError` which just exposes the `path` description. [#2361](https://github.com/apollographql/apollo-ios/pull/2361) - _Thanks to [@joshuashroyer-toast](https://github.com/joshuashroyer-toast) for the contribution!_",
    "createdAt" : "2022-07-14T19:05:28+09:00",
    "fetchedFromAPIAt" : "2022-07-15T10:04:25+09:00",
    "id" : "RE_kwDOA9NCTc4ESmIA",
    "owner" : "apollographql",
    "publishedAt" : "2022-07-14T19:08:15+09:00",
    "repository" : "apollo-ios",
    "title" : "Version 0.52.0",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/0.52.0",
    "version" : "0.52.0"
  },
  {
    "body" : "* **Remove all instances of bitcode as not supported in Xcode 14**: Starting with Xcode 14, bitcode is no longer required for watchOS and tvOS applications, and the App Store no longer accepts bitcode submissions from Xcode 14. [#2398](https://github.com/apollographql/apollo-ios/pull/2398) - _Thanks to [@stareque-atlassian](stareque-atlassian) for the contribution!_",
    "createdAt" : "2022-07-29T21:31:47+09:00",
    "fetchedFromAPIAt" : "2022-07-30T09:48:41+09:00",
    "id" : "RE_kwDOA9NCTc4EXFpr",
    "owner" : "apollographql",
    "publishedAt" : "2022-07-29T21:35:10+09:00",
    "repository" : "apollo-ios",
    "title" : "Release 0.53.0",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/0.53.0",
    "version" : "0.53.0"
  },
  {
    "body" : "#### Fixed\r\n- **Fixed - Missing SPM plug-in:** The missing Swift Package product has been added and the `Install CLI` plug-in is now available from the SPM command line and the Xcode project menu. [#2683](https://github.com/apollographql/apollo-ios/pull/2683)",
    "createdAt" : "2022-11-22T07:06:25+09:00",
    "fetchedFromAPIAt" : "2022-11-22T09:53:46+09:00",
    "id" : "RE_kwDOA9NCTc4E_suo",
    "owner" : "apollographql",
    "publishedAt" : "2022-11-22T07:11:16+09:00",
    "repository" : "apollo-ios",
    "title" : "1.0.5",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.0.5",
    "version" : "1.0.5"
  },
  {
    "body" : "This is the second Beta Release of Apollo iOS 1.0. The Beta version has full feature parity with the 0.x.x releases. The API is expected to be mostly stable. Some breaking changes may occur due to user feedback prior to General Availability (GA) Release. The Beta does not have complete documentation or usage guides, which will be completed prior to GA.\r\n\r\nThis first major version will include a new code generation engine, better generated models, and many syntax and performance improvements across the entire library. The primary goal of Apollo iOS 1.0 is to stabilize the API of the model layer and provide a foundation for future feature additions and evolution of the library.\r\n\r\n- **Breaking: Changed API for Cache Key Configuration:** Cache Key Resolution is now easier to configure. See `CacheKeyInfo` for examples and documentation.\r\n- **Breaking: Changed API for generated Schema Types to support dynamic types** The API for generated schema types now initializes instances of `Object`, `Interface`, and `Union` for each corresponding type in your schema. These are still generated by the code generation engine. This differs from the previous API which generated static types that were subclasses of `Object`, `Interface`, and `Union`. The change provides the API to support the future addition of dynamic types added to your schema at runtime.\r\n- **New: Codegen CLI will now automatically create output directories:** You no longer are required to have already created all intermediary directories for your codegen output paths prior to running code generation. \r\n- **New: CodegenCLI is built locally with CocoaPods installations:** This is to ensure that the version of the Codegen CLI is the same as ApolloCodegenLib. This behavior will be extended to Swift Package Manager installations too.\r\n- **New: Swift Keywords are escaped when used as names of fields or types in generated objects:** Previously, using Swift keywords (eg. `self`, `protocol`, `Type`) as the names of fields in your operations or types in your schema would cause compilation errors in your generated code. Now, these names will be escaped with backticks to prevent compiler errors. **The names `__data` and `fragments` cannot be used as field names as they conflict with Apollo's generated object APIs** Using these names will result in a validation error being thrown when attempting to run the code generation engine.\r\n- **Fixed: Fragments with lowercase names caused compilation errors:** This bug is fixed. Fragments with lowercase names will be correctly uppercased when referencing the generated `Fragment` objects. \r\n- **Fixed: Build errors in Xcode 14/Swift 5.7:** The library was updated to support the Swift 5.7 language version. Swift 5.6 is still supported. \r\n- **Fixed: Xcode 14 does not support Bitcode:** Starting with Xcode 14, bitcode is no longer required for watchOS and tvOS applications, and the App Store no longer accepts bitcode submissions from Xcode 14.  \r\n- **Fixed: \"No such module `ApolloAPI`\" error when using CocoaPods:** The podspec was not configured to import all required source files and some import statements were unnecessary in a CocoaPods environment. A code generation configuration option was added to order to ensure generated files are generated with the correct import statements in a CocoaPods environment. **When generating code for a project that includes `Apollo` via Cocoapods, you must set the `cocoapodsCompatibleImportStatements` option to `true` in your `ApolloCodegenConfiguration`.** When using the Codegen CLI that is built for you during `pod install` the `apollo-ios-cli init` command will default this option to `true`. When building the Codegen CLI in by other method, this option will default to `false`.  \r\n- **Removed: ApolloUtils target no longer necessary:** The things that used to be shared here are actually no longer shared. There is no code shared between the `Apollo` and `ApolloCodegenLib` targets.  \r\n- **Removed: ApolloCodegenConfiguration.validation:** This method was incorrectly requiring destination paths to exist before code generation. Once that was removed it was no longer necessary. Any errors that are encountered with destination output paths will be raised during code generation.",
    "createdAt" : "2022-08-17T05:54:23+09:00",
    "fetchedFromAPIAt" : "2022-08-17T09:57:42+09:00",
    "id" : "RE_kwDOA9NCTc4Eca1I",
    "owner" : "apollographql",
    "publishedAt" : "2022-08-17T05:56:46+09:00",
    "repository" : "apollo-ios",
    "title" : "1.0.0 Beta 2",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.0.0-beta.2",
    "version" : "1.0.0-beta.2"
  },
  {
    "body" : "This is the third Beta Release of Apollo iOS 1.0. The Beta version has full feature parity with the 0.x.x releases. The API is expected to be mostly stable. Some breaking changes may occur due to user feedback prior to General Availability (GA) Release. The Beta does not have complete documentation or usage guides, which will be completed prior to GA.\r\n\r\nThis first major version will include a new code generation engine, better generated models, and many syntax and performance improvements across the entire library. The primary goal of Apollo iOS 1.0 is to stabilize the API of the model layer and provide a foundation for future feature additions and evolution of the library.\r\n\r\n* **Breaking: Changed the generated Schema files** \r\n  * The schema will now have two generated files, `SchemaMetadata.swift` and `SchemaConfiguration.swift.`\r\n  * We wanted to more clearly separate the parts of the schema that are generated for you (metadata) from the parts that you can configure yourself (configuration).    \r\n  * **If you were using the last beta, you’ll need to move your cache key resolution logic into `SchemaConfiguration.swift`. You should also delete the old generated files.*\r\n  * *We will be implementing automatic deletion of generated files that should no longer be part of your project in a future beta, so you won't need to delete those files manually anymore.*\r\n* **New: Added SPM Plugin for Code Generation CLI**\r\n  * When including Apollo iOS via Swift Package Manager, the Code Generation CLI is now accessible as an SPM Plugin.\r\n  * After installing the `apollo-ios` package, run `swift package --disable-sandbox apollo-initialize-codegen-config` to create the codegen configuration file.\r\n  * Then you can run `swift package --disable-sandbox apollo-generate` to run code generation.\r\n  * The `--disable-sandbox` or `--allow-writing-to-directory .` arguments must be used when running the Code Generation CLI via the SPM plugin to give the plugin permission to write the generated files to the output directory configured in your codegen configuration file. \r\n* **Fixed: Compilation errors when schema types had lowercase names**\r\n* **Fixed: Codegen engine crashing in specific situations** \r\n  * There were some bugs in the codegen compiler when merging nested fragments with non-matching parent types and using default values for input object list fields.\r\n* **Fixed: Issues with websocket reconnections** Thanks [@STomperi](https://github.com/STomperi) for the fix!\r\n",
    "createdAt" : "2022-08-30T06:16:20+09:00",
    "fetchedFromAPIAt" : "2022-08-30T10:02:45+09:00",
    "id" : "RE_kwDOA9NCTc4EgvpL",
    "owner" : "apollographql",
    "publishedAt" : "2022-08-30T06:18:53+09:00",
    "repository" : "apollo-ios",
    "title" : "1.0.0 Beta 3",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.0.0-beta.3",
    "version" : "1.0.0-beta.3"
  },
  {
    "body" : "This is the fourth Beta Release of Apollo iOS 1.0. The Beta version has full feature parity with the 0.x.x releases. The API is expected to be mostly stable. Some breaking changes may occur due to user feedback prior to General Availability (GA) Release. The Beta does not have complete documentation or usage guides, which will be completed prior to GA.\r\n\r\nThis first major version will include a new code generation engine, better generated models, and many syntax and performance improvements across the entire library. The primary goal of Apollo iOS 1.0 is to stabilize the API of the model layer and provide a foundation for future feature additions and evolution of the library.\r\n\r\n* **Breaking: Generated Files now have the file extension `.graphql.swift`.**\r\n  * This allows you to clearly distinguish which files in your project are Apollo generated files.\r\n  * Generated template files that are user-editable will still have the `.swift` file extension. \r\n    * `CustomScalar` templates as well as the `SchemaConfiguration` file are user-editable. Once these are generated, they are never overwritten by future code generation execution.\r\n  * This change is also necessary for the identification of generated files for the pruning functionality.\r\n* **New: Pruning of Unused Generated Files**\r\n  * Generated files that no longer should exist are automatically deleted now. This occurs when a `.graphql` file is removed from your project. The generated file will also be deleted the next time code generation is run.\r\n  * This can be disabled with the new `pruneGeneratedFiles` codegen option.\r\n  * **Breaking: Automatic Deletion will not delete files generated in previous Alpha/Beta versions.**\r\n    * Only files with the `.graphql.swift` file extension will be deleted.\r\n    * If you have used previous Alpha/Beta versions, you will need to delete your generated files manually one last time before running code generation with this version.\r\n* **New: Enum Case Names are Converted to Camel Case in Generated Enums.** \r\n  * **Breaking: This is enabled by default, your call sites will need to be updated.**\r\n  * Camel case conversion for enum cases can be disabled with the new `conversionStrategies.enumCases` codegen option.\r\n  * Thanks [@bannzai](https://github.com/bannzai) for this one!\r\n* **Fixed: Swift Keywords are escaped when used as names of Enum Values** Thanks [@bannzai](https://github.com/bannzai) for the fix!\r\n* **Fixed: Compilation Error when Using Fragment with Lowercased Name** This was an edge case that only occured when referencing a nested, merged selection set from the lowercase named fragment.\r\n* **Fixed: Retain Cycle in `ReadTransaction`** Thanks [@lorraine-hatch](https://github.com/lorraine-hatch) for the fix!\r\n* **Fixed: String `jsonValue` Initializer for Large Numbers** Thanks [@Almaz5200](https://github.com/Almaz5200) for the fix!",
    "createdAt" : "2022-09-10T09:34:45+09:00",
    "fetchedFromAPIAt" : "2022-09-10T09:59:49+09:00",
    "id" : "RE_kwDOA9NCTc4Ek3-e",
    "owner" : "apollographql",
    "publishedAt" : "2022-09-10T09:36:07+09:00",
    "repository" : "apollo-ios",
    "title" : "1.0.0 Beta 4",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.0.0-beta.4",
    "version" : "1.0.0-beta.4"
  },
  {
    "body" : "This is the first Release Candidate for Apollo iOS 1.0. The Release Candidate is a fully featured and code-complete representation of the final 1.0 version. This includes full feature parity with the 0.x.x releases.\r\n\r\nAPI breaking changes are not expected between the Release Candidate and the General Availability (GA) release. The only code changes will be non-breaking bug fixes due to user feedback. The Release Candidate does not have complete documentation or usage guides, which will be completed prior to GA.\r\n\r\nThis first major version will include a new code generation engine, better generated models, and many syntax and performance improvements across the entire library. The primary goal of Apollo iOS 1.0 is to stabilize the API of the model layer and provide a foundation for future feature additions and evolution of the library.\r\n\r\n* **New: Option to Include Deprecated Input Arguments on Fields During Schema Download** Thanks to [@dave-perry](https://github.com/dave-perry) for this addition!\r\n* **Fixed: Code Generation Config JSON File Compatibility** \r\n  * Previously, the `apollo-codegen-config.json` file used by the Apollo CLI needed to contain values for all optional fields. When new codegen options were added, this would cause errors until all newly added options has values provided. \r\n  * The `Codable` implementation for the `ApolloCodgenConfiguration` has been implemented manually to prevent this. Now, only required fields must be provided, all optional fields can be omitted from the config file safely. \r\n  * The CLI's `init` command also now generates a template config file with only the required fields.\r\n* **Fixed: Swift Keywords are escaped when used as names of Input Parameters**\r\n* **Fixed: Compilation Error when using `@skip` and `@include` conditions on the same field**\r\n* **Fixed: Added permissions request to SPM Code Generation Plugin**\r\n  * When running the code generation plugin, you will be prompted to give permission for the plugin to write to the package directory.\r\n  * This permission check can be avoided by passing the `--allow-writing-to-package-directory` flag when executing the plugin command.\r\n* **Fixed: APQ Operations Will no Longer be Retried when Unrecognized if using `.persistedOperationsOnly`**\r\n  * `.persistedOperationsOnly` is for use with allow-listed operations only. If an operation identifier is not recognized by the server, there is no way to register the operation in this configuration.   \r\n* **Breaking: Updated `ApolloAPI` internal metadata properties to be `__` prefixed.**\r\n  * Generated GraphQL files expose certain properties/functions that are consumed by the `Apollo` library during GraphQL Execution. These members must be public in order to be exposed to `Apollo`, but are not intended for external consumption. We have added underscore prefixes to each of these members to signify that intention, using `__` for GraphQL Metadata (in alignment with the GraphQL Specification) and `_` for `Apollo`'s utility and helper functions.\r\n  * The affected signatures are:\r\n    * `SelectionSet.schema` -> `SelectionSet.__schema`\r\n    * `SelectionSet.selection` -> `SelectionSet.__selection`\r\n    * `JSONEncodable.jsonValue` -> `JSONEncodable._jsonValue`\r\n    * `JSONDecodable.init(jsonValue:)` -> `JSONDecodable.init(_jsonValue:)`\r\n    * `AnyHashableConvertible.asAnyHashable` -> `AnyHashableConvertible._asAnyHashable`\r\n    * `OutputTypeConvertible.asOutputType` -> `OutputTypeConvertible._asOutputType`\r\n    * `GraphQLOperation.variables` -> `GraphQLOperation._variables`\r\n    * `LocalCacheMutation.variables` -> `LocalCacheMutation._variables`",
    "createdAt" : "2022-09-22T07:24:16+09:00",
    "fetchedFromAPIAt" : "2022-09-22T09:59:08+09:00",
    "id" : "RE_kwDOA9NCTc4Eo3nG",
    "owner" : "apollographql",
    "publishedAt" : "2022-09-22T07:26:12+09:00",
    "repository" : "apollo-ios",
    "title" : "1.0.0 Release Candidate #1",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.0.0-rc.1",
    "version" : "1.0.0-rc.1"
  },
  {
    "body" : "**This is the first major version release of Apollo iOS! The primary goal of Apollo iOS 1.0 is to stabilize the API of the model layer and provide a foundation for future feature additions and evolution of the library.**\r\n\r\nIn a nutshell, v1.0.0 brings:\r\n* A new code generation engine built entirely in Swift\r\n* Improvements to the generated models\r\n* Syntax and performance improvements across the entire library\r\n\r\nThere is [documentation](https://www.apollographql.com/docs/ios) and a blog post coming soon. Feel free to ask questions by either [opening an issue on our GitHub repo](https://github.com/apollographql/apollo-ios/issues), or [joining the community](https://community.apollographql.com/tags/c/help/6/mobile).\r\n\r\nThank you to all contributors who have helped us get to this first major release! ❤️",
    "createdAt" : "2022-10-02T13:20:49+09:00",
    "fetchedFromAPIAt" : "2022-10-03T10:00:14+09:00",
    "id" : "RE_kwDOA9NCTc4Esg_d",
    "owner" : "apollographql",
    "publishedAt" : "2022-10-02T13:24:18+09:00",
    "repository" : "apollo-ios",
    "title" : "1.0.0",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.0.0",
    "version" : "1.0.0"
  },
  {
    "body" : "### Fixes\r\n* **Fixed - apollo-ios-cli code generation on CocoaPods installation:** All required resources for the CLI are now bundled correctly. This was an issue in CocoaPods installations where the `generate` command of `apollo-ios-cli` would result in a fatal error. [#2548](https://github.com/apollographql/apollo-ios/pull/2548) _Thank you to [@ilockett](https://github.com/ilockett) for reporting the issue._\r\n* **Fixed - Xcode integration for Swift Package Plugins:** The SwiftPM plugins now support `XcodePluginContext` from Xcode 14 and accepts the additional command line options that Xcode sends. [#2554](https://github.com/apollographql/apollo-ios/pull/2554) _Thank you to [@SilverTab](https://github.com/SilverTab) for reporting the issue._\r\n* **Fixed - Escaping input param names:** Input parameter names recognized as reserved words are now escaped to prevent build errors. [#2561](https://github.com/apollographql/apollo-ios/pull/2561) _Thank you to [@puls](https://github.com/puls) for the contribution._\r\n* **Fixed - Multiline deprecation messages:** Deprecation messages that span multiple lines would previously result in build errors. [#2579](https://github.com/apollographql/apollo-ios/pull/2579) _Thank you to [@TizianoCoroneo](https://github.com/TizianoCoroneo) for the contribution._\r\n\r\n### Changes\r\n* **Changed - Warnings for deprecated enums:** Deprecated enum cases are no longer annotated with the Swift `@available` attribute. They will now have comments indicating their deprecated status. [#2579](https://github.com/apollographql/apollo-ios/pull/2579)",
    "createdAt" : "2022-10-13T07:24:09+09:00",
    "fetchedFromAPIAt" : "2022-10-13T10:04:40+09:00",
    "id" : "RE_kwDOA9NCTc4EwBL0",
    "owner" : "apollographql",
    "publishedAt" : "2022-10-13T07:26:17+09:00",
    "repository" : "apollo-ios",
    "title" : "1.0.1",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.0.1",
    "version" : "1.0.1"
  },
  {
    "body" : "- **Fixed - Not generating code for subtypes only used as input to mutations:** If you are using a JSON format schema that was fetched via GraphQL introspection code generation will now generate all referenced subtypes. [#2583](https://github.com/apollographql/apollo-ios/pull/2583) _Thank you to [@vrutberg](https://github.com/vrutberg) for reporting the issue._\r\n- **Fixed - When using the test mock, touching a `GraphQLEnum` property will cause a crash:** JSON Encoding the mocks into the `SelectionSet.DataDict` was causing `CustomScalar` values to get encoded into their JSON values. The mock data is now converted into the correct format for the `SelectionSet.DataDict`. [#2584](https://github.com/apollographql/apollo-ios/pull/2584) _Thank you to [@asapo](https://github.com/asapo) for reporting the issue._\r\n- **Fixed - Add namespace for ApolloAPI types in generated code:** The Apollo `DocumentType` enum is now correctly namespaced in generated code. [#2585](https://github.com/apollographql/apollo-ios/pull/2585) _Thank you to [@matijakregarGH](https://github.com/matijakregarGH) for reporting the issue._\r\n- **Fixed - Problems with schema name in generated code:**\r\n  - Schema name is now correctly cased for generated code namespacing. [#2586](https://github.com/apollographql/apollo-ios/pull/2586) _Thank you to [@pchmelar](https://github.com/pchmelar) for reporting the issue._\r\n  - The schema name is now not allowed to match any referenced schema type, entity field, or entity list field names. [#2589](https://github.com/apollographql/apollo-ios/pull/2589)\r\n- **Fixed - Test mocks crash when touching array of objects:** Test mock list of objects is now correctly converted into selection set data. [#2591](https://github.com/apollographql/apollo-ios/pull/2591) _Thank you to [@konomae](https://github.com/konomae) for reporting the issue._\r\n- **Fixed: `GraphQLNullable` nil coalescing:** `@exported import` statements now ensure that the operator overload is imported when using the generated models. [#2600](https://github.com/apollographql/apollo-ios/pull/2600) _Thank you to bassrock for reporting the issue._",
    "createdAt" : "2022-10-22T09:01:29+09:00",
    "fetchedFromAPIAt" : "2022-10-22T10:09:36+09:00",
    "id" : "RE_kwDOA9NCTc4Ezx17",
    "owner" : "apollographql",
    "publishedAt" : "2022-10-22T09:06:41+09:00",
    "repository" : "apollo-ios",
    "title" : "1.0.2",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.0.2",
    "version" : "1.0.2"
  },
  {
    "body" : "Apollo iOS v1.1 primarily focuses on adding generated initializers to the generated operation models.\r\n\r\nIn most cases, the upgrade from v1.0 to v1.1 should require no changes to your code. \r\n\r\n### **Breaking** \r\n- **Changed generated fragment accessors with inclusion conditions:** When conditionally spreading a fragment with an `@include/@skip` directive that has a different parent type than the selection set it is being spread into, the shape of the generated models has changed.  \r\n  - For example, a fragment accessor defined as `... on DetailNode @include(if: $includeDetails)` would have previously been named `asDetailNode`; it will now be generated as `asDetailNodeIfIncludeDetails`.\r\n- While no breaking changes were made to official public APIs, some *underscore prefixed* APIs that are `public` but intended for internal usage only have been changed.\r\n  - **SelectionSet fulfilled fragment tracking:** `SelectionSet` models now keep track of which fragments were fulfilled during GraphQL execution in order to enable conversions between type cases. While this does not cause functional changes while using public APIs, this is a fundamental change to the way that the underlying data for a `SelectionSet` is formatted, it is now required that all `SelectionSet` creation must be processed by the `GraphQLExecutor` or a generated initializer that is guaranteed to correctly format the data. **This means that initializing a `SelectionSet` using raw JSON data directly will no longer work.** Please ensure that raw JSON data is only used with the new `RootSelectionSet.init(data: variables)` initializer.\r\n### Fixed\r\n- **Null/nil value parsing issues**. In some situations, writing/reading `null` or `nil` values to the cache was causing crashes in 1.1 Beta 1. This is now fixed.  \r\n### Added\r\n- **Configuration option for generating initializers on SelectionSet models:** You can now get initializers for your generated selection set models by setting the `selectionSetInitializers` option on your code generation configuration. Manually initialized selection sets can be used for a number of purposes, including:\r\n  * Adding custom data to the normalized cache\r\n  * Setting up fixture data for SwiftUI previews or loading states\r\n  * An alternative to Test Mocks for unit testing      \r\n- **Safe initialization of `SelectionSet` models with raw JSON:** In 1.0, initializing `SelectionSet` models with raw JSON was unsafe and required usage of *underscore prefixed* APIs that were intended for internal usage only. Apollo iOS 1.1 introduces a new, safe initializer: `RootSelectionSet.init(data: variables)`.\r\n  * Previously, if you provided invalid JSON, your selection set's were unsafe and may cause crashes when used. The new initializer runs a lightweight version of GraphQL execution over the provided JSON data. This quickly parses, validates, and transforms the JSON data into the format required by the `SelectionSet` models. If the provided data is invalid, this initializer `throws` an error, ensuring that your model usage is always safe.\r\n- **Added support for multipart subscriptions over HTTP.**   \r\n### Changed\r\n- **Generate `__typename` selection for generated models:** In 1.1, the code generator adds the `__typename` field to each root object. In previous versions, this selection was automatically inferred by the `GraphQLExecutor`, however generating it directly should improve performance of GraphQL execution.",
    "createdAt" : "2023-04-04T06:36:44+09:00",
    "fetchedFromAPIAt" : "2023-04-04T09:41:16+09:00",
    "id" : "RE_kwDOA9NCTc4F1gSO",
    "owner" : "apollographql",
    "publishedAt" : "2023-04-04T06:38:25+09:00",
    "repository" : "apollo-ios",
    "title" : "1.1.0",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.1.0",
    "version" : "1.1.0"
  },
  {
    "body" : "### Fixed\r\n- **Version 1.1.0 does not compile when installed via CocoaPods ([#2936](https://github.com/apollographql/apollo-ios/issues/2936)):** Module names not present in CocoaPods builds have been removed from type declarations. [#2937](https://github.com/apollographql/apollo-ios/pull/2937) - _Thank you to [@simonliotier](https://github.com/simonliotier) for raising the issue._\r\n- **Crash when using mocks for Double Nested Arrays ([#2809](https://github.com/apollographql/apollo-ios/issues/2809)):** Test mock data is now correctly applied to the selection set. [#2939](https://github.com/apollographql/apollo-ios/pull/2939) - _Thank you to [@scottasoutherland](https://github.com/scottasoutherland) for raising the issue._\r\n- **In 1.1.0, passing custom scalars or GraphQLEnum to mocks fails ([#2928](https://github.com/apollographql/apollo-ios/issues/2928)):** Test mock data is now correctly applied to the selection set. [#2939](https://github.com/apollographql/apollo-ios/pull/2939) - _Thank you to [@scottasoutherland](https://github.com/scottasoutherland) for raising the issue._",
    "createdAt" : "2023-04-07T08:38:16+09:00",
    "fetchedFromAPIAt" : "2023-04-07T09:36:56+09:00",
    "id" : "RE_kwDOA9NCTc4F3qck",
    "owner" : "apollographql",
    "publishedAt" : "2023-04-07T08:42:27+09:00",
    "repository" : "apollo-ios",
    "title" : "1.1.1",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.1.1",
    "version" : "1.1.1"
  },
  {
    "body" : "### Fixed\r\n- **Crash after calling `cancel()` on `Cancellable` ([#2932](https://github.com/apollographql/apollo-ios/issues/2932)):** Calling `cancel()` on a non-subscription `Cancellable` will now correctly handle the lifetime of the internally `Unmanaged` object. [#2943](https://github.com/apollographql/apollo-ios/pull/2943) - _Thank you to [@yonaskolb](https://github.com/yonaskolb) for raising the issue._\r\n- **Deprecation messages are not escaped ([#2879](https://github.com/apollographql/apollo-ios/issues/2879)):** If escaped characters are used in GraphQL deprecation messages they are now properly escaped in the rendered Swift warning or attribution message. [#2951](https://github.com/apollographql/apollo-ios/pull/2951) _Thank you to [@djavan-bertrand](https://github.com/djavan-bertrand) for raising the issue._\r\n\r\n### Added\r\n- **Add injecting additionalErrorHandler for upload operations to RequestChainNetworkTransport ([#2948](https://github.com/apollographql/apollo-ios/pull/2948)):** `Upload` operations can now have custom error interceptors like other operations. [#2948](https://github.com/apollographql/apollo-ios/pull/2948) _Thank you to [@RobertDresler](https://github.com/RobertDresler) for the contribution._",
    "createdAt" : "2023-04-13T07:39:19+09:00",
    "fetchedFromAPIAt" : "2023-04-13T09:39:15+09:00",
    "id" : "RE_kwDOA9NCTc4F6gLD",
    "owner" : "apollographql",
    "publishedAt" : "2023-04-13T07:42:48+09:00",
    "repository" : "apollo-ios",
    "title" : "1.1.2",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.1.2",
    "version" : "1.1.2"
  },
  {
    "body" : "### Fixed\r\n- **Quotes in operation identifiers are not escaped ([#2671](https://github.com/apollographql/apollo-ios/issues/2671)):** Query strings are now enclosed within extended delimiters to allow inclusion of special characters such as quotation marks. [#2701](https://github.com/apollographql/apollo-ios/pull/2701) - _Thank you to [@StarLard](https://github.com/StarLard) for raising the issue._\r\n- **Cannot find type `graphQLSchema` in scope ([#2705](https://github.com/apollographql/apollo-ios/issues/2705)):** Generated fragments now use the correct schema namespace casing. [#2730](https://github.com/apollographql/apollo-ios/pull/2730) - _Thank you to [@iAmericanBoy](https://github.com/iAmericanBoy) for raising the issue._\r\n- **Updating a local cache mutation with an optional field fails with a `ApolloAPI.JSONDecodingError.missingValue` error ([#2697](https://github.com/apollographql/apollo-ios/issues/2697)):** Cache mutations will now allow incomplete data to be written to the cache without expecting all fields to be set. Please note that cache manipulation is an advanced feature and you should be aware of how the data written will affect network requests and cache policies. [#2751](https://github.com/apollographql/apollo-ios/pull/2751) - _Thank you to [@amseddi](https://github.com/amseddi) for raising the issue._\r\n- **`GraphQLEnum` value camel case conversion strategy ([#2640](https://github.com/apollographql/apollo-ios/issues/2640)), ([#2749](https://github.com/apollographql/apollo-ios/issues/2749)):** The camel case conversion logic for GraphQL enums has been improved to handle a wider range of edge cases that were causing invalid Swift code generation. [#2745](https://github.com/apollographql/apollo-ios/pull/2745) - _Thank you to [@ddanielczyk](https://github.com/ddanielczyk) and [@hispanico94](https://github.com/hispanico94) for raising the issues._\r\n- **Naming collision with `Selection` type from apollo ([#2708](https://github.com/apollographql/apollo-ios/issues/2708)):** `ParentType` and `Selection` types in generated selection sets now use a fully qualified namespace to prevent typename conflicts. [#2754](https://github.com/apollographql/apollo-ios/pull/2754) - _Thank you to [@tahirmt](https://github.com/tahirmt) for raising the issue._\r\n- **Namespace collision when using \"Schema\" for `schemaName` ([#2664](https://github.com/apollographql/apollo-ios/issues/2664)):** Certain strings are now disallowed for use as the schema namespace. [#2755](https://github.com/apollographql/apollo-ios/pull/2755) - _Thank you to [@StarLard](https://github.com/StarLard) for raising the issue._\r\n- **Naming collision with fragments and scalars ([#2691](https://github.com/apollographql/apollo-ios/issues/2691)):** Shared referenced schema types will always use the fully qualified names as the types of fields in selections sets. This prevents collisions with names of other generated selection sets for entity type fields whose names are the same as a referenced schema type. [#2757](https://github.com/apollographql/apollo-ios/pull/2757) - _Thank you to [@scottasoutherland](https://github.com/scottasoutherland) for raising the issue._\r\n- **Naming collision with `DocumentType` in generated mock code ([#2719](https://github.com/apollographql/apollo-ios/issues/2719)):** All shared referenced schema types within test mocks now use a fully qualified named type. [#2762](https://github.com/apollographql/apollo-ios/pull/2762) - _Thank you to [@dafurman](https://github.com/dafurman) for raising the issue._\r\n- **Schema/Target/Module name with spaces in it breaks generated code ([#2653](https://github.com/apollographql/apollo-ios/issues/2653)):** Spaces are no longer allowed in the schema namespace. Additional validation has been added to the CLI commands to provide the correct error response. [#2760](https://github.com/apollographql/apollo-ios/pull/2760) - _Thank you to [@Narayane](https://github.com/Narayane) for raising the issue._\r\n\r\n### Changed\r\n- **Raised minimum required tooling versions:** Swift 5.7 and Xcode 14 are now the minimum required versions to build Apollo iOS and the generated code. [#2695](https://github.com/apollographql/apollo-ios/pull/2695)",
    "createdAt" : "2023-01-10T14:34:50+09:00",
    "fetchedFromAPIAt" : "2023-01-13T09:44:34+09:00",
    "id" : "RE_kwDOA9NCTc4FROn0",
    "owner" : "apollographql",
    "publishedAt" : "2023-01-10T14:46:14+09:00",
    "repository" : "apollo-ios",
    "title" : "1.0.6",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.0.6",
    "version" : "1.0.6"
  },
  {
    "body" : "### Fixed\r\n- **Couldn't build when using some reserved words in a schema ([#2765](https://github.com/apollographql/apollo-ios/issues/2765)):** `for` has been added to the list of reserved keywords that are escaped with backticks when used in schema types and operations. [#2772](https://github.com/apollographql/apollo-ios/pull/2772) - _Thank you to [@torycons](https://github.com/torycons) for raising the issue._\r\n- **Subscript GraphQL variable from dictionary crash when Swift modifier used as key ([#2759](https://github.com/apollographql/apollo-ios/issues/2759)):** Backticks have been removed from subscript keys of input objects. [#2773](https://github.com/apollographql/apollo-ios/pull/2773) - _Thank you to [@SzymonMatysik](https://github.com/SzymonMatysik) for raising the issue._\r\n- **Unnamed fields in schema results in broken generated Swift code ([#2753](https://github.com/apollographql/apollo-ios/issues/2753)):** The `_` character can be used as a GraphQL field name. [#2769](https://github.com/apollographql/apollo-ios/pull/2769) - _Thank you to [@neakor](https://github.com/neakor) for raising the issue._\r\n- **LocalCacheMutation with an enum field fails ([#2775](https://github.com/apollographql/apollo-ios/issues/2775)):** When writing selection set data back into the cache, custom scalars are now re-encoded back into their `_jsonValue`. [#2778](https://github.com/apollographql/apollo-ios/pull/2778) - _Thank you to [@dabby-wombo](https://github.com/dabby-wombo) for raising the issue._\r\n- **DataDict subscript function crashes on iOS 14.4 and under ([#2668](https://github.com/apollographql/apollo-ios/issues/2668)):** `AnyHashable` conversions when accessing `DataDict` properties now perform checks on the base type. [#2784](https://github.com/apollographql/apollo-ios/pull/2784) - _Thank you to [@bdunay3](https://github.com/bdunay3) for raising the issue._\r\n- **`@include` directive based on variable with default value drops the included data ([#2690](https://github.com/apollographql/apollo-ios/issues/2690)):** The GraphQL executor will now correctly evaluate `GraphQLNullable` conditional variables. [#2794](https://github.com/apollographql/apollo-ios/pull/2794) - _Thank you to [@klanchman](https://github.com/klanchman) for raising the issue._\r\n- **Interfaces implemented by schema root are not generated ([#2756](https://github.com/apollographql/apollo-ios/issues/2756)):** Interfaces references on the root type Query, Mutation or Subscription are now included in the schema module. [#2816](https://github.com/apollographql/apollo-ios/pull/2816) - _Thank you to [@litso](https://github.com/litso) for raising the issue._\r\n\r\n### Changed\r\n- **HTTP headers format in schema download configuration JSON ([#2661](https://github.com/apollographql/apollo-ios/issues/2661)):** `HTTPHeaders` in the `ApolloSchemaDownloadConfiguration` section of the codegen configuration JSON file can now be specified using the more intuitive format `{ \"Authorization\": \"<token>\"}`. [#2811](https://github.com/apollographql/apollo-ios/pull/2811) - _Thank you to [@nikitrivedii](https://github.com/nikitrivedii) for raising the issue._",
    "createdAt" : "2023-02-10T05:11:38+09:00",
    "fetchedFromAPIAt" : "2023-02-11T23:53:40+09:00",
    "id" : "RE_kwDOA9NCTc4FevEt",
    "owner" : "apollographql",
    "publishedAt" : "2023-02-10T05:19:16+09:00",
    "repository" : "apollo-ios",
    "title" : "1.0.7",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.0.7",
    "version" : "1.0.7"
  },
  {
    "body" : "This is the first Beta Release of Apollo iOS 1.1. Version 1.1 primarily focuses on adding generated initializers to the generated operation models.\r\n\r\nWhile no breaking changes were made to official public APIs, some *underscore prefixed* APIs that are `public` but intended for internal usage only have been changed.\r\n\r\n### Added\r\n- **Configuration option for generating initializers on SelectionSet models:** You can now get initializers for your generated selection set models by setting the `selectionSetInitializers` option on your code generation configuration. Manually initialized selection sets can be used for a number of purposes, including:\r\n  * Adding custom data to the normalized cache\r\n  * Setting up fixture data for SwiftUI previews or loading states\r\n  * An alternative to Test Mocks for unit testing      \r\n- **Safe initialization of `SelectionSet` models with raw JSON:** In 1.0, initializing `SelectionSet` models with raw JSON was unsafe and required usage of *underscore prefixed* APIs that were intended for internal usage only. Apollo iOS 1.1 introduces a new, safe initializer: `RootSelectionSet.init(data: variables)`.\r\n  * Previously, if you provided invalid JSON, your selection set's were unsafe and may cause crashes when used. The new initializer runs a lightweight version of GraphQL execution over the provided JSON data. This quickly parses, validates, and transforms the JSON data into the format required by the `SelectionSet` models. If the provided data is invalid, this initializer `throws` an error, ensuring that your model usage is always safe.\r\n- **Added support for multipart subscriptions over HTTP.**   \r\n### Changed\r\n- **SelectionSet fulfilled fragment tracking:** `SelectionSet` models now keep track of which fragments were fulfilled during GraphQL execution in order to enable conversions between type cases. While this does not cause functional changes while using public APIs, this is a fundamental change to the way that the underlying data for a `SelectionSet` is formatted, it is now required that all `SelectionSet` creation must be processed by the `GraphQLExecutor` or a generated initializer that is guaranteed to correctly format the data. **This means that initializing a `SelectionSet` using raw JSON data directly will no longer work.** Please ensure that raw JSON data is only used with the new `RootSelectionSet.init(data: variables)` initializer.   \r\n- **Generate `__typename` selection for generated models:** In 1.1, the code generator adds the `__typename` field to each root object. In previous versions, this selection was automatically inferred by the `GraphQLExecutor`, however generating it directly should improve performance of GraphQL execution. \r\n- **Changed generated fragment accessors with inclusion conditions:** When conditionally spreading a fragment with an `@include/@skip` directive that has a different parent type than the selection set it is being spread into, the shape of the generated models has changed. This does not affect generated call sites, but only affects the generated `selection` metadata used internally by the `GraphQLExecutor`.",
    "createdAt" : "2023-03-25T12:41:05+09:00",
    "fetchedFromAPIAt" : "2023-03-26T09:45:27+09:00",
    "id" : "RE_kwDOA9NCTc4Fxm6j",
    "owner" : "apollographql",
    "publishedAt" : "2023-03-25T12:43:19+09:00",
    "repository" : "apollo-ios",
    "title" : "1.1.0 Beta #1",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.1.0-beta.1",
    "version" : "1.1.0-beta.1"
  },
  {
    "body" : "### Fixed\r\n- **Fix two issues with generated models:** See PR ([#3168](https://github.com/apollographql/apollo-ios/pull/3168)). _Thank you to [@iAmericanBoy](https://github.com/iAmericanBoy) for finding these issues and providing a reproduction case._\r\n- **Fix computation of operation identifiers for persisted queries:** See PR ([#3163](https://github.com/apollographql/apollo-ios/pull/3163)). _Thank you to [@WolframPRO](https://github.com/WolframPRO) for finding these issues._",
    "createdAt" : "2023-08-02T04:14:39+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOA9NCTc4G1jo8",
    "owner" : "apollographql",
    "publishedAt" : "2023-08-02T04:17:32+09:00",
    "repository" : "apollo-ios",
    "title" : "1.3.3",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.3.3",
    "version" : "1.3.3"
  },
  {
    "body" : "## v1.4.0\r\n\r\n### New\r\n\r\n- **Added the ability to set a casing strategy for field names in code generation ([#2738](https://github.com/apollographql/apollo-ios/issues/2738)):** See PR ([#3171](https://github.com/apollographql/apollo-ios/pull/3171)). _Thank you to [@Spatel91111](https://github.com/Spatel91111) for the feature request._\r\n\r\n### Improvement\r\n\r\n- **Updated the way persisted queries are configured for code and manifest generation:** See PR ([#3175](https://github.com/apollographql/apollo-ios/pull/3175))\r\n- **Updated docs for `other` schema module type to provide more clarity ([#3164](https://github.com/apollographql/apollo-ios/issues/3164)):** See PR ([#3170](https://github.com/apollographql/apollo-ios/pull/3170)) _Thank you to [@Mordil](https://github.com/Mordil) for suggesting this update._",
    "createdAt" : "2023-08-11T02:44:19+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOA9NCTc4G6YhK",
    "owner" : "apollographql",
    "publishedAt" : "2023-08-11T02:47:21+09:00",
    "repository" : "apollo-ios",
    "title" : "1.4.0",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.4.0",
    "version" : "1.4.0"
  },
  {
    "body" : "### Fixed\r\n- **`@dynamicMember` conflicting field name ([#2950](https://github.com/apollographql/apollo-ios/issues/2950)):** The subscript setters have been changed to allow a selection set property named `hash`. [#2965](https://github.com/apollographql/apollo-ios/pull/2965) _Thank you to [@renanbdias](https://github.com/renanbdias) for raising the issue._\r\n- **Disallow certain targetNames in code generation ([#2958](https://github.com/apollographql/apollo-ios/issues/2958)):** `apollo` is no longer allowed as a target name otherwise it causes a conflict when importing `Apollo` as a module. [#2972](https://github.com/apollographql/apollo-ios/pull/2972) _Thank you to [@moopoints](https://github.com/moopoints) for raising the issue._\r\n- **Fully Qualify name of RootEntityType and mergedSources ([#2949](https://github.com/apollographql/apollo-ios/issues/2949)):** Selection set types use fully qualified namespacing to prevent conflicts with other types. [#2956](https://github.com/apollographql/apollo-ios/pull/2956) _Thank you to [@martin-muller](https://github.com/martin-muller) for raising the issue._\r\n- **SelectionSet Codegen `__typename` fix ([#2955](https://github.com/apollographql/apollo-ios/issues/2955)):** Custom root types defined in the schema are now correctly applied to selection set fields typename definitions [#2983](https://github.com/apollographql/apollo-ios/pull/2983) _Thank you to [@ynnadrules](https://github.com/ynnadrules) for raising the issue._",
    "createdAt" : "2023-05-02T03:42:30+09:00",
    "fetchedFromAPIAt" : "2023-05-02T09:44:38+09:00",
    "id" : "RE_kwDOA9NCTc4GDKKX",
    "owner" : "apollographql",
    "publishedAt" : "2023-05-02T03:56:46+09:00",
    "repository" : "apollo-ios",
    "title" : "1.1.3",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.1.3",
    "version" : "1.1.3"
  },
  {
    "body" : "Though 1.2 is a minor version bump, a critical problem was addressed in this version that requires a small breaking change during the upgrade.  While we strive to make the upgrade path for minor versions seamless, this issue could not be reasonably resolved without requiring this migration.\r\n\r\n**For most users, this migration will only require a single change to your `SchemaConfiguration.swift` file.**\r\n\r\nFor a detailed explanation of the breaking changes and a guide on how to migrate to v1.2, see our [migration guide](https://www.apollographql.com/docs/ios/migrations/1.2).\r\n\r\n### Breaking\r\n- **Cache Key Configuration API Changes ([#2990](https://github.com/apollographql/apollo-ios/pull/2990)):** The API for configuring custom cache keys has had a minor change in this version. The signature of the `cacheKeyInfo(for:object:)` function, defined in your generated SchemaConfiguration.swift file, has been modified. For more information, see our [migration guide](https://www.apollographql.com/docs/ios/migrations/1.2).\r\n\r\n### Improved\r\n- **Improved performance of GraphQL execution ([#2990](https://github.com/apollographql/apollo-ios/pull/2990)):** Improvements to the `GraphQLExecutor` resulted in a ~15-20% reduction in execution time for parsing and mapping network response or cache data onto generated models.\r\n- **Improved performance of generated model initialization and type conversions ([#2990](https://github.com/apollographql/apollo-ios/pull/2990)):** The `DataDict` used to store the data for generated models has been updated to use copy-on-write value semantics. This resulted in a ~70-80% reduction in the execution time of initialization and type case conversions in the generated models.\r\n\r\n### Fixed\r\n- **Pruning generated files for `.relative(subpath:)` operations ([#2969](https://github.com/apollographql/apollo-ios/issues/2969)):** See PR [#2994](https://github.com/apollographql/apollo-ios/pull/2994). _Thank you to [@jimisaacs](https://github.com/jimisaacs) for raising the issue._\r\n- **InputObjects generated with incorrect getter/setter key ([#2858](https://github.com/apollographql/apollo-ios/issues/2858)):** See PR [#2996](https://github.com/apollographql/apollo-ios/pull/2996). _Thank you to [@Austinpayne](https://github.com/Austinpayne) for raising the issue._\r\n- **Generates conflicting types for fields of singular and plural names ([#2850](https://github.com/apollographql/apollo-ios/issues/2850)):** See PR [#3009](https://github.com/apollographql/apollo-ios/pull/3009). _Thank you to [@sgade](https://github.com/sgade) for raising the issue._\r\n- **Equality operator shows incorrect values based on value of `__fulfilled` ([#2944](https://github.com/apollographql/apollo-ios/issues/2944)):** See PR [#2990](https://github.com/apollographql/apollo-ios/pull/2990). _Thank you to [@scottasoutherland](https://github.com/scottasoutherland) for raising the issue._\r\n\r\n### New\r\n- **Add option to generate objects with `internal` access modifier ([#2630](https://github.com/apollographql/apollo-ios/issues/2630)):** See PR [#2917](https://github.com/apollographql/apollo-ios/pull/2917). _Thank you to [@simonbilskyrollins](https://github.com/simonbilskyrollins) for the feature request._",
    "createdAt" : "2023-05-16T11:21:29+09:00",
    "fetchedFromAPIAt" : "2023-05-17T09:45:50+09:00",
    "id" : "RE_kwDOA9NCTc4GJPO7",
    "owner" : "apollographql",
    "publishedAt" : "2023-05-16T11:24:28+09:00",
    "repository" : "apollo-ios",
    "title" : "1.2.0",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.2.0",
    "version" : "1.2.0"
  },
  {
    "body" : "### Improved\r\n- **Added new validation to alert users to type naming conflict when running code generation([#2405](https://github.com/apollographql/apollo-ios/issues/2405)):** See PR [#3041](https://github.com/apollographql/apollo-ios/pull/3041).\r\n\r\n### Fixed\r\n- **Int values failing to cast to Scalar Type during cache key resolution ([#3034](https://github.com/apollographql/apollo-ios/issues/3034)):** See PR [#3037](https://github.com/apollographql/apollo-ios/pull/3037). _Thank you to [@asbhat](https://github.com/asbhat) for raising the issue._\r\n- **Fix malformed RootEntityType on generated fragment with `@include` condition. ([#2962](https://github.com/apollographql/apollo-ios/issues/2962)):** See PR [#3045](https://github.com/apollographql/apollo-ios/pull/3045). _Thank you to [@alexisbronchart](https://github.com/alexisbronchart) for raising the issue._",
    "createdAt" : "2023-06-03T03:53:28+09:00",
    "fetchedFromAPIAt" : "2023-06-04T09:56:09+09:00",
    "id" : "RE_kwDOA9NCTc4GT4sI",
    "owner" : "apollographql",
    "publishedAt" : "2023-06-03T03:56:29+09:00",
    "repository" : "apollo-ios",
    "title" : "1.2.1",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.2.1",
    "version" : "1.2.1"
  },
  {
    "body" : "### Added\r\n- **Support SOCKS proxies for debugging websocket based subscriptions([#2788](https://github.com/apollographql/apollo-ios/issues/2788)):** _Thank you to [@tahirmit](https://github.com/tahirmt) for the contribution._ \r\n\r\n### Fixed\r\n- **Fix conversion of generated models into nested type cases ([#2989](https://github.com/apollographql/apollo-ios/issues/2989) & [#2980](https://github.com/apollographql/apollo-ios/issues/2980)):** In some cases, the generated models were missing types when calculating which fragments were fulfilled for a selection set. This was causing type case conversion to return `nil` incorrectly. See PR [#3067](https://github.com/apollographql/apollo-ios/pull/3067). _Thank you to [@tgyhlsb](https://github.com/tgyhlsb) and [@dafurman](https://github.com/dafurman) for raising these issues._\r\n- **Fix crashes in code generation when merging fragments at definition root ([#3071](https://github.com/apollographql/apollo-ios/issues/3071)):** When fragments with type conditions were defined on the root of an operation or named fragment, the code generation engine was crashing. See PR [#3073](https://github.com/apollographql/apollo-ios/pull/3073). _Thank you to [@tahirmit](https://github.com/tahirmt) for raising and helping us reproduce this issue._\r\n- **Fix parsing of input objects as default values for input params ([#2978](https://github.com/apollographql/apollo-ios/issues/2978)):** The codegen engine will no longer crash in this situation. _Thank you to [@ecunha-ta](https://github.com/ecunha-ta) for raising the issue._",
    "createdAt" : "2023-06-16T05:23:25+09:00",
    "fetchedFromAPIAt" : "2023-06-16T09:47:32+09:00",
    "id" : "RE_kwDOA9NCTc4GfAps",
    "owner" : "apollographql",
    "publishedAt" : "2023-06-16T05:30:58+09:00",
    "repository" : "apollo-ios",
    "title" : "1.2.2",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.2.2",
    "version" : "1.2.2"
  },
  {
    "body" : "Though `1.3.0` is a minor version bump, some critical issues were addressed in this version that requires a small breaking change during the upgrade.  While we strive to make the upgrade path for minor versions seamless, these issues could not be reasonably resolved without requiring this migration.\r\n\r\nFor a detailed explanation of the breaking changes and a guide on how to migrate to `1.3.0`, see our [migration guide](https://www.apollographql.com/docs/ios/migrations/1.3).\r\n\r\n### Breaking\r\n- **Using reserved keyword `Type` as in selection fields does not compile ([#3006](https://github.com/apollographql/apollo-ios/issues/3006)):** See PR [#3058](https://github.com/apollographql/apollo-ios/pull/3058). _Thank you to [@Nielssg](https://github.com/Nielssg) for raising the issue._\r\n- **Memory leak from `InterceptorRequestChain` when ending the chain with `returnValueAsync` ([#3057](https://github.com/apollographql/apollo-ios/issues/3057)):** See PR [#3070](https://github.com/apollographql/apollo-ios/pull/3070). _Thank you to [@marksvend](https://github.com/marksvend) for raising the issue._",
    "createdAt" : "2023-06-21T04:52:02+09:00",
    "fetchedFromAPIAt" : "2023-06-21T09:47:25+09:00",
    "id" : "RE_kwDOA9NCTc4Gg4bm",
    "owner" : "apollographql",
    "publishedAt" : "2023-06-21T04:55:39+09:00",
    "repository" : "apollo-ios",
    "title" : "1.3.0",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.3.0",
    "version" : "1.3.0"
  },
  {
    "body" : "### Fixed\r\n- **Fix crashes in test mocks when setting an array of union types ([#3023](https://github.com/apollographql/apollo-ios/pull/3023)):** See PR ([#3089](https://github.com/apollographql/apollo-ios/pull/3089)). _Thank you to [@jabeattie](https://github.com/jabeattie) & [@scottasoutherland](https://github.com/scottasoutherland) for raising the issue._\r\n\r\n### Deprecated\r\n- **Deprecated `APQConfig` & `operationIdentifiersPath` in `ApolloCodegenConfiguration`.** \r\n  - These have been replaced with `OperationDocumentFormat` and `OperationManifestFileOutput` respectively. Please see the documentation for [`ApolloCodegenConfiguration`](https://www.apollographql.com/docs/ios/code-generation/codegen-configuration) for more information.",
    "createdAt" : "2023-07-13T06:19:05+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOA9NCTc4GrVGV",
    "owner" : "apollographql",
    "publishedAt" : "2023-07-13T06:20:49+09:00",
    "repository" : "apollo-ios",
    "title" : "1.3.1",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.3.1",
    "version" : "1.3.1"
  },
  {
    "body" : "### Improved\r\n- **Throw an error when an invalid key is present in the codegen configuration JSON ([#2942](https://github.com/apollographql/apollo-ios/issues/2942)):** See PR ([#3125](https://github.com/apollographql/apollo-ios/pull/3125)) _Thank you to [@Iron-Ham](https://github.com/Iron-Ham) for the contribution._\r\n- **Cleanup unused imports and declarations. ([#3099](https://github.com/apollographql/apollo-ios/issues/3099)):** See PR ([#3100](https://github.com/apollographql/apollo-ios/pull/3100)) _Thank you to [@Iron-Ham](https://github.com/Iron-Ham) for raising the issue and contributing the fix._\r\n- **Improvement to response code error API ([#2426](https://github.com/apollographql/apollo-ios/issues/2426)):** See PR ([#3123](https://github.com/apollographql/apollo-ios/pull/3123)). _Thank you to [@dfperry5](https://github.com/dfperry5) for the contribution._\r\n- **Improved file path support for operation manifest generation:** See PR ([#3128](https://github.com/apollographql/apollo-ios/pull/3128))\r\n\r\n### Fixed\r\n- **Fix two issues in test mock generation:** See PR ([#3120](https://github.com/apollographql/apollo-ios/pull/3120)). _Thank you to [@TizianoCoroneo](https://github.com/TizianoCoroneo) for finding this issue and contributing the fix._\r\n- **Fixed precondition failure when surpassing graphql-js max error count ([#3126](https://github.com/apollographql/apollo-ios/issues/3126)):** See PR ([#3132](https://github.com/apollographql/apollo-ios/pull/3132)).\r\n\r\n### Deprecated\r\n- **Deprecated `queryStringLiteralFormat` in `ApolloCodegenConfiguration`:** Query string literals will now always be generated as single line strings. See PR ([#3129](https://github.com/apollographql/apollo-ios/pull/3129)).",
    "createdAt" : "2023-07-21T07:07:39+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOA9NCTc4GvN67",
    "owner" : "apollographql",
    "publishedAt" : "2023-07-21T07:11:23+09:00",
    "repository" : "apollo-ios",
    "title" : "1.3.2",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.3.2",
    "version" : "1.3.2"
  },
  {
    "body" : "### New\r\n\r\n- **Added the ability pass a custom `RequestContext` to networking APIs ([#3198](https://github.com/apollographql/apollo-ios/pull/3198)):** _Thank you to [@danieltiger](https://github.com/danieltiger) for the contribution._\r\n  - **Minor Breaking Change:** The `requestContext` parameter is optional with a default value of `nil`. This means there are no breaking changes to the APIs for making networking calls. However, the `requestContext` parameter was also added to the `ApolloClientProtocol`. For custom implementations of this protocol (usually used for unit testing), you will need to add the `requestContext` parameter to your function signatures.\r\n  \r\n### Fixed\r\n\r\n- **Null values are no longer stripped from the underlying data used by generated `SelectionSet` models ([apollo-ios-dev/#25](https://github.com/apollographql/apollo-ios-dev/pull/25)):**\r\n  - When these models were manually inserted into the cache, the null fields, which were stripped, were not written to the cache. This caused unintended cache misses when fetching those values back out of the cache.\r\n  - This fixes [#3092](https://github.com/apollographql/apollo-ios/issues/3092). _Thank you to [@aleksanderlorenc-lw](https://github.com/aleksanderlorenc-lw) for raising this issue._ ",
    "createdAt" : "2023-09-06T05:51:53+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOA9NCTc4HJ1aR",
    "owner" : "apollographql",
    "publishedAt" : "2023-09-06T06:07:16+09:00",
    "repository" : "apollo-ios",
    "title" : "1.5.0",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.5.0",
    "version" : "1.5.0"
  },
  {
    "body" : "### Improvement\r\n\r\n- **Added `OutputOptions` property to codegen for marking generated classes as `final` ([#3189](https://github.com/apollographql/apollo-ios/pull/3189)):** _Thank you to [@Mordil](https://github.com/Mordil) for the contribution._\r\n\r\n### Fixed\r\n\r\n- **Codegen `itemsToGenerate` option for `.all` not generating an operation manifest ([#3215](https://github.com/apollographql/apollo-ios/pull/3215)):** _Thank you to [@TizianoCoroneo](https://github.com/TizianoCoroneo) for finding and fixing the issue._\r\n- **Codegen operation manifest inadvertantly being generated twice ([#3225](https://github.com/apollographql/apollo-ios/pull/3225)):** _Thank you to [@jimisaacs](https://github.com/jimisaacs) for finding and fixing the issue._",
    "createdAt" : "2023-09-30T04:44:50+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOA9NCTc4HV3KZ",
    "owner" : "apollographql",
    "publishedAt" : "2023-09-30T04:47:42+09:00",
    "repository" : "apollo-ios",
    "title" : "1.5.1",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.5.1",
    "version" : "1.5.1"
  },
  {
    "body" : "The purpose of this release is to provide a deprecation message to users of `ApolloCodegenLib` who are scripting their code generation in advance of an upcoming change to our libraries and repo structure. Beginning with the upcoming 1.6.0 release the code generation libraries will be their own SPM package in their own repo which will require you to add a new dependency to you project in order for your code generation scripting to compile. More information can be found in our [announcement](https://github.com/apollographql/apollo-ios/issues/3240) of this change.\r\n\r\n**If you would like to avoid this deprecation warning in your builds feel free to stay on 1.5.1 or earlier, this warning will be gone in the 1.6.0 release**\r\n\r\nPR containing deprecation warning for reference: [#3243](https://github.com/apollographql/apollo-ios/pull/3243).",
    "createdAt" : "2023-09-30T05:08:52+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOA9NCTc4HV3u7",
    "owner" : "apollographql",
    "publishedAt" : "2023-09-30T05:10:39+09:00",
    "repository" : "apollo-ios",
    "title" : "1.5.2",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.5.2",
    "version" : "1.5.2"
  },
  {
    "body" : "The Apollo iOS ecosystem is changing in the 1.6.0 release in order to provide a better development experience for users. For most users nothing will change, while some users will see a minor difference. The biggest change is that the `ApolloCodegenLib` is now in a separate repo/package that will need to be included as its own dependency from [apollo-ios-codegen](https://github.com/apollographql/apollo-ios-codegen) if you are doing your code generation through Swift. If you are using the codegen CLI then no changes are necessary.\r\n\r\nFor a detailed breakdown of the changes please see this [GitHub Issue](https://github.com/apollographql/apollo-ios/issues/3240).\r\n\r\n### Fixed\r\n\r\n- **Fixed crashes in iOS 14.4 and below ([#61](https://github.com/apollographql/apollo-ios-dev/pull/61)):** _Thank you to [matijakregarGH](https://github.com/matijakregarGH) for reporting the issue._",
    "createdAt" : "2023-10-07T03:59:21+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOA9NCTc4HZZc2",
    "owner" : "apollographql",
    "publishedAt" : "2023-10-07T04:06:14+09:00",
    "repository" : "apollo-ios",
    "title" : "1.6.0",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.6.0",
    "version" : "1.6.0"
  },
  {
    "body" : "### Fixed\r\n\r\n- **Fix bug with `AnyHashable` coercion ([#68](https://github.com/apollographql/apollo-ios-dev/pull/68)):** This is an additional fix for the crashes on iOS `14.4.1`.",
    "createdAt" : "2023-10-13T07:55:54+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOA9NCTc4Hcepo",
    "owner" : "apollographql",
    "publishedAt" : "2023-10-13T08:03:23+09:00",
    "repository" : "apollo-ios",
    "title" : "1.6.1",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.6.1",
    "version" : "1.6.1"
  },
  {
    "body" : "**`ApolloCodegenLib` Now Uses Swift Concurrency**\r\nTo improve the performance of the code generation, the `ApolloCodegenLib` now uses `async/await`. Code generation is now parallelized and should complete much faster for users with a large number of GraphQL files.\r\nThis means that the entry point function, `ApolloCodegen.build(with configuration:)` is now an `async` function. For users using the `ApolloCodegenLib` directly, you will need to make your call sites into this function use `async/await`. In most cases, this requires minimal code changes. Please see the [1.7.0 migration guide](https://www.apollographql.com/docs/ios/migrations/1.7) for information on how to upgrade.\r\n\r\nSee PR [#57](https://github.com/apollographql/apollo-ios-dev/pull/57).\r\n\r\n### Fixed\r\n\r\n- **Fixed a bug with ApolloAPI.Object clashing with custom objects name Object ([#94](https://github.com/apollographql/apollo-ios-dev/pull/94)):** _Thank you to [215eight](https://github.com/215eight) for reporting the issue._",
    "createdAt" : "2023-11-02T05:52:28+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOA9NCTc4HmvDY",
    "owner" : "apollographql",
    "publishedAt" : "2023-11-02T05:53:12+09:00",
    "repository" : "apollo-ios",
    "title" : "1.7.0",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.7.0",
    "version" : "1.7.0"
  },
  {
    "body" : "### Fixed\r\n\r\n- **Fixed inconsistent ordering of fragments in generated operation definitions  ([#130](https://github.com/apollographql/apollo-ios-dev/pull/130)):** In order to make the ordering of fragments consistent, they are now alphabetized. This is a change to the data that gets sent over the wire when making a network request for an operation with fragments. **[Persisted Queries](https://www.apollographql.com/docs/ios/fetching/persisted-queries) users should re-register their queries when upgrading to this version.** _Thank you to [@scottasoutherland](https://github.com/scottasoutherland) for reporting the issue._\r\n\r\n### Improvement\r\n\r\n- **Add initializer for `SelectionSet` that takes a `[String: Any]` JSON object ([#102](https://github.com/apollographql/apollo-ios-dev/pull/102)):** _Thank you to [@Cookiezby](https://github.com/Cookiezby) for the contribution._",
    "createdAt" : "2023-11-14T07:03:05+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOA9NCTc4HtAi1",
    "owner" : "apollographql",
    "publishedAt" : "2023-11-14T07:03:19+09:00",
    "repository" : "apollo-ios",
    "title" : "1.7.1",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.7.1",
    "version" : "1.7.1"
  },
  {
    "body" : "### Fixed\r\n\r\n- **Fix injecting of context for UploadRequest:** Any request context passed into an upload request was not being added to the HTTP request and would not be available to the interceptor chain. See PR ([#302](https://github.com/apollographql/apollo-ios-dev/pull/302)). _Thanks to [@RobertDresler](https://github.com/RobertDresler) for the contribution._\r\n- **Added support for SPM Package.resolved format version 3 ([#3355](https://github.com/apollographql/apollo-ios/issues/3355)):** When using Xcode 15.3 the codegen CLI would fail the `generate` command with an error stating the Package.resolve file version is unsupported. Version 3 is now accepted as a valid file format for the codegen version checker. See PR ([#304](https://github.com/apollographql/apollo-ios-dev/pull/304)).\r\n- **PrivacyInfo.xcprivacy file is invalid for Apollo and ApolloApi ([#3359](https://github.com/apollographql/apollo-ios/issues/3359)):** We received reports that when submitting to the App Store the submission would fail with an error stating that the privacy manifests were invalid. We identified the error and updated the privacy files. See PR ([#309](https://github.com/apollographql/apollo-ios-dev/pull/309)). _Thanks to [@azilbershtein](https://github.com/azilbershtein) for raising the issue._\r\n\r\n### Improvement\r\n\r\n- **Provide a direct means to observe changes in ApolloStore:** `ApolloStore` now exposes it's subscriber mechanism publicly. This means you can now observe and receive notifications about changes to the store. See PR ([#300](https://github.com/apollographql/apollo-ios-dev/pull/300)). _Thanks to [@jamesonwilliams](https://github.com/jamesonwilliams) for the contribution._\r\n- **Remove redundant iteration in EntitySelectionTree merging algorithm:** The conditions for merging selections were revisited and we identified, and removed, a redundant iteration. This is a significant performance improvement as it removes an entire additional iteration through all the conditional scopes in the tree. See PR ([#308](https://github.com/apollographql/apollo-ios-dev/pull/308)).",
    "createdAt" : "2024-03-23T05:29:05+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOA9NCTc4I0jUf",
    "owner" : "apollographql",
    "publishedAt" : "2024-03-23T05:36:20+09:00",
    "repository" : "apollo-ios",
    "title" : "1.9.3",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.9.3",
    "version" : "1.9.3"
  },
  {
    "body" : "This is the second preview release of `@defer` support in Apollo iOS which focuses on providing early access to using the `@defer` directive in your operations. During preview releases bugs can occur, if you do experience anything unexpected please report it to us.\r\n\r\n**Note:** Apollo supports a very specific version of the `@defer` directive proposal as documented [here](https://www.apollographql.com/docs/router/executing-operations/defer-support#specification-status). The `@defer` directive is still in the proposal stage and is not an official addition to the [GraphQL specification](https://spec.graphql.org/draft/) yet. This means that Apollo iOS may not work with all servers that currently support `@defer`.\r\n\r\n### In this release\r\n* Fixed: If your schema explicitly declared the `@defer` directive then an error about duplicate directives would be thrown during code generation.\r\n* Fixed: In some cases the operation metadata for deferred fragments may have been generated with incorrect Swift syntax resulting in a build error.\r\n\r\n### How to use it\r\nWe have a [sample schema/server that supports `@defer`](https://github.com/apollographql/client-router-e2e-tests/tree/main) and can be  launched using the [Docker configuration](https://github.com/apollographql/client-router-e2e-tests/blob/main/scripts/docker-compose.router.yml).\r\n\r\nOnce you have that service launched you can configure your Apollo iOS client to target the `apollo-ios` and `apollo-ios-codegen` dependency packages using the `preview-defer.2` tag. Below is an example query using `@defer` against the schema.\r\n```\r\nquery ExampleQuery {\r\n  allProducts {\r\n    sku\r\n    id\r\n    ... on Product @defer(label: \"additional\") {\r\n      dimensions {\r\n        size\r\n      }\r\n      variation {\r\n        id\r\n        name\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nAlternatively [here](https://github.com/apollographql/apollo-ios/files/13845848/DeferExampleClient.zip) is a sample client to demonstrate the code generation and operation execution of the `@defer` directive.\r\n\r\n**Caveats in this preview release**\r\n* Caching is intentionally disabled for operations using `@defer`.",
    "createdAt" : "2024-04-05T08:59:57+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOA9NCTc4I7urj",
    "owner" : "apollographql",
    "publishedAt" : "2024-04-05T11:31:11+09:00",
    "repository" : "apollo-ios",
    "title" : "preview-defer.2",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/preview-defer.2",
    "version" : "preview-defer.2"
  },
  {
    "body" : "This is the first preview release of `@defer` support in Apollo iOS which focuses on providing early access to using the `@defer` directive in your operations. During preview releases bugs can occur, if you do experience anything unexpected please report it to us.\r\n\r\n**Note:** Apollo supports a very specific early RFC version of the `@defer` directive as documented [here](https://www.apollographql.com/docs/router/executing-operations/defer-support#specification-status). The `@defer` directive is still an RFC and is not an official addition to the [GraphQL specification](https://spec.graphql.org/draft/) yet. This means that Apollo iOS may not work with all servers that currently support `@defer`.\r\n\r\n**How to use it**\r\nWe have a [sample schema/server that supports `@defer`](https://github.com/apollographql/client-router-e2e-tests/tree/main) and can be  launched using the [Docker configuration](https://github.com/apollographql/client-router-e2e-tests/blob/main/scripts/docker-compose.router.yml).\r\n\r\nOnce you have that service launched you can configure your Apollo iOS client to target the `apollo-ios` and `apollo-ios-codegen` dependency packages using the `preview-defer.1` tag. Below is an example query using `@defer` against the schema.\r\n```\r\nquery ExampleQuery {\r\n  allProducts {\r\n    sku\r\n    id\r\n    ... on Product @defer(label: \"additional\") {\r\n      dimensions {\r\n        size\r\n      }\r\n      variation {\r\n        id\r\n        name\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nAlternatively [here](https://github.com/apollographql/apollo-ios/files/13845848/DeferExampleClient.zip) is a sample client to demonstrate the code generation and operation execution of the `@defer` directive.\r\n\r\n**Caveats in this preview release**\r\n* Caching is intentionally disabled for operations using `@defer`.",
    "createdAt" : "2024-01-06T03:17:29+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOA9NCTc4IG2pp",
    "owner" : "apollographql",
    "publishedAt" : "2024-01-06T04:34:34+09:00",
    "repository" : "apollo-ios",
    "title" : "preview-defer.1",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/preview-defer.1",
    "version" : "preview-defer.1"
  },
  {
    "body" : "### Fixed\r\n- **Duplicate `@defer` directive error ([#235](https://github.com/apollographql/apollo-ios-dev/pull/235)):** When executing codegen against Apollo Router and a schema that supports the `@defer` directive it would fail with an error stating the directive is duplicated.\r\n\r\n### Changed\r\n- **InstallCLI plugin updates ([#132](https://github.com/apollographql/apollo-ios-dev/pull/132)):** The InstallCLI plugin now downloads the CLI binary from GitHub. This requires that we update the `swift-tools-version` to `5.9`, therefore **Xcode 15 is now the minimum version of Xcode allowed.**\r\n\r\n### Improvement\r\n\r\n- **Added `InputObject` casing strategy ([#137](https://github.com/apollographql/apollo-ios-dev/pull/137)):** We've added a new casing strategy option for InputObjects which mimics the behaviour of the enum case conversion strategy. _Thank you to [@alexifrim](https://github.com/alexifrim) for raising this in issue [#3257](https://github.com/apollographql/apollo-ios/issues/3257)._\r\n- **Added `GraphQLResult` conversion extension ([#139](https://github.com/apollographql/apollo-ios-dev/pull/139)):** `GraphQLResult` response data can now be easily converted into a JSON dictionary. This is useful for taking server response data and serializing it into a JSON dictionary which can then be used in a test suite.\r\n- **Codegen performance improvements ([#152](https://github.com/apollographql/apollo-ios-dev/pull/152)):** There has been a bunch of refactoring work to prepare for future codegen features but we've also managed to squeeze out some performance improvements.",
    "createdAt" : "2024-01-13T07:08:02+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOA9NCTc4IKQCm",
    "owner" : "apollographql",
    "publishedAt" : "2024-01-13T07:29:12+09:00",
    "repository" : "apollo-ios",
    "title" : "1.8.0",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.8.0",
    "version" : "1.8.0"
  },
  {
    "body" : "### Improvement\r\n\r\n- **New import directive for operations:** GraphQL operations now support a directive to control custom module import statements in the generated file. Any operation that includes the directive `@import(module:)`, on the defintion line, with a supplied `String` as the module name will have that module used in a Swift `import` statement at the top of the operation file and any referenced fragments. _Thank you to [@hemel](https://github.com/hemel) for the contribution ([#236](https://github.com/apollographql/apollo-ios-dev/pull/236) / [#245](https://github.com/apollographql/apollo-ios-dev/pull/245))._\r\n\r\n### Fixed\r\n\r\n- **The `fragmentDefinition` remains in all generated fragments when `operationDocumentFormat` does not include `.definition` ([#3282](https://github.com/apollographql/apollo-ios/issues/3282)):** Code generation will now only generate definitions in fragment files if the `operationDocumentFormat` config contains the `.definition` value ([#218](https://github.com/apollographql/apollo-ios-dev/pull/218)). _Thank you to [@jimisaacs](https://github.com/jimisaacs) for raising the issue._\r\n- **Custom scalar file header comment ([#3323](https://github.com/apollographql/apollo-ios/issues/3323)):** The header comment for generated custom scalar files was incorrectly changed to state that the output \"should not be edited\" but the file content could still be edited and would not be overwritten. The header comment has been changed back to state that the contents will be preserved during subsequent codegen executions. _Thank you to [@matsudamper](https://github.com/matsudamper) for raising the issue and the contribution to fix it ([#243](https://github.com/apollographql/apollo-ios-dev/pull/243))._\r\n\r\n### Changed\r\n\r\n- **WebSocket disconnection errors are no longer printed to stdout ([#3325](https://github.com/apollographql/apollo-ios/issues/3325)):** See PR ([#253](https://github.com/apollographql/apollo-ios-dev/pull/253)) _Thank you to [@sgade](https://github.com/sgade) for raising the issue._\r\n",
    "createdAt" : "2024-02-03T08:25:05+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOA9NCTc4IVE6u",
    "owner" : "apollographql",
    "publishedAt" : "2024-02-03T08:40:08+09:00",
    "repository" : "apollo-ios",
    "title" : "1.9.0",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.9.0",
    "version" : "1.9.0"
  },
  {
    "body" : "### Fixed\r\n\r\n- **`SelectionSet` generated initializers don't compile with `self` parameter ([#3330](https://github.com/apollographql/apollo-ios/issues/3330)):** Selection set initializers now use a local property name when the external property name is a Swift reserved word; see PR [#257](https://github.com/apollographql/apollo-ios-dev/pull/257). _Thanks to [@grantjbutler](https://github.com/grantjbutler) for raising the issue._\r\n- **asXXXXXXX property on a union never returning `nil` if selection set empty ([#3326](https://github.com/apollographql/apollo-ios/issues/3326)):** - The codegen logic to determine whether a selection set is composite or not has been improved to handle the case when `__typename` was the only field in the selection set; see PR [#261](https://github.com/apollographql/apollo-ios-dev/pull/261). _Thanks to [@vincentisambart](https://github.com/vincentisambart) for raising the issue._\r\n\r\n### Improvement\r\n\r\n- **Feature/ContextIdentifier for the mutate queries ([#281](https://github.com/apollographql/apollo-ios-dev/pull/281)):** Mutation operations can now be given a context identifier to be used later in the request. _Thanks to [@VladimirK-ah](https://github.com/VladimirK-ah) for the contribution._",
    "createdAt" : "2024-03-05T05:05:03+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOA9NCTc4IoD2T",
    "owner" : "apollographql",
    "publishedAt" : "2024-03-05T05:34:32+09:00",
    "repository" : "apollo-ios",
    "title" : "1.9.1",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.9.1",
    "version" : "1.9.1"
  },
  {
    "body" : "Alongside the release of Apollo iOS 1.9.2, we are excited to announce the release of [Apollo iOS Pagination](https://github.com/apollographql/apollo-ios-pagination)! This package works alongside the Apollo iOS Client to make fetching and caching of paginated data a lot easier! Fetching paginated data has always been a pain point with our mobile clients, and an elegant solution for this has been a common feature request for many years. This library is feature rich and highly configurable, so we believe that it will be able to make this previously complex and difficult task a lot easier for our users!\r\n\r\nThis library supports:\r\n- Reading/Writing paginated data with an Apollo NormalizedCache\r\n- Watching paginated data for changes\r\n- Forward, Reverse, and Bi-directional pagination\r\n- Cursor-based, offset-based, and custom pagination mechanisms\r\n\r\nThis library is currently released as a 0.x version and is in active development. The API is subject to breaking changes until the stable 1.0 release. We hope that you will check it out and give us your feedback so that we can address any API improvements, edge cases, bugs, or valuable features we hadn’t considered before moving to a 1.0 release soon!\r\n\r\nTo learn more about Apollo iOS Pagination, see our [usage docs](https://www.apollographql.com/docs/ios/pagination/introduction).\r\n\r\n### Fixed\r\n\r\n- **Backwards Compatibility issues in 1.9.1:** 1.9.1 introduced a minor breaking change for some users who were creating a custom implementaiton of `ApolloClientProtocol`. Sorry about that! This patch release fixed the compatiblity. See PR [#290](https://github.com/apollographql/apollo-ios-dev/pull/290). _Thanks to [@michaelloo](https://github.com/michaelloo) for raising the issue._\r\n\r\n### Improvement\r\n\r\n- **Session and task descriptions parameters added to `URLSessionClient` ([#286](https://github.com/apollographql/apollo-ios-dev/pull/286)):** The `URLSessionClient` now allows you to set a `sessionDescription` on the session and `taskDescription` on each task. These are helpful when debugging, especially when analyzing HTTP traffic with Instruments. _Thanks to [@hishma](https://github.com/hishma) for the contribution._",
    "createdAt" : "2024-03-09T06:56:14+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOA9NCTc4IrTSi",
    "owner" : "apollographql",
    "publishedAt" : "2024-03-09T07:02:16+09:00",
    "repository" : "apollo-ios",
    "title" : "1.9.2",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.9.2",
    "version" : "1.9.2"
  },
  {
    "body" : "### New\r\n- **Experimental support for the `@defer` directive:** You can now use the `@defer` directive in your operations and code generation will generate models that support asynchronously receiving the deferred selection sets. There is a helpful property wrapper with a projected value to determine the state of the deferred selection set, and support for cache reads and writes. This feature is enabled by default but is considered [experimental](https://www.apollographql.com/docs/resources/product-launch-stages/#experimental-features). Please refer to the [documentation](https://www.apollographql.com/docs/ios/fetching/defer/) for further details.\r\n- **Add `debugDescription` to `SelectionSet` ([#3374](https://github.com/apollographql/apollo-ios/issues/3374)):** This adds the ability to easily print code generated models to the Xcode debugger console. See PR [#412](https://github.com/apollographql/apollo-ios-dev/pull/412). _Thanks to [@raymondk-nf](https://github.com/raymondk-nf) for raising the issue._\r\n- **Xcode 16 editor config files ([#3404](https://github.com/apollographql/apollo-ios/issues/3404)):** Xcode 16 introduced support for `.editorconfig` files that represent settings like spaces vs. tabs, how many spaces per tab, etc. We've added a `.editorconfig` file with the projects preferred settings, so that the editor will use them automatically. See PR [#419](https://github.com/apollographql/apollo-ios-dev/pull/419). _Thanks to [@TizianoCoroneo](https://github.com/TizianoCoroneo) for raising the issue._\r\n\r\n### Fixed\r\n- **Local cache mutation build error in Swift 6 ([#3398](https://github.com/apollographql/apollo-ios/issues/3398)):** Mutating a property of a fragment annotated with the `@apollo_client_ios_localCacheMutation` directive caused a compile time error in Xcode 16 with Swift 6. See PR [#417](https://github.com/apollographql/apollo-ios-dev/pull/417). _Thanks to [@martin-muller](https://github.com/martin-muller) for raising the issue._",
    "createdAt" : "2024-07-20T06:48:54+09:00",
    "fetchedFromAPIAt" : "2024-07-20T09:59:18+09:00",
    "id" : "RE_kwDOA9NCTc4J6ahq",
    "owner" : "apollographql",
    "publishedAt" : "2024-07-20T07:00:51+09:00",
    "repository" : "apollo-ios",
    "title" : "1.14.0",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.14.0",
    "version" : "1.14.0"
  },
  {
    "body" : "### New\r\n\r\n- **Added support for visionOS ([#3320](https://github.com/apollographql/apollo-ios/issues/3320)):** All the dependecies that Apollo iOS requires have been updated to add support for visionOS, so we can now add official support for visionOS too. See PR [#333](https://github.com/apollographql/apollo-ios-dev/pull/333).\r\n\r\n### Improvement\r\n\r\n- **Add Sendable conformance to some basic SchemaTypes:** This adds `Sendable` conformance to the some of the generated schema types. This does not mean that all of the generated code is safe to use yet with complete concurrency checking of Swift 5.10 but it gets us closer to that goal. See PR [#322](https://github.com/apollographql/apollo-ios-dev/pull/322). _Thanks to [@bdbergeron](https://github.com/bdbergeron) for the contributon._",
    "createdAt" : "2024-04-16T05:31:27+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOA9NCTc4JA-Fj",
    "owner" : "apollographql",
    "publishedAt" : "2024-04-16T05:41:07+09:00",
    "repository" : "apollo-ios",
    "title" : "1.10.0",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.10.0",
    "version" : "1.10.0"
  },
  {
    "body" : "### New\r\n\r\n- **Added `refetchOnFailedUpdates` option to `GraphQLQueryWatcher` ([#347](https://github.com/apollographql/apollo-ios-dev/pull/347)):** This allows you to configure the query watcher not to refetch it's query from the server when a cache read to update it's data fails.\r\n \r\n### Fixed\r\n\r\n- **Generated input objects have default `nil` value for parameters with a schema-defined default value ([#2997](https://github.com/apollographql/apollo-ios/issues/2997)):** When the schema defines a default value for an input parameter, you can now omit that parameter when initializing the input object and the default value will be used. This corrects feature parity with the Apollo Kotlin client. See PR [#358](https://github.com/apollographql/apollo-ios-dev/pull/358).\r\n\r\n- **Fix namespacing error in `InterfaceTemplate` ([#3375](https://github.com/apollographql/apollo-ios/issues/3375)):** This fixes an issue where having a schema type named `Interface` caused compilation errors in generated code. See PR [#359](https://github.com/apollographql/apollo-ios-dev/pull/359).\r\n",
    "createdAt" : "2024-05-16T03:32:18+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOA9NCTc4JS200",
    "owner" : "apollographql",
    "publishedAt" : "2024-05-16T03:29:51+09:00",
    "repository" : "apollo-ios",
    "title" : "1.11.0",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.11.0",
    "version" : "1.11.0"
  },
  {
    "body" : "### Fixed\r\n* **Rebuilt the CLI binary:** The CLI binary included in the `1.12.0` package was built with inconsistent SDK versions resulting in the linker signing not working correctly.",
    "createdAt" : "2024-05-23T06:14:27+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOA9NCTc4JW6Ea",
    "owner" : "apollographql",
    "publishedAt" : "2024-05-23T06:18:37+09:00",
    "repository" : "apollo-ios",
    "title" : "1.12.1",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.12.1",
    "version" : "1.12.1"
  },
  {
    "body" : "### New\r\n- **`ID` as a custom scalar ([#3379](https://github.com/apollographql/apollo-ios/issues/3379)):** This changes the generation of the built-in GraphQL `ID` scalar to be treated as a custom scalar that can be modified by the user. See PR [#363](https://github.com/apollographql/apollo-ios-dev/pull/363).\r\n\r\n### Fixed\r\n- **Adds visionOS deployment to ApolloTestSupport podspec ([#364](https://github.com/apollographql/apollo-ios-dev/pull/364)):** This adds the `visionOS` deployment target to the ApolloTestSupport podspec to match the other package managers.\r\n- **Add `@_spi(Execution)` to executor for import in test mocks ([#362](https://github.com/apollographql/apollo-ios-dev/pull/362)):** This replaces the use of `@testable` in ApolloTestSupport with specific `@_spi` scopes. This resolves a few issues that have been reported where the Apollo module could not be built for testing in non-debug configurations.",
    "createdAt" : "2024-05-22T08:36:28+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOA9NCTc4JWEaD",
    "owner" : "apollographql",
    "publishedAt" : "2024-05-22T08:38:19+09:00",
    "repository" : "apollo-ios",
    "title" : "1.12.0",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.12.0",
    "version" : "1.12.0"
  },
  {
    "body" : "### Fixed\r\n- **Rebuilt the CLI binary with the correct version number:** The CLI binary included in the `1.12.1` package was built with an incorrect version number causing a version mismatch when attempting to execute code generation.\r\n",
    "createdAt" : "2024-05-24T05:20:58+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOA9NCTc4JXr9R",
    "owner" : "apollographql",
    "publishedAt" : "2024-05-24T05:23:46+09:00",
    "repository" : "apollo-ios",
    "title" : "1.12.2",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.12.2",
    "version" : "1.12.2"
  },
  {
    "body" : "### New\r\n- **Added `ExistentialAny` requirement ([#379](https://github.com/apollographql/apollo-ios-dev/pull/379)):** This adds the `-enable-upcoming-feature ExistentialAny` to all targets to ensure compatibility with the upcoming Swift feature.\r\n- **Schema type renaming ([#388](https://github.com/apollographql/apollo-ios-dev/pull/388)):** This adds the feature to allow customizing the names of schema types in Swift generated code.\r\n- **JSONConverter helper ([#380](https://github.com/apollographql/apollo-ios-dev/pull/380)):** This adds a new helper class for handling JSON conversion of data including the ability to convert `SelectionSet` instances to JSON.\r\n\r\n### Fixed\r\n- **ApolloSQLite build error with Xcode 16 ([#386](https://github.com/apollographql/apollo-ios-dev/pull/386)):** This fixes a naming conflict with Foundation in iOS 18 and the SQLite library. _Thanks to [@rastersize](https://github.com/rastersize) for the contributon._",
    "createdAt" : "2024-06-25T22:18:45+09:00",
    "fetchedFromAPIAt" : "2024-07-14T22:49:45+09:00",
    "id" : "RE_kwDOA9NCTc4JrJ96",
    "owner" : "apollographql",
    "publishedAt" : "2024-06-26T00:06:37+09:00",
    "repository" : "apollo-ios",
    "title" : "1.13.0",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.13.0",
    "version" : "1.13.0"
  },
  {
    "body" : "### New\r\n- **Ability to set the journal mode on sqlite cache databases ([#3399](https://github.com/apollographql/apollo-ios/issues/3399)):** There is now a function to set the journal mode of the connected sqlite database and control how the journal file is stored and processed. See PR [#443](https://github.com/apollographql/apollo-ios-dev/pull/443). _Thanks to [@pixelmatrix](https://github.com/pixelmatrix) for the feature request._\r\n\r\n### Fixed\r\n- **Fix crash when `GraphQLError` is “too many validation errors”\" ([#438](https://github.com/apollographql/apollo-ios-dev/pull/438)):** When a GraphQLError from the JS parsing step is a “Too many validation errors” error, there is no `source` in the error object. Codegen will now check for it to avoid this edge case crash.\r\n- **Cache write interceptor should gracefully handle missing cache records ([#439](https://github.com/apollographql/apollo-ios-dev/pull/439)):** The work to support the `@defer` directive introduced a bug where the cache write interceptor would throw if no cache records were returned during response parsing. This is incorrect as there are no cache records in the case of an `errors` only GraphQL response.\r\n- **Avoid using `fatalError` on `JSONEncodable` ([#128](https://github.com/apollographql/apollo-ios-dev/pull/128)):** The fatal error logic in `JSONEncodable` was replaced with a type constraint `where` clause. _Thank you to [@arnauddorgans](https://github.com/arnauddorgans) for the contribution._\r\n- **Introspection-based schema download creates duplicate `@defer` directive definition ([#3417](https://github.com/apollographql/apollo-ios/issues/3417)):** The codegen engine can now correctly detect pre-existing `@defer` directive definitions in introspection sources and prevent the duplicate definition. See PR [#440](https://github.com/apollographql/apollo-ios-dev/pull/440). _Thanks to [@loganblevins](https://github.com/loganblevins) for reporting the issue._",
    "createdAt" : "2024-08-02T11:29:08+09:00",
    "fetchedFromAPIAt" : "2024-08-03T09:59:45+09:00",
    "id" : "RE_kwDOA9NCTc4KCQrN",
    "owner" : "apollographql",
    "publishedAt" : "2024-08-02T11:43:13+09:00",
    "repository" : "apollo-ios",
    "title" : "1.14.1",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/1.14.1",
    "version" : "1.14.1"
  },
  {
    "body" : "This is a preview release of a new feature that improves the code generation engine's field merging algorithm and allows for disabling of field merging altogether. The feature work for this preview version is being tracked in issue [#2560](https://github.com/apollographql/apollo-ios/issues/2560).\r\n\r\n## Reduced Generated Code Size of Merged Selection Sets\r\n\r\nThe code generation algorithm is now able to recognize most situations where a merged selection set is a direct copy of a selection set that is being merged. In those cases, it now uses a `typealias` referencing the original selection set rather than generating a duplicate. This is most commonly seen for the child entities of a named fragment that is spread into another selection set. In some cases this can dramatically decrease the size and complexity of the generated models.\r\n\r\n## Bug Fix: Generated Selections Sets in Inclusion Condition Scope\r\n\r\nThis also fixes a bug when using `@include/@skip` where generated models that should have been generated inside of a conditional inline fragment were generated _outside_ of the conditional scope. **This may cause breaking changes for a small number of users.** Those breaking changes are considered a bug fix since accessing the conditional inline fragments outside of the conditional scope could cause runtime crashes (if the conditions for their inclusion were not met).\r\n\r\n## Disabling Field Merging\r\n\r\nIf you need to further reduce the size of generated models, you can use the new experimental [field merging configuration option](https://github.com/apollographql/apollo-ios-dev/blob/preview/field-merging/apollo-ios-codegen/Sources/ApolloCodegenLib/ApolloCodegenConfiguration.swift#L981) to disable field merging. \r\n\r\nThe field merging feature has three types of merging that you can enable or disable selectively:\r\n\r\n- Ancestors: Merges fields and fragment accessors from the selection set's direct ancestors.\r\n- Siblings: Merges fields and fragment accessors from sibling inline fragments that match the selection set's scope.\r\n- Named Fragments: Merges fields and fragment accessors from named fragments that have been spread into the selection set.\r\n\r\n### Limitations\r\n\r\nDisabling of field merging is incompatible with the inclusion of `selectionSetInitializers`. Because the generated initializers require fully formed objects with all field merged into them in order to ensure the generated objects are valid for each of their type cases. It is likely that this limitation will not be able to be resolved in the future. However we hope the new merging algorithm additions will provide enough of an improvement to the generated models to make disabling of field merging unnecessary for most users.\r\n\r\n### Configuration - JSON \r\nTo enable this option when using a json config file, use the configuration option `experimentalFeatures.fieldMerging`.\r\n\r\n```json\r\n{\r\n        \"experimentalFeatures\" : {\r\n          \"fieldMerging\" : [\r\n            # Any combination of these values:\r\n            \"siblings\",\r\n            \"ancestors\",\r\n            \"namedFragments\"\r\n          ],\r\n          \"legacySafelistingCompatibleOperations\" : true\r\n        },\r\n        \"input\": {\r\n# ...\r\n```\r\n\r\nYou may also input `fieldMerging: [ \"all\" ]`, to enable all types of field merging (which is the default value if not provided).\r\n\r\n### Configuration - Scripting with `ApolloCodegenLib`\r\nTo enable this option when using the `ApolloCodegenLib` directly, set the `ApolloCodegenConfiguration.experimentalFeatures.fieldMerging` option.\r\n\r\n```swift\r\nconfig = ApolloCodegenConfiguration(\r\n    schemaNamespace: \"MySchema,\r\n    input: // ...,\r\n    output: // ...,\r\n    options: // ... ,\r\n    experimentalFeatures: .init(\r\n        fieldMerging: [\r\n            # Any combination of these values:\r\n            .siblings,\r\n            .ancestors,\r\n            .namedFragments\r\n        ]\r\n    )\r\n)\r\n```\r\n\r\nYou may also input `fieldMerging: .all`, to enable all types of field merging (which is the default value if not provided).\r\n\r\n## Known Issues\r\n\r\nThere is a longstanding bug (since Apollo iOS 1.0) in the codegen engine for some users that have large sets of operations with many deeply nested fragment spreads. For these users, the codegen engine never finishes running, using unbounded memory and eventually crashing once it has used all available memory. This version does not resolve this issue, but we are hoping to address this in a release in the near future!\r\n\r\n## Testing\r\n\r\nBecause the changes to the generated models in this version can be large in some circumstances, we would like to get feedback on any issues you encounter while using this preview version before we release this into a stable version of Apollo iOS. Please file an issue for any problems you encounter. \r\n\r\nIssues may appear when using the new disabling of field merging, but we are also aware of possible issues when not using this new feature (ie. `fieldMerging: .all`)\r\n\r\nWe are particularly concerned about possible issues in the following situations:\r\n\r\n- GraphQL Definitions with deeply nested named fragments spreads\r\n- Complex uses cases with `@include/@skip` conditions\r\n\r\nIn addition to feedback on problems you encounter, we would also love to hear about your success stories! If this new version works well for you and reduces the size of your generated models in a meaningful way, please let us know in [#2560](https://github.com/apollographql/apollo-ios/issues/2560)!\r\n\r\nThank you for trying out this preview version of Apollo iOS. We appreciate your time and effort as well as any feedback you can provide.",
    "createdAt" : "2024-08-03T03:15:19+09:00",
    "fetchedFromAPIAt" : "2024-08-03T09:59:45+09:00",
    "id" : "RE_kwDOA9NCTc4KCvm0",
    "owner" : "apollographql",
    "publishedAt" : "2024-08-03T04:10:56+09:00",
    "repository" : "apollo-ios",
    "title" : "Preview: Codegen Field Merging",
    "url" : "https://github.com/apollographql/apollo-ios/releases/tag/preview-field-merging.1",
    "version" : "preview-field-merging.1"
  }
]