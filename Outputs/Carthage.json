[
  {
    "body" : "**Fixed**\r\n* More resiliency towards `xcrun simctl list devices --json` outputting `com.apple.CoreSimulator.SimRuntime` in keys whose values are available simulator devices (#2693, #2696). Thanks @kmcbride and @DavidBrunow!\r\n\r\nThank you to @giginet, @taher-mosbah, @ikesyo, and @blender for reviewing pull requests!\r\n",
    "createdAt" : "2019-02-01T14:01:09+09:00",
    "fetchedFromAPIAt" : "2022-04-10T16:21:22+09:00",
    "id" : "MDc6UmVsZWFzZTE1MzA4NTM3",
    "owner" : "Carthage",
    "publishedAt" : "2019-02-01T14:25:34+09:00",
    "repository" : "Carthage",
    "title" : "0.32.0 - Weightless Warpspeed",
    "url" : "https://github.com/Carthage/Carthage/releases/tag/0.32.0",
    "version" : "0.32.0"
  },
  {
    "body" : "**⚠️ Carthage source only builds on Xcode 10.0+, thus requiring [macOS High Sierra](https://en.wikipedia.org/wiki/MacOS_High_Sierra). ⚠️**\r\n\r\nIn particular, `carthage` compiles under Swift 4.2 and 5.0 with Xcode 10.1 and 10.2.\r\n\r\n**Fixed**\r\n\r\n* In cases where `device` and `simulator` destined builds are merged into a single bundle, also merge `-Swift.h` header files from each with [active inclusion of target conditionals](https://github.com/Carthage/Carthage/pull/2748/files#diff-f66644e8cfbcad3c3826395a690ddfbcR367) (#2723, #2748). Thanks @DavidBrunow, @VictorNouvellet, and @buranmert!\r\n\t* [Currently limited](https://github.com/Carthage/Carthage/blob/87e2198/Source/CarthageKit/FrameworkExtensions.swift#L300) to a single pair of `-Swift.h`-suffixed files. Should be sufficient for the vast majority of frameworks.\r\n* Under `--cache-builds` mode —\r\n\t* Support headerless Swift-containing frameworks via dSYM parsing (#2622). Thanks @blender!\r\n\t* When run with `--no-skip-current`, produce `.version` files for those additional frameworks (#2636). Thanks @blender!\r\n\t* In support of community tooling, embed partial toolchain information (often `swiftlang` and `clang` versions) in `.version` files for Swift-containing frameworks. Expect these `.version` files to contain different output between Carthage v0.33.0 and previous Carthage versions (#2585, #2707). Thanks @giginet and @kenji21!\r\n\r\n**Notable**\r\n\r\n* For file system objects at some level of `Carthage/Checkouts/DependencyX`, delete with `FileManager.removeItem(at:)` if using `--use-submodules` and something exists there that’s not a directory housing a `.git` subdirectory. This matches Carthage’s existing deletion behavior of checkouts without `--use-submodules`. Use caution. (#2654).\r\n* In Cartfiles, specifications with `github` at the beginning of the line now error when followed by non-http-or-https-schemed URLs (often `ssh://` or `git://` schemed). We long-standing queried these with web requests, so now errors output earlier in the process with more helpful messaging (#2379). Thanks @ikesyo!\r\n* Static frameworks under `--cache-builds` mode highly likely to proceed errantly cache-valid ≈ late caught bug —\r\n\t* Will be correctly cache-invalid upon a version-specification change (including changing the specified SHA); also, upon a toolchain change for a Swift-containing static framework (including after a different `xcode-select`).\r\n\t* The first run of a never-modified-by-Carthage-v0.33.0 `.version` file for a Swift-containing static framework under Carthage v0.33.0 will also cache-invalidate it.\r\n\t* `carthage build <framework>` without `--cache-builds` will always attempt rebuilding it and it's dependencies.\r\n\r\n<details>\r\n\r\n<summary><strong>Note for Apps Importing CarthageKit.framework</strong></summary>\r\n\r\n* Carthage (the CLI executable) is now built exclusively with [SwiftPM](https://github.com/apple/swift-package-manager/). In effect, the Cartfile supporting `CarthageKit.framework` has been removed. Consuming CarthageKit is now [done through SwiftPM](https://swift.org/getting-started/#using-the-package-manager) and CarthageKit is now a static library.\r\n</details>\r\n\r\n**On environment variable [`GIT_SSH_COMMAND`](https://git-scm.com/docs/git#Documentation/git.txt-codeGITSSHCOMMANDcode)**\r\n\r\n* An SSH prompt (invisble to a `carthage` user) could stop progression when encountering a host not yet public-key-fingerprint verified by the user. Carthage now outputs proper messaging at that point, at the expense of [`GIT_SSH_COMMAND`](https://git-scm.com/docs/git#Documentation/git.txt-codeGITSSHCOMMANDcode) no longer being honored (#2734). Thanks @jlawton!\r\n\r\n\r\n**Improved**\r\n\r\n* Report read errors from files pointed to by `SCRIPT_INPUT_FILE_LIST_` variables (#2668). Thanks @ferranpujolcamins!\r\n* More efficient, less errant querying of git’s representation of file system objects via `ls-tree` (#2617). Thanks @CosynPa!\r\n* More efficient `git submodule sync` over multiple dependencies (#2643). Thanks @mdiep!\r\n\r\nThank you to @FranklinYu, @DivineDominion, @musbaalbaki, and @salbertson for improvements to the documentation.\r\n\r\nThank you to @mxcl, @giginet, @olejnjak, and @ikesyo for improvements to the codebase and the infrastructure.\r\n\r\nThank you to @blender, @mdiep, @giginet, @DavidBrunow, @VictorNouvellet, and @ikesyo for reviewing pull requests!",
    "createdAt" : "2019-04-04T05:45:42+09:00",
    "fetchedFromAPIAt" : "2022-04-10T16:21:22+09:00",
    "id" : "MDc6UmVsZWFzZTE2NTQwMDY1",
    "owner" : "Carthage",
    "publishedAt" : "2019-04-04T05:47:18+09:00",
    "repository" : "Carthage",
    "title" : "0.33.0 - Astrometric Associations",
    "url" : "https://github.com/Carthage/Carthage/releases/tag/0.33.0",
    "version" : "0.33.0"
  },
  {
    "body" : "**:warning: This release raises the deployment target to [macOS 10.11 El Capitan](https://discussions.apple.com/community/mac_os/os_x_el_capitan) :warning:**\r\n\r\n**Fixed**\r\n* Fix dSYM generation (#2334). Thanks @abrindam!\r\n* Fix update X's dependencies when running carthage update X (#2321). Thanks @jwutke!\r\n* Fix segmentation fault when bootstrapping (#2376). Thanks @vytis!\r\n* Fix a bug involving carthage outdated fail (#2328). Thanks @chuganzy!\r\n* Fix a bug involving tvOS binary releases (#2346). Thanks @blender!\r\n\r\n**Added**\r\n* Optionally strip debug symbols in carthage copy-frameworks (#2361). Thanks @abrindam!\r\n* Support relative file path for binary dependencies (#2360). Thanks @dmiluski!\r\n* Don't create Carthage/Build symlink if project doesn't use Carthage (#2368). Thanks @mdiep!\r\n* Add support for proxied environments (#2371). Thanks @jakeadams!\r\n\r\n**Improved**\r\n* Limit Parallelism in scheme discovery (#2343). Thanks @flovilmart!\r\n* Speed up scheme discovery (#2344) (#2372). Thanks @flovilmart!\r\n* Move binary download to build process (#2342). Thanks @chuganzy!\r\n  * :warning: Users should add `--no-use-binaries` to `carthage build` executions where necessary.\r\n\r\nThank you to @yoching for improvements to the code base! Thank you to @mdiep @jdhealy @ikesyo @blender @47014106 @tbrannam @awgeorge @hyperspacemark for reviewing pull requests!",
    "createdAt" : "2018-03-20T04:48:33+09:00",
    "fetchedFromAPIAt" : "2022-04-10T16:21:22+09:00",
    "id" : "MDc6UmVsZWFzZTEwMTU5MDE1",
    "owner" : "Carthage",
    "publishedAt" : "2018-03-20T04:55:44+09:00",
    "repository" : "Carthage",
    "title" : "0.29.0 - Great Groove",
    "url" : "https://github.com/Carthage/Carthage/releases/tag/0.29.0",
    "version" : "0.29.0"
  },
  {
    "body" : "# ⚠️\r\n\r\nThis release contains a potential security concern. Do not download ",
    "createdAt" : "2018-07-02T18:32:48+09:00",
    "fetchedFromAPIAt" : "2022-04-10T16:21:22+09:00",
    "id" : "MDc6UmVsZWFzZTExNzM3MDYy",
    "owner" : "Carthage",
    "publishedAt" : "2018-07-02T20:03:54+09:00",
    "repository" : "Carthage",
    "title" : "0.30.0 - Static Staccato",
    "url" : "https://github.com/Carthage/Carthage/releases/tag/0.30.0",
    "version" : "0.30.0"
  },
  {
    "body" : "**:warning: This release improves support for Semantic Versions. You might experience changes to dependency resolution when running `update`. See (#2412) :warning:**\r\n\r\n\r\n**Fixed**\r\n* Use correct URL format when using Proxies (#2428). Thanks @blender !\r\n* Filter out improper directories passing as frameworks (#2436). Thanks @blender !\r\n* Fix symlinks on APFS volumes (#2445). Thanks @cmittendorf !\r\n* Consider `XCODE_PRODUCT_BUILD_VERSION` alongside `EXPANDED_CODE_SIGN_IDENTITY` to address [Xcode 10’s empty build setting behavior](https://github.com/Carthage/Carthage/pull/2476#issuecomment-419729297) (#2476). Thanks @jdhealy !\r\n* Make use of `--new-resolver` flag in bootstrap command (#2486). Thanks @blender !\r\n\r\n**Added**\r\n* Support for building static frameworks (#2415, #1935). Thanks @Aranoledur @ikesyo !\r\n\r\n**Improved**\r\n* Semantic Version Support Enhancements (#2412 , #1553). Thanks @marcoconti83 !\r\n* Add `--archive` option to `build` command (#2438). Thanks @sunshinejr !\r\n* Generate a version file for projects with no shared schemes (#2450). Thanks @jasonboyle !\r\n* Relative Path Support In Cartfile.resolved  (#2383). Thanks @dmiluski !\r\n* Allow Github releases archieves with `application/octect-stream` MIME type (#2448). Thanks @bwhiteley !\r\n* Truncate log file before writing new one (#2474). Thanks @ChristopherRogers !\r\n* Allow binary dependencies with no `Info.plist` (#2502). Thanks @blender ! \r\n\r\nThank you to @blender ( #2386, #2399, #2447), @TwiterZX (#2396), @valeriyvan ( #2385), @DanTheColoradan (#2426), @walshie4 (#2463), @dimazen (#2471),  @isaac-weisberg (#2499) for improvements to the documentation! \r\n\r\nThank you to @ikesyo  (#2413) for improving the infrastructure!\r\n\r\nThank you to @ikesyo ( #2431, #2434, #2435), @ChristopherRogers (#2475) for improvements to the code base!\r\n\r\nThank you to @mdiep @jdhealy @ikesyo @blender @kballard @artemnovichkov  for reviewing pull requests!",
    "createdAt" : "2018-07-02T22:25:17+09:00",
    "fetchedFromAPIAt" : "2022-04-10T16:21:22+09:00",
    "id" : "MDc6UmVsZWFzZTExNzM5Mjgw",
    "owner" : "Carthage",
    "publishedAt" : "2018-07-02T22:30:08+09:00",
    "repository" : "Carthage",
    "title" : "0.30.1 - Static Staccato",
    "url" : "https://github.com/Carthage/Carthage/releases/tag/0.30.1",
    "version" : "0.30.1"
  },
  {
    "body" : "\r\n__**:warning:**  Carthage will only consider targets that support `archive` action .(#2507 & #2515 ) **:warning:**__\r\n__**:warning:**  Carthage does not support Xcode 6 anymore (#2561) **:warning:**__ \r\n__**:warning:**  Carthage source only builds on Xcode 9.4, thus requiring [macOS High Sierra](https://en.wikipedia.org/wiki/MacOS_High_Sierra) **:warning:**__\r\n\r\n\r\n**Fixed**\r\n* Ignore targets that don't support `archive` (#2507). Thanks @chuganzy ! \r\n* Watch OS targets won't build in Xcode 10 (#2561). Thanks @giginet !\r\n* Fix SemVer parsing with too many dots (#2518). Thanks @marcoconti83 !\r\n* Fix timeout in carthage version check (#2546). Thanks @Sebastian-Hojas !\r\n \r\n\r\n**Added**\r\n* Symlink the Build folder for binary downloads (#2551). Thanks @jasonboyle !\r\n* Implement `carthage validate` to validate the correctness of the Cartfile.resolved (#2523). Thanks @jasonboyle !\r\n*  Add support for .xz archives (#2548). Thanks @carolanitz !\r\n\r\n\r\n**Improved**\r\n* Improve handling of binaries with no `Info.plist` (#2542). Thanks @ikesyo !\r\n\r\nThank you to @3lvis (#2524), @brentleyjones (#2537), @sgl0v (#2556), @martnst (#2563) for improvements to the documentation! \r\n\r\nThank you to @ikesyo (#2520, #2522,  #2535, #2527, #2538, #2574, #2571) for improvements to the code base!\r\nThank you to @ikesyo @jdhealy (#2510) for improving the infrastructure!\r\n\r\nThank you to @mdiep @jdhealy @ikesyo @blender for reviewing pull requests!",
    "createdAt" : "2018-09-25T07:24:32+09:00",
    "fetchedFromAPIAt" : "2022-04-10T16:21:22+09:00",
    "id" : "MDc6UmVsZWFzZTEzMDY4NDEz",
    "owner" : "Carthage",
    "publishedAt" : "2018-09-25T07:58:38+09:00",
    "repository" : "Carthage",
    "title" : "0.31.0 - Tough Tempo",
    "url" : "https://github.com/Carthage/Carthage/releases/tag/0.31.0",
    "version" : "0.31.0"
  },
  {
    "body" : "<blockquote>\r\n\r\n__**:warning:**  Carthage will only consider targets that support the `archive` action. (#2507 & #2515) **:warning:**__\r\n__**:warning:**  Carthage does not support Xcode 6 anymore. (#2561) **:warning:**__ \r\n__**:warning:**  Carthage source only builds on Xcode 9.4+, thus requiring [macOS High Sierra](https://discussions.apple.com/community/mac_os/high_sierra). **:warning:**__\r\n\r\n</blockquote>\r\n\r\n\r\n**Fixed**\r\n* Resiliency towards `xcrun simctl list devices --json` outputting `availability` or `isAvailable` depending upon whether an Xcode 10.1 beta has been installed (#2606). Thanks @giginet!\r\n\r\n**Added**\r\n* Add support for `*.xcfilelist` file in `carthage copy-frameworks` (#2591). Thanks @kishikawakatsumi!\r\n\r\nThank you to @ikesyo and @giginet for improvements to the codebase and the infrastructure.\r\n\r\nThank you to @blender, @mdiep, and @ikesyo for reviewing pull requests!\r\n\r\n",
    "createdAt" : "2018-10-10T08:26:39+09:00",
    "fetchedFromAPIAt" : "2022-04-10T16:21:22+09:00",
    "id" : "MDc6UmVsZWFzZTEzMzQwNDEy",
    "owner" : "Carthage",
    "publishedAt" : "2018-10-10T08:51:22+09:00",
    "repository" : "Carthage",
    "title" : "0.31.1 - Ubiquitous Upbeat",
    "url" : "https://github.com/Carthage/Carthage/releases/tag/0.31.1",
    "version" : "0.31.1"
  },
  {
    "body" : "<blockquote>\r\n\r\n__**:warning:**  Carthage will only consider targets that support the `archive` action. (#2507 & #2515) **:warning:**__\r\n__**:warning:**  Carthage does not support Xcode 6 anymore. (#2561) **:warning:**__ \r\n__**:warning:**  Carthage source only builds on Xcode 9.4+, thus requiring [macOS High Sierra](https://discussions.apple.com/community/mac_os/high_sierra). **:warning:**__\r\n\r\n</blockquote>\r\n\r\n\r\n**Fixed**\r\n* More resiliency towards `xcrun simctl list devices --json` outputting `isAvailable` as String, `isAvailable` as Bool, or `availability` as String depending upon whether Xcode 10B61 has been installed, or an Xcode 10.1 beta has been installed (#2630). Thanks @ olejnjak!\r\n\r\nThank you to @artemnovichkov for improvements to the documentation.\r\n\r\nThank you to @ikesyo and @giginet for improvements to the codebase and the infrastructure.\r\n\r\nThank you to @blender, @mdiep, and @ikesyo for reviewing pull requests!\r\n",
    "createdAt" : "2018-10-31T07:19:55+09:00",
    "fetchedFromAPIAt" : "2022-04-10T16:21:22+09:00",
    "id" : "MDc6UmVsZWFzZTEzNzQzNTc3",
    "owner" : "Carthage",
    "publishedAt" : "2018-10-31T07:30:54+09:00",
    "repository" : "Carthage",
    "title" : "0.31.2 - Vocal Vortex",
    "url" : "https://github.com/Carthage/Carthage/releases/tag/0.31.2",
    "version" : "0.31.2"
  },
  {
    "body" : "Carthage now elides a [certain warning](https://github.com/Carthage/Carthage/blob/0.34.0/Source/CarthageKit/SwiftVersionError.swift#L25) about Swift compiler versions upon truths from three sources:\r\n- Swift compiler version (as queried by local machine’s `xcode-select` and possible `TOOLCHAINS` environment variable) being greater than 5.1\r\n- that particular framework’s recorded Swift compiler being greater than 5.1\r\n- that particular framework matching (somewhat) a [glob](https://en.wikipedia.org/wiki/Glob_(programming)#Syntax) (working from framework-bundle-root–level) of `Modules/*swiftmodule*/*.swiftinterface`\r\n\t- note: only one directory matching `Modules/*swiftmodule*/` will continue querying inside of it — with `FileManager.default.contentsOfDirectory` defining that\r\n\t- note: presence of particular architectures (armv7, i386, x86_64, etc.) are **not** taken into account\r\n\r\n**Note**: As `.swiftinterface` files emission [“currently [as of Swift 5.X] requires library evolution support”](https://swift.org/blog/library-evolution/index.html) — take warning of the Swift Compiler Team’s message that [“Library evolution trades off performance for flexibility”](https://swift.org/blog/library-evolution/index.html) and [comes with caveats](https://swift.org/blog/library-evolution/index.html#interaction-with--enable-testing). • :warning: Not every library vendor will desire to enable `BUILD_LIBRARY_FOR_DISTRIBUTION` in their project’s build settings, or even to field questions on bugs resulting from those adding that scope. _Be kind_ to library vendors that might weigh their potential maintenance/ongoing-qa-debugging work differently then your `BUILD_LIBRARY_FOR_DISTRIBUTION` desires.\r\n\r\n〜 Thanks @DavidBrunow for this feature!\r\n\r\n**Dynamic Intelligent Platform Parsing**\r\n\r\nPreviously, Carthage would propagate errors upon reading non-compiled-in values from `SUPPORTED_PLATFORMS` or `PLATFORM_NAME`.\r\n\r\nCarthage 0.35.0 [supports `SUPPORTED_PLATFORMS` or `PLATFORM_NAME` dynamically with intelligent parsing from `xcodebuild -showsdks -json`.](https://github.com/Carthage/Carthage/pull/3001)\r\n\r\nCarthage’s [`--platform` argument](https://github.com/Carthage/Carthage/commit/68d77602ac11e27f753450638527f6ea2a6bce85#diff-908d3140eab5f48b3e5f926de743ef52R232-R246) takes the same input of 2019-era SDKs — however, in alignment with the above: the default (a.k.a. “all”) parameter will allow dynamically-parsed SDKs to propagate.\r\n\r\n`carthage archive` [still uses the hardcoded four 2019-era SDKs](https://github.com/Carthage/Carthage/commit/68d77602ac11e27f753450638527f6ea2a6bce85#diff-db6bc809697a7fc656230029d748c3feR73-R76).\r\n\r\nThe `carthage cleanup` command — existing on-master, but unshipped-in-tags — no longer makes sense (when set of SDKs are non-fixed across Xcode versions) and has been removed.\r\n\r\nDynamic Platform Parsing can occur [from `xcodebuild -showsdks -json`](https://github.com/Carthage/Carthage/commit/68d77602ac11e27f753450638527f6ea2a6bce85#diff-bcd3b8bafc84006ccb8b16295b6707b0R139-R200) with fallbacks to [`BuildSetting` extraction from a Xcode-bundled `xcodeproj`](https://github.com/Carthage/Carthage/commit/68d77602ac11e27f753450638527f6ea2a6bce85#diff-2c8b811867554fe0cd24adead2bd16daR326-R368), and beyond that [falling back to hardcoded 2019-era values](https://github.com/Carthage/Carthage/commit/68d77602ac11e27f753450638527f6ea2a6bce85#diff-2c8b811867554fe0cd24adead2bd16daR380).\r\n\r\n⤵️ **Note**: _the dynamic parsing **will** omit SDKs — such as DriverKit — where JSON-derived `canonicalName` and `platform` do not share a common prefix · DriverKit has an ouptut `canonicalName` similar to «driverkit.macosx19.0»._\r\n\r\n**Other Breaking Changes**\r\n\r\n- [Track static frameworks in `.version` files](https://github.com/Carthage/Carthage/pull/2900). Thanks @elliottwilliams!\r\n\t- Old carthage versions will still behave erroneous — but not propagate errors — after parsing sets of newer `.version` files output for Swift static frameworks.\r\n\t- To guarantee output of newer `.version` files for affected Swift static frameworks, change Swift versions and rerun Carthage with the `--cache-builds` flag (even temporarily), or delete `.framework` bundles for affected Swift static ones and rerun Carthage with the `--cache-builds` flag.\r\n- [For GitHub Release assets, expand permitted MIME types to include `application/x-zip-compressed`](https://github.com/Carthage/Carthage/pull/2877). Thanks @MatkovIvan!\r\n- [Reject invalid](https://github.com/Carthage/Carthage/pull/2765) [binary archives containing the same framework multiple times](https://github.com/Carthage/Carthage/pull/2791). Thanks @tmspzz!\r\n- [For binary-spec-ed dependencies and GitHub Release downloads, copy dSYMs if any architecture matches current binary — also affects CarthageKit consumers](https://github.com/Carthage/Carthage/pull/2776). Thanks @hlineholm!\r\n- [Conflict less in concurrent strip-framework–dedicated Carthage process invocations via different underlying copying](https://github.com/Carthage/Carthage/pull/2796) — [rather than overwrite straight from process, now temp directory usage prevents conflicts on certain same-file/same-path writes](https://github.com/Carthage/Carthage/pull/2809). Thanks @kalkwarf!\r\n- [Fallback to dSYM version parsing for more cases before invalidating cached builds](https://github.com/Carthage/Carthage/pull/2865). Thanks @kmcbride!\r\n- [Add `--use-netrc` flag](https://github.com/Carthage/Carthage/pull/2774) under which [basic `~/.netrc` files](https://github.com/Carthage/Carthage/blob/f94766acc9bee35e295eea03c282472c49f49800/Tests/CarthageKitTests/NetrcSpec.swift) facilitate [`binary`-specified framework download](https://github.com/Carthage/Carthage/blob/f656edfe35651b54eec50d814e79d079f8eea7c4/Documentation/Artifacts.md#binary-only-frameworks) authentication. Thanks @mollyIV!\r\n\r\n**Stability**\r\n- [Fix various cases of «Segmentation Fault 11»](https://github.com/Carthage/Carthage/pull/2908). Thanks @taisukeh!\r\n- [Extend error messages when reading certain binaries](https://github.com/Carthage/Carthage/pull/2917). Thanks @hlineholm!\r\n\r\n**Security Enhancing Breaking Change**\r\n- [Prevent directory traversal through additional sanitization of `git`-specified repository URL components — specifically nul characters (`\\u{0000}`) and periods (`\\u{0023}`)](https://github.com/Carthage/Carthage/search?q=%22prevent+directory+traversal%22&type=Commits). Thanks @manicmaniac!\r\n\t- Replacement strings include repeated «Full Width Full Stops» (`\\u{FF0E}`) and replacement `␀` (`\\u{2400}`).\r\n\t- URL components not starting with periods (`\\u{0023}`) _will not_ see inserted «Full Width Full Stops» (`\\u{FF0E}`).\r\n\r\n**Breaking — For Apps Importing Carthage Kit and XCDBLD**\r\n\r\n<details><summary>For Apps Importing Carthage Kit and XCDBLD</summary></br>\r\n\r\n- Removed: `XCDBLD.Platform` — replaced (not one-for-one) by `struct SDK` with new method `SDK.platformSimulatorlessFromHeuristic`.\r\n- Removed: `XCDBLD`’s enum-based `SDK` — replaced by `struct SDK`.\r\n- Removed: `XCDBLD.SDK.platform` and `XCDBLD.SDK.allSDKs`.\r\n- Changed: Hashing and equality for `XCDBLD.SDK` is case-insensitive.\r\n\t- Canonical casing for SDK names available through `SDK.knownIn2019YearSDKs` and `SDK.setFromJSONShowSDKs`.\r\n- Changed: Various type signature changes [removing `XCDBLD.Platform` and incorporating `XCDBLD.SDK`](https://github.com/Carthage/Carthage/commit/68d77602ac11e27f753450638527f6ea2a6bce85).\r\n- Removed: `SDK.from(string:)` — replaced by `SDK.init(name:simulatorHeuristic)`.\r\n\t- Passing an empty string as `simulatorHeuristic` is usually the foremost codepath.\r\n\t- SDK.init(rawValue:) is **not intended** for wide spread use · as it’s limited to only 2019-era hardcoded SDKs.\r\n- Removed: `BuildSettings.buildSDKs: SignalProducer<SDK, CarthageError>` — replaced with `BuildSettings.buildSDKRawNames: Set<String>`.\r\n- Made Public: Various [`VersionFile`-related API](https://github.com/Carthage/Carthage/pull/2931). Thanks @acecilia!\r\n\r\n</summary></details>\r\n\r\n**Thanks to all Contributors**\r\n\r\nThank you to @CosynPa, @sidepelican, @chuganzy, @sstadelman (#2781), @giginet (#2761), @ikesyo (#2886, #2785, #2784), @DavidBrunow (#2966, #2967), @mvalentiner, @gubikmic, @sticksen, @nteissler, @ismetanin, @brandonlee503, @yhkaplan, and @tmspzz for improvements to the codebase, tests, and documentation.",
    "createdAt" : "2020-06-19T06:21:20+09:00",
    "fetchedFromAPIAt" : "2022-04-10T16:21:22+09:00",
    "id" : "MDc6UmVsZWFzZTI3NzAzNDM4",
    "owner" : "Carthage",
    "publishedAt" : "2020-06-19T06:25:40+09:00",
    "repository" : "Carthage",
    "title" : "0.35.0 - Carrageenan Cabaletta",
    "url" : "https://github.com/Carthage/Carthage/releases/tag/0.35.0",
    "version" : "0.35.0"
  },
  {
    "body" : "**⚠️ Carthage source only builds on Xcode 10.0+, thus requiring [macOS High Sierra 10.13.6](https://support.apple.com/en-us/HT208864). ⚠️**\r\n\r\nAdditional workarounds to enable Xcode 11.0, 11.1, and 11.2 betas have been added; see below.\r\n\r\n**Fixed**\r\n\r\n* ASCII alphabet for Semantic Version [pre-release](https://semver.org/#spec-item-9) and [build metadata](https://semver.org/#spec-item-10) components [now includes uppercase and lowercase W](https://github.com/Carthage/Carthage/pull/2806/files#diff-aa0796654f69d3d5ad0a58b156377953R37), fixing an omission and completing the alphabet (#2805 #2806). Thanks @drakerr!\r\n* Workaround Swift 5.1 compiler crash bug to allow the compilation of Carthage itself on Xcode 11, Xcode 11.1, and Xcode 11.2 betas (#2859). Thanks @michaelmcguire!\r\n\r\n**Breaking — For Apps Importing Carthage Kit**\r\n\r\n<details><summary>Removed — as a library dependency — <code>SwiftPM</code> and <code>llbuild</code> and reinstated <code>struct CarthageKit.SemanticVersion</code>.</summary>\r\n\r\n</br>A [bug in the-tool-SwiftPM's package resolution](https://github.com/apple/swift-package-manager/pull/2197) resulted in disregard for the (crucial) ‘resolved file’ when resolving branch-based dependencies.\r\n\r\nWhich would put us in the position of needing any commit of `apple/swift-package-manager` that didn’t specify its dependency on `apple/swift-llbuild` in the branch-based style.\r\n\r\nAlso criteria for the above, working Swift 4.2.X manifests and compilation _and_ working Swift 5.X manifests and compilation.\r\n\r\nNo such commit of `apple/swift-package-manager` could be found.\r\n\r\nIn addition, some confusion [around `llbuild`'s `sqlite3`](https://github.com/apple/swift-llbuild/commit/f1c9ad9a253cdf1aa89a7f5c99c30b4513b06ddb#diff-37ca2dd15ca0f6b1b49e78db084ef5b9L5-L10) linkage made criteria even more confusing.\r\n\r\n- Some initializers and methods on `struct Carthage.SemanticVersion` have differences from the previous incarnation found in v0.33.0.\r\n- Reinstate `struct CarthageKit.SemanticVersion` in all callsites in codebase and tests, removing `SPMUtility.Version`.\r\n- No longer necessary to `import struct Foundation.URL` with the removed import of SPMUtility.\r\n- Makefile removes complications which previously supported `llbuild`'s `sqlite3` linkage.\r\n- Working Swift 4.2.X compilation is [necessary to support building](https://github.com/Homebrew/brew/blob/7dd0466/Library/Homebrew/os/mac/xcode.rb#L18) for [macOS High Sierra](https://en.wikipedia.org/wiki/MacOS_High_Sierra) on Homebrew bottling infrastructure.\r\n</details>\r\n\r\n**Important**\r\n\r\nFuture updates will address Catalyst and building of XCFrameworks. Thank you for your patience.\r\n\r\nThank you to @jdhealy, @sstadelman, @tmspzz, @giginet, @olejnjak, and @ikesyo for improvements to the codebase and the infrastructure.\r\n\r\nThank you to @mdiep, @tmspzz, @giginet, and @ikesyo for reviewing pull requests!\r\n",
    "createdAt" : "2019-10-19T05:48:28+09:00",
    "fetchedFromAPIAt" : "2022-04-10T16:21:22+09:00",
    "id" : "MDc6UmVsZWFzZTIwODU5MDQx",
    "owner" : "Carthage",
    "publishedAt" : "2019-10-22T02:43:58+09:00",
    "repository" : "Carthage",
    "title" : "0.34.0 - Barometric Ballasting",
    "url" : "https://github.com/Carthage/Carthage/releases/tag/0.34.0",
    "version" : "0.34.0"
  },
  {
    "body" : "**Added**\n- A `--toolchain` option to specify the Swift toolchain that should be used (#1303). Thanks @tkrajacic!\n\n**Improved**\n- Frameworks will be built for the simulator only on platforms that require bitcode when bitcode is disabled (#1280). Thanks @phatblat!\n- Zsh will now autocomplete dependency names from the `Cartfile`.\n\n**Fixed**\n- Carthage will error on `carthage bootstrap <dependency>` if `dependency` doesn’t exist in `Cartfile.resolved` (#1294). Thanks @mz2!\n- Carthage will error on `carthage update <dependency>` if `dependency` doesn’t exist in `Cartfile` (#1344). Thanks @ktakayama!\n- `carthage archive` no longer tries to copy XCTest files with test targets that have \"Run\" enabled in the build scheme (#1302). Thanks @BernardGatt!\n\nThank you to @ikesyo for improvements to the codebase! Thank you to @mdiep and @NachoSoto for reviewing pull requests!\n",
    "createdAt" : "2016-06-22T21:40:38+09:00",
    "fetchedFromAPIAt" : "2022-04-12T19:16:11+09:00",
    "id" : "MDc6UmVsZWFzZTM0OTg2NzQ=",
    "owner" : "Carthage",
    "publishedAt" : "2016-06-22T21:51:51+09:00",
    "repository" : "Carthage",
    "title" : "0.17: Swift Marches On",
    "url" : "https://github.com/Carthage/Carthage/releases/tag/0.17",
    "version" : "0.17"
  },
  {
    "body" : "**Fixed**\n- `Cartfile.private` shouldn't be required (#1367, broken in 0.17). Thanks @mdiep!\n\nThanks to @ikesyo for reviewing the pull request!\n",
    "createdAt" : "2016-06-24T21:16:21+09:00",
    "fetchedFromAPIAt" : "2022-04-12T19:16:11+09:00",
    "id" : "MDc6UmVsZWFzZTM1MTY4MTE=",
    "owner" : "Carthage",
    "publishedAt" : "2016-06-24T21:20:10+09:00",
    "repository" : "Carthage",
    "title" : "0.17.1: An Open Book",
    "url" : "https://github.com/Carthage/Carthage/releases/tag/0.17.1",
    "version" : "0.17.1"
  },
  {
    "body" : "**Improved**\n- `carthage copy-frameworks` now strips headers from the framework (#1377). Thanks @ikesyo!\n\n**Fixed**\n- `carthage archive` didn't respect `--project-directory` (#1373). Thanks @hamchapman!\n- `carthage update` would sometimes hang (#1376). Thanks @mdiep!\n\nThank you to @ikesyo and @mdiep for reviewing pull requests!\n",
    "createdAt" : "2016-06-30T21:26:28+09:00",
    "fetchedFromAPIAt" : "2022-04-12T19:16:11+09:00",
    "id" : "MDc6UmVsZWFzZTM1NTkyNjQ=",
    "owner" : "Carthage",
    "publishedAt" : "2016-06-30T21:42:31+09:00",
    "repository" : "Carthage",
    "title" : "0.17.2: Zipper of Zippers",
    "url" : "https://github.com/Carthage/Carthage/releases/tag/0.17.2",
    "version" : "0.17.2"
  },
  {
    "body" : ":information_source: This is a maintenance release to support integrating frameworks on Xcode 12.3 and above.\r\n\r\n:information_source: This release **does not** include forthcoming support for building XCFrameworks. Expect XCFrameworks in the next release, 0.37.0.\r\n\r\n**Fixed**\r\n* `carthage build` disables a validation added in Xcode 12.3 which prevents some Carthage-built frameworks from being embedded (https://github.com/Carthage/Carthage/pull/3095).\r\n  * Xcode 12.3 warns when a target embeds framework with slices labeled for multiple platforms (even when the slices are all housed under different architectures); except, _some_ slight sets of platform pairs are permitted. Typically, Carthage's multi-arch frameworks are stripped at build time using `carthage copy-frameworks`, but they may be copied whole in [test targets](https://github.com/Carthage/Carthage#adding-frameworks-to-unit-tests-or-a-framework) and other rare circumstances. \r\n  * When warnings-as-errors is enabled, this validation warning may fail the build. Carthage disables it internally by setting `VALIDATE_WORKSPACE=NO`.\r\n  * If you see an error like `Building for iOS Simulator, but the linked and embedded framework 'REDACTED.framework' was built for iOS + iOS Simulator`, set VALIDATE_WORKSPACE=NO in your project's build settings.\r\n* Fixed [carthage creating too many tempoary directories during `copy-frameworks` phase](https://github.com/Carthage/Carthage/issues/3056) (Carthage/Carthage#3066). Thanks @tmspzz\r\n\r\nThanks @olejnjak, @philipphofmann for improving the documentation since the last release.\r\n\r\n**Note**\r\n<details>\r\n<summary>Xcode (at the era of 12.3) does very little when Validate Workspace is enabled. If truly encompassing this facet is important to you…</summary>\r\n…try copying a Carthage Checkouts/Build directory to another location, editing Xcode projects to remove any targets that (aside from through `carthage copy-frameworks`) embed Carthage-built things, and copy the xcodebuild invocation from a run of `carthage … --verbose` and modify-it, removing VALIDATE_WORKSPACE=NO. \r\n</details>",
    "createdAt" : "2021-01-15T02:51:09+09:00",
    "fetchedFromAPIAt" : "2022-04-10T16:21:22+09:00",
    "id" : "MDc6UmVsZWFzZTM2MzcxODQx",
    "owner" : "Carthage",
    "publishedAt" : "2021-01-15T05:07:48+09:00",
    "repository" : "Carthage",
    "title" : "0.36.1 — Workspace Well-Being",
    "url" : "https://github.com/Carthage/Carthage/releases/tag/0.36.1",
    "version" : "0.36.1"
  },
  {
    "body" : "**Fixed**\r\n\r\n* Building a framework using Xcode 12 fails with a build error from `xcrun lipo` (https://github.com/Carthage/Carthage/issues/3019). Fix by passing `--use-xcframeworks` and [re-integrating your dependencies as XCFrameworks](https://github.com/Carthage/Carthage#migrating-a-project-from-framework-bundles-to-xcframeworks), or by using a [workaround xcconfig on Intel-based Macs](https://github.com/Carthage/Carthage/blob/master/Documentation/Xcode12Workaround.md).\r\n\r\n**Added**\r\n\r\n* Carthage produces XCFrameworks instead of universal frameworks when `--use-xcframeworks` is passed. (https://github.com/Carthage/Carthage/pull/3071). Thanks @elliottwilliams!\r\n\r\n  XCFrameworks contain multiple discrete framework bundles. Unlike universal frameworks (produced by `lipo`), an XCFramework can contain multiple versions of a framework which share the same processor architecture. Since Xcode 12 added Apple Silicon support to its simulator platforms, the device and simulator versions of a framework both build for `arm64`, hence requiring an XCFramework.\r\n\r\n  To build XCFrameworks into your app, **run Carthage with `--use-xcframeworks` and drag the produced XCFrameworks into your Xcode target’s _Embedded binaries_ section**, _without_ using a `carthage copy-frameworks` script phase. ﹡See the README﹡ for [information on how to upgrade to XCFrameworks](https://github.com/Carthage/Carthage#migrating-a-project-from-framework-bundles-to-xcframeworks).\r\n\r\n  XCFrameworks are the only supported way to build Carthage frameworks for Apple Silicon-based Macs.\r\n\r\n**Known issues**\r\n\r\n* `--use-xcframeworks` does not produce an XCFramework for `github` dependencies which download binaries.\r\n  * Workaround: Pass `--no-use-binaries` to make Carthage rebuild the dependency from source, which will produce an XCFramework.\r\n* `carthage archive` does not archive built XCFrameworks, and `--use-xcframeworks` does not produce an xcframework for [`binary` dependencies](https://github.com/Carthage/Carthage/blob/0.36.1/Documentation/Artifacts.md#binary-only-frameworks).\r\n  * Support for binary xcframeworks will be added in a future release. For now, continue integrating [`binary` dependencies](https://github.com/Carthage/Carthage/blob/0.36.1/Documentation/Artifacts.md#binary-only-frameworks) using the strategy of [platform-specific frameworks](https://github.com/Carthage/Carthage#if-youre-building-for-ios-tvos-or-watchos).\r\n\r\n**Notes**\r\n\r\nUnder `--use-xcframeworks`, Carthage aims to accommodate something long relied upon: targets that 〈think about targets such as your dependencies ⋯ subdependencies ⋯ dependencies vended by others〉 …that link against «.framework»s in the directory of `Carthage/Build` ﹡as opposed to linking against «.framework»s in [Per-configuration Build Products Path (`CONFIGURATION_BUILD_DIR`)](https://gist.github.com/NSExceptional/2cd98300f7297b75d7b2d929effa2f15#per-configuration-build-products-path-configuration_build_dir).﹡ \r\n\r\nSuch targets will see Carthage extract — for each platform the target builds for — such-platform’s «.framework» bundles from all XCFrameworks, copying them into a temporary directory, and then — via build setting injection into [`FRAMEWORK_SEARCH_PATHS`](https://gist.github.com/NSExceptional/2cd98300f7297b75d7b2d929effa2f15#framework-search-paths-framework_search_paths) — allowing the xcodebuild run an at-the-end-of-[`FRAMEWORK_SEARCH_PATHS`](https://gist.github.com/NSExceptional/2cd98300f7297b75d7b2d929effa2f15#framework-search-paths-framework_search_paths) opportunity to link those extracted-into-temporary-directory «.framework»s (and fulfill a successful compilation).\r\n\r\n<details>\r\n\r\n<summary><em>Well, to be more precise…</em></summary>\r\n\r\n〜 Well, to be more precise, any scheme where the Carthage-focused target with build setting value for [`FRAMEWORK_SEARCH_PATHS`](https://gist.github.com/NSExceptional/2cd98300f7297b75d7b2d929effa2f15#framework-search-paths-framework_search_paths) specifically containing a subdirectory of `Carthage/Build` will have the at-the-end-of-[`FRAMEWORK_SEARCH_PATHS`](https://gist.github.com/NSExceptional/2cd98300f7297b75d7b2d929effa2f15#framework-search-paths-framework_search_paths) opportunity. \r\n\r\n</details>\r\n\r\nThis behavior works for framework targets in most cases, since they link against but generally do not embed their framework dependencies, but requires changes if any part of a target’s build process requires the _exact path_ of the framework bundle. If you (_or developers consuming your framework_) encounter build errors when using `carthage build --use-xcframeworks`, you have a few options:\r\n\r\n- Update your project to link and embed XCFrameworks from `Carthage/Build`, then read the extracted framework from [`CONFIGURATION_BUILD_DIR`](https://gist.github.com/NSExceptional/2cd98300f7297b75d7b2d929effa2f15#per-configuration-build-products-path-configuration_build_dir). You won’t rely on the above ‘at-the-end-of-FRAMEWORK_SEARCH_PATHS opportunity’ behavior, but ﹡you will break compatibility with users who _aren’t_ using the `--use-xcframeworks` flag﹡, so consider other options, proceed with caution, and consider versioning this as a breaking change.\r\n- If Carthage fails while building a scheme that contains non-framework targets, break it up into multiple schemes, so that Carthage only builds the framework targets.\r\n- Modify your build phases to parse the [`FRAMEWORK_SEARCH_PATHS`](https://gist.github.com/NSExceptional/2cd98300f7297b75d7b2d929effa2f15#framework-search-paths-framework_search_paths) build setting and search each directory in order to find a Carthage framework, rather than hard-coding its path to a `Carthage/Build/<platform>` directory.\r\n\r\n<details>\r\n\r\n<summary><em>If you’re struggling to figure out how Carthage focuses on a target…</em></summary>\r\n\r\n〜 If you’re struggling to figure out how Carthage focuses on a target within a Xcode project/workspace within a repo and subsequently widens out to choose a scheme based on that, head to https://github.com/Carthage/Carthage/issues/new and attach the label «focused-target» or just mention «focused-target» in the issue’s body text; please make the body text detailed, and priority will be given to issues regarding open source repositories.\r\n\r\n</details>\r\n\r\n**Acknowledgements**\r\n\r\nThanks @olejnjak, @philipphofmann, and @daisuke-t-jp for their work on documenting the xcconfig workaround. More broadly, we appreciate the community of users who communicated about the problem, came up with a temporary workaround, and were patient while we architected a fix.\r\n\r\nThanks @tmspzz, @gjeck, @nighthawk, @chrisballinger, @renep, and @elliottwilliams for their work reviewing pull requests.",
    "createdAt" : "2021-02-02T02:16:13+09:00",
    "fetchedFromAPIAt" : "2022-04-10T16:21:22+09:00",
    "id" : "MDc6UmVsZWFzZTM3MTkwMDIw",
    "owner" : "Carthage",
    "publishedAt" : "2021-02-02T02:17:23+09:00",
    "repository" : "Carthage",
    "title" : "0.37.0 — Architectural Alchemy",
    "url" : "https://github.com/Carthage/Carthage/releases/tag/0.37.0",
    "version" : "0.37.0"
  },
  {
    "body" : "## ⚠️  This version doesn't fix the issue with Xcode 12. See https://github.com/Carthage/Carthage/issues/3019 ⚠️ \r\n\r\n**Fixed**\r\n* Fixed copying files across different volumes (#3025). Thanks @rudedogdhc!\r\n\r\n**Added**\r\n* Sort frameworks so changes in .version files are easier to spot (#3015). Thanks @peteranny!\r\n* Support `NO_PROXY` or `no_proxy` environment variable (#2991). Thanks @okaverin!\r\n * Prevent re-downloading module stable binaries (#3040). Thanks @justAnotherDev!\r\n* Remove leftovers of failed archives unzips (#3035). Thanks @tattn!\r\n\r\n**Improved**\r\n* Spelling mistakes in README (#3021). Thanks @thomasaw!\r\n* Reflect carthage build requirements in README (#3045). Thanks @chrstphrchvz!\r\n* Installing carthage outside of protected folders no longer requires `sudo` (#3024). Thanks @cfelder!\r\n* Remove invalid archs by intersecting VALID_ARCHS and ARCHS (#2987). Thanks @jerbob92!\r\n\r\nThank you to @jdhealy @tmspzz  for reviewing pull requests!",
    "createdAt" : "2020-09-17T04:12:02+09:00",
    "fetchedFromAPIAt" : "2022-04-10T16:21:22+09:00",
    "id" : "MDc6UmVsZWFzZTMxNDIzNTM1",
    "owner" : "Carthage",
    "publishedAt" : "2020-09-17T04:53:06+09:00",
    "repository" : "Carthage",
    "title" : "0.35.1 - Continuous Commitment",
    "url" : "https://github.com/Carthage/Carthage/releases/tag/0.35.1",
    "version" : "0.35.1"
  },
  {
    "body" : "## ⚠️  This version doesn't fix the issue with Xcode 12. See https://github.com/Carthage/Carthage/issues/3019 ⚠️ \r\n\r\n**Fixed**\r\n\r\n* Prevent cross device issues in `copy-frameworks` (#3047). Thanks @rudedogdhc!\r\n\r\nThank you to @nixnoughtnothing  for improvements to the code base! Thank you to @tmspzz  for reviewing pull requests!",
    "createdAt" : "2020-09-18T16:50:01+09:00",
    "fetchedFromAPIAt" : "2022-04-10T16:21:22+09:00",
    "id" : "MDc6UmVsZWFzZTMxNTEyOTY2",
    "owner" : "Carthage",
    "publishedAt" : "2020-09-18T16:54:53+09:00",
    "repository" : "Carthage",
    "title" : "0.36.0 - Portuguese Pastel",
    "url" : "https://github.com/Carthage/Carthage/releases/tag/0.36.0",
    "version" : "0.36.0"
  },
  {
    "body" : "**Fixed**\r\n\r\n* Building XCFrameworks with nested dependencies no longer requires a platform-specific Build directory (i.e. `Carthage/Build/iOS`) to exist (#3135).\r\n\r\n**Added**\r\n\r\n* Prebuilt dependencies (for [binary only frameworks](https://github.com/Carthage/Carthage/blob/master/Documentation/Artifacts.md#binary-only-frameworks) and [GitHub release assets](https://github.com/Carthage/Carthage#archive-prebuilt-frameworks-into-one-zip-file)) may use XCFrameworks, which are checked for compatibility and extracted into the Build folder (#3123). See the section below on compatibility information for framework authors. Thanks @igstewart3! :tada:\r\n\r\n* Project lookup is faster for dependencies which contain multiple xcodeprojs (#3076).\r\n\r\n**Known issues**\r\n\r\n* `carthage archive` does not archive built XCFrameworks\r\n  * Support for making an xcframework archive will be added in a future release. For now, manually create archives by building twice: once with the `--use-xcframeworks` option, and once without. Then, create a zip from the `Carthage/Build` folder.\r\n\r\n\r\n## How to distribute XCFrameworks while retaining backwards compatibility\r\n\r\nSince Carthage lets users choose whether they want discrete frameworks or XCFrameworks, we recommend supporting both distribution formats in your binary assets. Replacing discrete frameworks with XCFrameworks in your assets is a **breaking change**, since it will require users to [reintegrate the framework with their project](https://github.com/Carthage/Carthage#migrating-a-project-from-framework-bundles-to-xcframeworks).\r\n\r\n### Create separate `.framework.zip` and `.xcframework.zip` archives\r\n\r\nStarting in 0.38.0, Carthage follows a naming convention to distinguish between XCFrameworks and plain framework bundles:\r\n\r\n- A release asset with `.xcframework` in the name is considered to contain XCFrameworks\r\n- An asset with `.framework` in the name is considered to contain plain framework bundles\r\n- Carthage looks to narrow download candidates when comparable filenames are found → the comparison is ‘do the filenames match after removing one «.framework» or one «.xcframework» found string from the filename?'. This allows to Carthage to narrow down to one comparison-matched download, basing direction on whether `--use-xcframeworks` is flagged. Sets entirely 'not-matching-comparison' will see no removal of download candidates.\r\n\r\n#### GitHub release assets: Upload both archives to the release\r\n\r\nGitHub releases can have multiple files attached to them. Upload both zip files to your release following the above naming convention. See [the README](https://github.com/Carthage/Carthage#archive-prebuilt-frameworks-into-zip-files) for more information.\r\n\r\n#### Binary only frameworks: Specify both archives in the binary spec URL using an `alt=` parameter.\r\n\r\n[Binary project specifications](https://github.com/Carthage/Carthage/blob/master/Documentation/Artifacts.md#binary-project-specification) are JSON documents which map _one_ download URL to _one_ version. To provide multiple asset URLs, join the URLs with an `alt=` query parameter. For example:\r\n\r\n```json\r\n{\r\n    \"1.2.3\": \"https://example.com/releases/MyFramework-v1.2.3.framework.zip?alt=https://example.com/releases/MyFramework-v1.2.3.xcframework.zip\"\r\n}\r\n```\r\n\r\nOlder versions of Carthage will request the whole URL and will receive the _first_ framework zip (since HTTP servers ignore unknown query parameters). Starting in 0.38.0, Carthage will parse out any `alt` URLs and request them as well, using the same naming convention we use for GitHub assets.\r\n\r\nFor optimal backwards compatibility:\r\n\r\n- Create an upload a framework zip and an xcframework zip, and give them the same basename, i.e. `MyFramework-v1.2.3.framework.zip` and `MyFramework-v1.2.3.xcframework.zip`.\r\n- Publish the binary spec JSON with the framework zip's URL _first_, followed by an `alt=` parameter with the xcframework zip's URL.\r\n\r\n<details><summary><strong>Example workflow</strong></summary>\r\n\r\nSuppose we're releasing `v1.2.3` of a project called `MyFramework`:\r\n\r\n1. Create an xcframeworks build using --use-xcframeworks:\r\n\r\n       carthage build --use-xcframeworks --no-skip-current\r\n       zip -r MyFramework-v1.2.3.xcframework.zip Carthage/Build\r\n\r\n2. Create a plain frameworks build:\r\n\r\n       carthage build --no-skip-current\r\n       zip -r MyFramework-v1.2.3.framework.zip Carthage/Build\r\n\r\n3. Upload both archives, `MyFramework-v1.2.3.xcframework.zip` and `MyFramework-v1.2.3.framework.zip`.\r\n4. For projects on GitHub, [create a release](https://docs.github.com/en/github/administering-a-repository/managing-releases-in-a-repository#creating-a-release) and include both archives.\r\n\r\n    For a binary-only framework, publish a new version to its spec JSON. Point to the xcframework archive using an `alt=` parameter:\r\n\r\n    ```js\r\n    {\r\n        // ...\r\n        \"1.2.3\": \"https://example.com/releases/MyFramework-v1.2.3.framework.zip?alt=https://example.com/releases/MyFramework-v1.2.3.xcframework.zip\"\r\n    }\r\n    ```\r\n</details>\r\n\r\n### Prefer building with module stability\r\n\r\nCarthage compares the Swift compiler version used to build an XCFramework [with the currently selected Swift version](https://github.com/Carthage/Carthage#swift-binary-framework-download-compatibility) — allowing the XCFramework to supercede a local-machine build if the downloaded XCFramework:\r\n* contains no bundles with «.swiftmodule»-suffixed files, or\r\n* any bundle with «.swiftmodule»-suffixed files contains Swift components built under [`BUILD_LIBRARIES_FOR_DISTRIBUTION`](https://swift.org/blog/library-evolution/) build setting and [the current Swift compiler version](https://github.com/Carthage/Carthage/pull/1303) is greater than 5.1, or \r\n* any bundle not passing the above was built with [the current compiler version](https://github.com/Carthage/Carthage/pull/1303).\r\n\r\n〜 Carthage falls back to building a dependency from source if the prebuilt version is rejected.  \r\n〜 Note: [see particulars on Carthage’s determining factors for `BUILD_LIBRARIES_FOR_DISTRIBUTION`](https://github.com/Carthage/Carthage/releases/tag/0.35.0).  \r\n\r\n✨ This matches Carthage's existing behavior, but is notably different from Swift Package Manager’s behavior, which requires that _all_ XCFrameworks are built for distribution. When you're creating XCFrameworks for a GitHub release, be mindful of this, and consider setting `BUILD_LIBRARIES_FOR_DISTRIBUTION=YES` in your project. Future versions of Carthage's `archive` command may encourage this setting.\r\n\r\nIf you choose to publish an XCFramework _without_ module stability (a.k.a. [`BUILD_LIBRARIES_FOR_DISTRIBUTION`](https://swift.org/blog/library-evolution/) build setting) enabled, consider a naming convention like `*-carthage-abi-unstable.xcframework` to indicate this to your users.",
    "createdAt" : "2021-05-08T08:55:15+09:00",
    "fetchedFromAPIAt" : "2022-04-10T16:21:22+09:00",
    "id" : "MDc6UmVsZWFzZTQyNjMzNzIz",
    "owner" : "Carthage",
    "publishedAt" : "2021-05-08T08:56:56+09:00",
    "repository" : "Carthage",
    "title" : "0.38.0 — Prebuilt Parity",
    "url" : "https://github.com/Carthage/Carthage/releases/tag/0.38.0",
    "version" : "0.38.0"
  },
  {
    "body" : "**Fixed**\n- Redundant builds when building a scheme that contains multiple targets (#1512). Thanks @mdiep!\n- Errors when using GitHub Enterprise repos with a Carthage built with Swift 2.3 (#1505). Thanks @ikesyo!\n- Updated shell completion for recent changes (#1474). Thanks @nafu!\n\n**Improved**\n- Consistent usage of `'` in terminal output for consistent rendering (#1472, #1476). Thanks @nafu!\n- The help message for `--platform` now suggests `macOS` instead of `Mac` (#1499). Thanks @giginet!\n\nThank you to @mdiep, @NachoSoto, and @ikesyo for reviewing pull requests!\n",
    "createdAt" : "2016-10-06T10:16:11+09:00",
    "fetchedFromAPIAt" : "2022-04-10T16:21:22+09:00",
    "id" : "MDc6UmVsZWFzZTQzMTU4NzQ=",
    "owner" : "Carthage",
    "publishedAt" : "2016-10-06T10:16:38+09:00",
    "repository" : "Carthage",
    "title" : "0.18.1: Redundant Redundancy",
    "url" : "https://github.com/Carthage/Carthage/releases/tag/0.18.1",
    "version" : "0.18.1"
  },
  {
    "body" : "## Added\n- Support for binary-only frameworks (#1760). Thanks @michaelmcguire!\n- Carthage now builds with Swift 3 (#1736 and many others). Thanks @ikesyo!\n- Check to see if a new version of Carthage has been released (#1533). Thanks @rodchile!\n\n## Improved\n- Longer Xcode timeout for slow machines (#1532). Thanks @yas375!\n- When checkout fails, the underlying Git error will be printed (#1519). Thanks @NachoSoto!\n- `Cartfile.resolved` is now sorted alphabetically to reduce conflicts (#1681). Thanks @mdiep!\n- Xcode warnings/errors are no longer passed through to Carthage stdout. This has been a source of confusion for many users. (#1718) Thanks @mdiep!\n\n## Fixed\n- Building projects that aren’t configured for the clean action (#1572). Thanks @zachwaugh!\n- Binary downloads are disabled if `--toolchain` option is given (#1585). Thanks @ikesyo!\n\nThank you to @Nirma, @ikesyo, and @mdiep for improvements to the code base. Thank you to @mdiep and @ikesyo for reviewing pull requests.\n",
    "createdAt" : "2017-02-15T06:17:02+09:00",
    "fetchedFromAPIAt" : "2022-04-10T16:21:22+09:00",
    "id" : "MDc6UmVsZWFzZTU0NTc4Mzg=",
    "owner" : "Carthage",
    "publishedAt" : "2017-02-15T06:40:10+09:00",
    "repository" : "Carthage",
    "title" : "0.19: Feels Dichotomy",
    "url" : "https://github.com/Carthage/Carthage/releases/tag/0.19.0",
    "version" : "0.19.0"
  },
  {
    "body" : "**Fixes**\n- Failure to print xcodebuild output to the log file (#1761). Thanks @BobElDevil!\n- Printing of the URL to open a new issue on a project (#1764). Thanks @dcaunt!\n\nThanks to @mdiep for reviewing pull requests.\n",
    "createdAt" : "2017-02-15T22:26:56+09:00",
    "fetchedFromAPIAt" : "2022-04-10T16:21:22+09:00",
    "id" : "MDc6UmVsZWFzZTU0NjQ2NDI=",
    "owner" : "Carthage",
    "publishedAt" : "2017-02-15T22:32:38+09:00",
    "repository" : "Carthage",
    "title" : "0.19.1: Wat Log",
    "url" : "https://github.com/Carthage/Carthage/releases/tag/0.19.1",
    "version" : "0.19.1"
  },
  {
    "body" : "**Added**\n- `--cache-builds` flag (off by default for now) to cache builds locally (#1489). Thanks @baek-jinoo, @jasonboyle, and @BobElDevil!\n- Support for `.tar.gz` binary archives (#1786). Thanks @dcaunt!\n\n**Improved**\n- Pre-built Swift binaries will only be used if they were built with the same version of the Swift compiler (#1755). Thanks @scottrhoyt!\n- Carthage projects will be built with individual, per-version DerivedData directories (#1419). Thanks @ikesyo!\n- The `.pkg` installer will no longer let you install to volumes without macOS (#1772). Thanks @dcaunt!\n- Submodules checked out with Carthage will get symlinks for their dependencies (#1715). Thanks @jdhealy!\n\n**Fixed**\n- The `PackageInfo` for the `.pkg` install will have the correct version (#1773). Thanks @mdiep!\n\nThank you to @johnmckerrell, @dcaunt, @louisdh, and @scottrhoyt for improvements to documentation. Thank you to @ikesyo for improvements to the codebase. Thank you to @mdiep and @NachoSoto for reviewing pull requests.\n",
    "createdAt" : "2017-02-27T22:09:57+09:00",
    "fetchedFromAPIAt" : "2022-04-10T16:21:22+09:00",
    "id" : "MDc6UmVsZWFzZTU1ODE4Nzk=",
    "owner" : "Carthage",
    "publishedAt" : "2017-02-27T22:25:21+09:00",
    "repository" : "Carthage",
    "title" : "0.20: Unary, Binary, Ternary",
    "url" : "https://github.com/Carthage/Carthage/releases/tag/0.20.0",
    "version" : "0.20.0"
  },
  {
    "body" : "## Fixed\r\n* Error when running `checkout` due to a preexisting symlink (#1805). Thanks @jdhealy!\r\n* Error when a project has no shared schemes for a given platform (#1827). Thanks @mdiep!\r\n* Carthage will no longer report draft Carthage releases when checking for a new Carthage release (#1795). Thanks @ikesyo!\r\n\r\n## Improved\r\n* `--use-cache` will now use SHA-256 for hashing (#1811). Thanks @ffittschen!\r\n\r\nThank you to @scottrhoyt for improvements to documentation. Thank you to @ikesyo  and @BobElDevil for improvements to the code base. Thank you to @mdiep, @ikesyo, and @jdhealy for reviewing pull requests.",
    "createdAt" : "2017-03-12T03:34:49+09:00",
    "fetchedFromAPIAt" : "2022-04-10T16:21:22+09:00",
    "id" : "MDc6UmVsZWFzZTU3MTI0NTY=",
    "owner" : "Carthage",
    "publishedAt" : "2017-03-12T03:38:47+09:00",
    "repository" : "Carthage",
    "title" : "0.20.1: Preexisting Conditional",
    "url" : "https://github.com/Carthage/Carthage/releases/tag/0.20.1",
    "version" : "0.20.1"
  },
  {
    "body" : "**Improved**\r\n* `carthage checkout` now checks out dependencies concurrently for a nice speedup (#1910). Thanks @erichoracek!\r\n* The notification that there’s a new Carthage version available is now printed to stderr instead of stdout (#1918). Thanks @BobElDevil!\r\n* Carthage can now handle frameworks that have no debug symbols (#1932). Thanks @erichoracek!\r\n\r\nThank you to @ikesyo, @mdiep, and @erichoracek for improvements to the codebase! Thank you to @mdiep, @ikesyo, @jdhealy, and @BobElDevil for reviewing pull requests!",
    "createdAt" : "2017-05-19T21:43:29+09:00",
    "fetchedFromAPIAt" : "2022-04-10T16:21:22+09:00",
    "id" : "MDc6UmVsZWFzZTY0NDIyMzk=",
    "owner" : "Carthage",
    "publishedAt" : "2017-05-19T21:51:32+09:00",
    "repository" : "Carthage",
    "title" : "0.23: Statically Speaking",
    "url" : "https://github.com/Carthage/Carthage/releases/tag/0.23.0",
    "version" : "0.23.0"
  },
  {
    "body" : "Carthage now requires Swift 3.1.\r\n\r\n**Fixed**\r\n* Worked around copy bug on APFS volumes (#2032). Thanks @BobElDevil!\r\n* Improper cache invalidation with Xcode 9 (#1984). Thanks @BobElDevil!\r\n* Trashing of folders in `Carthage/Checkouts/` (#2027). Thanks @BobElDevil!\r\n* Building for multiple SDKs with the new Xcode build system (#2053). Thanks @BobElDevil!\r\n* Broken `--log-path` option (#1958). Thanks @michaelmcguire!\r\n* Potential hang when unzipping invalid archives (#1997). Thanks @ikesyo!\r\n\r\n**Improved**\r\n* GitHub dependencies will be the same when specified with `git` (#1995). Thanks @blender!\r\n* Building will now use checked out `Cartfile`s instead of getting them from Git (#2041). Thanks @BobElDevil!\r\n\r\nThank you to @ikesyo and @Dschee for improvements to the codebase! :tada: Thank you to @ikesyo, @mdiep, @jdhealy, and @BobElDevil for reviewing pull requests. :sparkles:",
    "createdAt" : "2017-07-10T21:23:56+09:00",
    "fetchedFromAPIAt" : "2022-04-10T16:21:22+09:00",
    "id" : "MDc6UmVsZWFzZTY5ODQwNTE=",
    "owner" : "Carthage",
    "publishedAt" : "2017-07-10T21:29:57+09:00",
    "repository" : "Carthage",
    "title" : "0.24: Build Potion #9",
    "url" : "https://github.com/Carthage/Carthage/releases/tag/0.24.0",
    "version" : "0.24.0"
  },
  {
    "body" : "**Fixed**\r\n* Improper cache invalidation for nested dependencies (#1831). Thanks @BobElDevil!\r\n* Improper cache invalidation for prebuilt binaries (#1850). Thanks @erichoracek!\r\n* Crash from Swift 3.1 compiler issue (#1866). Thanks @jdhealy!\r\n* Crash from unwrapping of URLs from git (#1806). Thanks @jdhealy!\r\n* Optional description in error output (#1884). Thanks @Nirma!\r\n\r\n**Added**\r\n* Support for custom log paths (#1863). Thanks @aaroncrespo!\r\n\r\n**Improved**\r\n* `copy-frameworks` now copies frameworks concurrently (#1841). Thanks @erichoracek!\r\n* `--cache-builds` now uses the Swift version of the framework instead of the Xcode version (#1896). Thanks @erichoracek!\r\n\r\nThank you to @ikesyo, @mdiep, @scottrhoyt, and @erichoracek for improvements to the codebase! Thank you to @mdiep for reviewing pull requests.",
    "createdAt" : "2017-04-25T22:10:12+09:00",
    "fetchedFromAPIAt" : "2022-04-10T16:21:22+09:00",
    "id" : "MDc6UmVsZWFzZTYxODEyNTM=",
    "owner" : "Carthage",
    "publishedAt" : "2017-04-25T22:19:00+09:00",
    "repository" : "Carthage",
    "title" : "0.21: Caches & Crashes",
    "url" : "https://github.com/Carthage/Carthage/releases/tag/0.21.0",
    "version" : "0.21.0"
  },
  {
    "body" : "**Fixed**\r\n* Error when a file is passed multiple times to `copy-frameworks` (#1902). Thanks @erichoracek!\r\n* Improper cache invalidation when using `--toolchain` (#1906). Thanks @klundberg!\r\n\r\nThank you to @ikesyo for improvements to the codebase. Thank you to @mdiep for reviewing pull requests.",
    "createdAt" : "2017-04-28T22:04:26+09:00",
    "fetchedFromAPIAt" : "2022-04-10T16:21:22+09:00",
    "id" : "MDc6UmVsZWFzZTYyMjIyOTc=",
    "owner" : "Carthage",
    "publishedAt" : "2017-04-28T22:05:31+09:00",
    "repository" : "Carthage",
    "title" : "0.22: Invalid Invalidation",
    "url" : "https://github.com/Carthage/Carthage/releases/tag/0.22.0",
    "version" : "0.22.0"
  },
  {
    "body" : "**Fixed**\r\n* Carthage now builds with Xcode 9.\r\n* Homebrew installations will no longer mistakenly use previously installed versions of `CarthageKit.framework` (#2059). Thanks @ikesyo!\r\n* Fetching of local repositories with relative paths (#2125). Thanks @ikesyo!\r\n\r\n**Added**\r\n* Support for `.bz2` archives (#2092). Thanks @lswith!\r\n* Support for `.tgz` archives (#2109). Thanks @ikesyo!\r\n* Support for `file:///` URLs with `binary` dependencies (#2140, #2142). Thanks @ikesyo, @phimage!\r\n\r\n**Improved**\r\n* Carthage’s derived data folder is now split by Xcode version (#2102). Thanks @ikesyo!\r\n* The Swift version string used to compare versions now includes the major version of the compiler (#2052). Thanks @ikesyo!\r\n* Carthage’s `Makefile` is now more robust (#2054, #2098, #2108). Thanks @waffleboot, @zhongwuzw, @jdhealy!\r\n\r\nThank you to @ikesyo and @jdhealy for improvements to the codebase! Thanks to @mdiep, @BobElDevil, @jdhealy, @andersio, @norio-nomura, and @ikesyo for reviewing pull requests!",
    "createdAt" : "2017-09-05T03:20:51+09:00",
    "fetchedFromAPIAt" : "2022-04-10T16:21:22+09:00",
    "id" : "MDc6UmVsZWFzZTc2MjkzMDE=",
    "owner" : "Carthage",
    "publishedAt" : "2017-09-05T03:21:34+09:00",
    "repository" : "Carthage",
    "title" : "0.25: Quarterly Quandary",
    "url" : "https://github.com/Carthage/Carthage/releases/tag/0.25.0",
    "version" : "0.25.0"
  },
  {
    "body" : "**Fixed**\r\n* Incorrectly named `.xcarchive` folders are no longer created (#2239). Thanks @kishikawakatsumi!\r\n* Some git errors will now be fully printed (#2252). Thanks @iv-mexx!\r\n\r\n**Added**\r\n* A new resolver algorithm is available with the `--new-resolver` flag for `carthage update` (#2122). Thanks @BobElDevil!\r\n* Building Carthage (the tool itself) now uses Xcode's new build system (#2269). Thanks @ikesyo!\r\n\r\n**Changed**\r\n* Potentially alleviate situations where (despite prior versions of Carthage upgrading) [a downgrade or lack of upgrade occurs](https://github.com/Carthage/Carthage/issues/2143) for dependencies (and/or subdependencies of those) specified by branch or no given version requirement (#2260).\r\n  * ⚠️ Relative paths for local repositories (`git './…' …` or `git '../…' …`) will have a reversion in behavior. [See workaround and re-opened issue here](https://github.com/Carthage/Carthage/issues/968#issuecomment-350368113).\r\n\r\nThank you to @ikesyo, @zhongwuzw, @BobElDevil and @dtweston for improvements to the codebase! Thanks to @mdiep, @ikesyo, @NachoSoto and @jdhealy for reviewing pull requests!\r\n",
    "createdAt" : "2017-12-09T03:13:06+09:00",
    "fetchedFromAPIAt" : "2022-04-10T16:21:22+09:00",
    "id" : "MDc6UmVsZWFzZTg4MzMwODE=",
    "owner" : "Carthage",
    "publishedAt" : "2017-12-09T03:16:35+09:00",
    "repository" : "Carthage",
    "title" : "0.27.0",
    "url" : "https://github.com/Carthage/Carthage/releases/tag/0.27.0",
    "version" : "0.27.0"
  },
  {
    "body" : "Carthage now requires Swift 4.0 / Xcode 9.\r\n\r\n**Fixed**\r\n* `jsonDecodingError` is incorrectly reported when downloading binaries (#2182). Thanks @ikesyo!\r\n\r\n**Improved**\r\n* Use `archive` action when building device SDKs to disable LLVM Instrumentation (#2158). Thanks @ikesyo!\r\n\r\nThank you to @kas-kad for improvements to documentation. Thank you to @ikesyo and @mdiep for improvements to the codebase! Thanks to @BobElDevil, @ikesyo, @jdhealy, @mdiep and @NachoSoto for reviewing pull requests!",
    "createdAt" : "2017-10-11T09:00:38+09:00",
    "fetchedFromAPIAt" : "2022-04-10T16:21:22+09:00",
    "id" : "MDc6UmVsZWFzZTgwNzEyMjc=",
    "owner" : "Carthage",
    "publishedAt" : "2017-10-11T09:12:35+09:00",
    "repository" : "Carthage",
    "title" : "0.26",
    "url" : "https://github.com/Carthage/Carthage/releases/tag/0.26.0",
    "version" : "0.26.0"
  },
  {
    "body" : "**Fixed**\r\n* Building frameworks whose `SKIP_INSTALL` build setting is set to `NO` (#2210). Thanks @ikesyo!\r\n\r\n**Added**\r\n* `--xcode-warnings` option to the `outdated` command to output Xcode-compatible warnings (#2209). Thanks @dtweston!\r\n\r\nThanks to @mdiep for reviewing pull requests!",
    "createdAt" : "2017-10-13T13:45:57+09:00",
    "fetchedFromAPIAt" : "2022-04-10T16:21:22+09:00",
    "id" : "MDc6UmVsZWFzZTgxMDUyMjk=",
    "owner" : "Carthage",
    "publishedAt" : "2017-10-13T13:56:24+09:00",
    "repository" : "Carthage",
    "title" : "0.26.1",
    "url" : "https://github.com/Carthage/Carthage/releases/tag/0.26.1",
    "version" : "0.26.1"
  },
  {
    "body" : "**Fixed**\r\n* CocoaPods-generated projects support when running `archive` action (#2213). Thanks @ikesyo!\r\n\r\nThanks to @mdiep for reviewing pull requests!",
    "createdAt" : "2017-10-14T10:58:13+09:00",
    "fetchedFromAPIAt" : "2022-04-10T16:21:22+09:00",
    "id" : "MDc6UmVsZWFzZTgxMTg1MDM=",
    "owner" : "Carthage",
    "publishedAt" : "2017-10-14T11:02:46+09:00",
    "repository" : "Carthage",
    "title" : "0.26.2",
    "url" : "https://github.com/Carthage/Carthage/releases/tag/0.26.2",
    "version" : "0.26.2"
  },
  {
    "body" : "**Fixed**\r\n* Use of Swift toolchains that report a prerelease version (#2282). Thanks @tonyarnold!\r\n\r\n**Added**\r\n* Support for downloading static binaries with `binary` dependencies (#2235). Thanks @blender!\r\n\r\n**Improved**\r\n* `outdated` now lists all dependencies, even those that will not be updated because of the specified version in the Cartfile (#2254). Thanks @iv-mexx!\r\n* `ouddated` now includes color output (#2257). Thanks @iv-mexx!\r\n\r\nThank you to @ikesyo and @chuganzy for improvements to the codebase! Thank you to @mdiep, @NachoSoto, and @jdhealy for reviewing PRs!",
    "createdAt" : "2018-01-29T22:57:36+09:00",
    "fetchedFromAPIAt" : "2022-04-10T16:21:22+09:00",
    "id" : "MDc6UmVsZWFzZTk0Mjg5Nzc=",
    "owner" : "Carthage",
    "publishedAt" : "2018-01-29T22:58:08+09:00",
    "repository" : "Carthage",
    "title" : "0.28.0",
    "url" : "https://github.com/Carthage/Carthage/releases/tag/0.28.0",
    "version" : "0.28.0"
  }
]