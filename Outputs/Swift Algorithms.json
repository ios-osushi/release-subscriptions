[
  {
    "body" : "### Additions\r\n\r\nAn exciting group of new algorithms, contributed by the community:\r\n\r\n- `trimming(while:)` returns a subsequence of a bidirectional collection with the matching elements removed from the start and end. (#4)\r\n- `min(ofCount:)` and `max(ofCount:)` find the smallest or largest elements in a collection. (#9, #77)\r\n- `windows(ofCount:)` lets you iterate over all the overlapping subsequences of a particular length. (#20)\r\n- `striding(by:)` iterates over every *n*th element of a sequence or collection. (#24)\r\n- `interspersed(with:)` places a new element between every pair of elements in a sequence or collection. (#35)\r\n- `chunks(ofCount:)` breaks a collection into subsequences of the given number of elements. (#54)\r\n- `suffix(while:)` matches the standard library's `prefix(while:)`, by returning the suffix of all matching elements from a bidirectional collection. (#65)\r\n- Variations of `combinations(ofCount:)` and `permutations(ofCount:)` that take a range expression as a parameter, returning combinations and permutations of multiple lengths. (#51, #56)\r\n\r\n### Changes\r\n\r\n- The `LazyChunked` type now precomputes its `startIndex`, making performance more predictable when using the collection. \r\n\r\n### Fixes\r\n\r\n- `randomSample(count:)` no longer traps in rare circumstances.\r\n- Index calculations have been improved in a variety of collection wrappers.\r\n- A variety of documentation improvements and corrections.",
    "createdAt" : "2021-02-27T05:03:33+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTM4ODIwNzIx",
    "owner" : "apple",
    "publishedAt" : "2021-02-27T05:23:52+09:00",
    "repository" : "swift-algorithms",
    "title" : "Swift Algorithms 0.0.3",
    "url" : "https://github.com/apple/swift-algorithms/releases/tag/0.0.3",
    "version" : "0.0.3"
  },
  {
    "body" : "Initial release.",
    "createdAt" : "2020-10-08T00:24:43+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTMyMjk3Mjc2",
    "owner" : "apple",
    "publishedAt" : "2020-10-08T09:25:52+09:00",
    "repository" : "swift-algorithms",
    "title" : "Swift Algorithms 0.0.1",
    "url" : "https://github.com/apple/swift-algorithms/releases/tag/0.0.1",
    "version" : "0.0.1"
  },
  {
    "body" : "### Changes\r\n\r\n- The `rotate(at:)` method has been updated to `rotate(toStartAt:)`, with the old name deprecated.\r\n- The `chained(with:)` method has been changed to the free function `chain(_:_:)`, with the old version deprecated.\r\n- `Algorithms` now uses `RealModule` from the `swift-numerics` package for its cross-platform elementary functions.\r\n- Sequence/collection wrapper types, like `Permutations` and `Indexed`, now have conformance to the lazy protocols, so that any following operations maintain their laziness.\r\n\r\n### Fixes\r\n\r\n- Swift Algorithms now builds under SwiftPM on Windows.\r\n- A wide variety of errors, misspellings, and ommissions in the documentation and guides have been fixed. \r\n- Index/distance calculations for the `Product2` and `Chain` types have been corrected.\r\n- Calling `stablePartition(subrange:by:)` now correctly uses the subrange's length instead of the whole collection.\r\n",
    "createdAt" : "2020-10-24T07:01:38+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTMzMDAwMzA5",
    "owner" : "apple",
    "publishedAt" : "2020-10-24T07:05:36+09:00",
    "repository" : "swift-algorithms",
    "title" : "Swift Algorithms 0.0.2",
    "url" : "https://github.com/apple/swift-algorithms/releases/tag/0.0.2",
    "version" : "0.0.2"
  },
  {
    "body" : "### Additions\r\n\r\nMore new algorithms to join the party:\r\n\r\n- A lazy version of the standard library's two `split` methods. (#78)\r\n- `firstNonNil(_:)` returns the first non-`nil` element from an optional-generating transform. (#31)\r\n- `uniquePermutations()` skips duplicates when generating permutations of a collection. (#91)\r\n- The `reductions` methods return all the in-between states of reducing a sequence or collection. (#46)\r\n\r\n### Fixes\r\n\r\n- Methods and computed properties are more consistently marked as inlinable, resolving a performance regression. \r\n- The `Stride` type now efficiently calculates distances between positions, supported by the underlying collection.\r\n- Better test coverage and improved diagnostics for comparing sequences.\r\n- Fixed links and improved documentation.\r\n",
    "createdAt" : "2021-03-30T04:25:46+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTQwNjU0ODI1",
    "owner" : "apple",
    "publishedAt" : "2021-03-30T04:29:00+09:00",
    "repository" : "swift-algorithms",
    "title" : "Swift Algorithms 0.0.4",
    "url" : "https://github.com/apple/swift-algorithms/releases/tag/0.0.4",
    "version" : "0.0.4"
  },
  {
    "body" : "### Additions\r\n\r\n- The `compacted()` method lazily finds the non-`nil` elements of a sequence or collection (#112).\r\n\r\n### Changes\r\n\r\n- The `uniqued()` method now lazily computes the unique elements of a sequence or a collection (#71). Pass this resulting sequence to an `Array` initializer to recover the behavior of the previous release.\r\n- Calling `cycled(times:)` now returns a new `FiniteCycle` type, which has the same conformances as its underlying collection (#106). \r\n- The base collections of the sequence and collection wrapper types are no longer public (#85, #125), and the wrapper types no longer conform to the `Equatable` or `Hashable` protocols (#124). If you need those conformances, convert the wrapper type to an `Array` or other collection currrency type before storing. Please file an issue if these changes pose a problem for your use case.\r\n",
    "createdAt" : "2021-04-14T13:53:07+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTQxMzkyNDMx",
    "owner" : "apple",
    "publishedAt" : "2021-04-14T13:55:23+09:00",
    "repository" : "swift-algorithms",
    "title" : "Swift Algorithms 0.1.0",
    "url" : "https://github.com/apple/swift-algorithms/releases/tag/0.1.0",
    "version" : "0.1.0"
  },
  {
    "body" : "### Fixes\r\n\r\n- `Product2` associated type inference error in release build (#130)",
    "createdAt" : "2021-04-15T08:32:47+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTQxNDQ4Mzgz",
    "owner" : "apple",
    "publishedAt" : "2021-04-15T08:37:34+09:00",
    "repository" : "swift-algorithms",
    "title" : "Swift Algorithms 0.1.1",
    "url" : "https://github.com/apple/swift-algorithms/releases/tag/0.1.1",
    "version" : "0.1.1"
  },
  {
    "body" : "### Additions\r\n\r\nTwo new additions to the list of algorithms:\r\n\r\n- `adjacentPairs()` lazily iterates over tuples of adjacent elements of a sequence. (#119)\r\n- `minAndMax()` finds both the smallest and largest elements of a sequence in a single pass. (#90)\r\n\r\n### Changes\r\n\r\n- When calling `chunked(on:)`, the resulting collection has an element type of `(Subject, SubSequence)` instead of just `SubSequence`, making the subject value available when iterating.\r\n\r\n    ```swift\r\n    let numbers = [5, 6, -3, -9, -11, 2, 7, 6]\r\n    for (signum, values) in numbers.chunked(on: { $0.signum() }) {\r\n        print(signum, values)\r\n    }\r\n    // 1 [5, 6]\r\n    // -1 [-3, -9, -11]\r\n    // 1 [2, 7, 6]\r\n    ```\r\n\r\n### Fixes\r\n\r\n- Improvements to the documentation and PR templates.\r\n",
    "createdAt" : "2021-05-18T03:08:39+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTQzMDc4MzM5",
    "owner" : "apple",
    "publishedAt" : "2021-05-18T03:11:07+09:00",
    "repository" : "swift-algorithms",
    "title" : "Swift Algorithms 0.2.0",
    "url" : "https://github.com/apple/swift-algorithms/releases/tag/0.2.0",
    "version" : "0.2.0"
  },
  {
    "body" : "### Additions\r\n\r\nExpanded versatility for two existing operations:\r\n\r\n- A series of `joined(by:)` overloads concatenate a sequence of sequences using an element or a collection, either passed in or generated from consecutive elements via a closure. (#138)\r\n- Additional `trimming(while:)` methods for trimming only the start or end of a collection, as well as mutating versions of all three variants. (#104)\r\n",
    "createdAt" : "2021-06-02T05:46:56+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "MDc6UmVsZWFzZTQzOTM2Mjg2",
    "owner" : "apple",
    "publishedAt" : "2021-06-02T05:48:20+09:00",
    "repository" : "swift-algorithms",
    "title" : "Swift Algorithms 0.2.1",
    "url" : "https://github.com/apple/swift-algorithms/releases/tag/0.2.1",
    "version" : "0.2.1"
  },
  {
    "body" : "Swift Algorithms is now source stable!\r\n\r\n### Changes\r\n\r\n- Most sequence and collection types have been renamed, following a more consistent naming structure:\r\n  - The `Lazy` prefix was dropped.\r\n  - Either a `Sequence` or `Collection` suffix was added depending on whether or not the type is unconditionally a collection.\r\n  - The base name was derived from the name of the method that produces it, including an argument label to disambiguate if necessary.\r\n- Types that can only be produced from a lazy sequence chain now unconditionally conform to `LazySequenceProtocol` and wrap the base sequence instead of the lazy wrapper, making some return types slightly simpler.\r\n  - e.g. `[1, 2, 3].lazy.reductions(+)` now returns `ExclusiveReductionsSequence<[Int]>`, not `ExclusiveReductionsSequence<LazySequence<[Int]>>`.\r\n- The generic parameters of the `ExclusiveReductions` type have been swapped, putting the base collection first and the result type second.\r\n- The `Indices` associated type of `IndexedCollection` now matches `Base.Indices`.\r\n\r\n### Removals\r\n\r\n- Previously deprecated type and method names have been removed:\r\n  - The `Chain` type alias for `Chain2Sequence`\r\n  - The `chained(with:)` method which was replaced with the `chain(_:_:)` free function\r\n  - The `LazyChunked` and `Chunked` type aliases for `ChunkedByCollection`\r\n  - The `rotate(subrange:at:)` and `rotate(at:)` methods which were renamed to `rotate(subrange:toStartAt:)` and `rotate(toStartAt:)` respectively\r\n\r\n### Fixes\r\n\r\n- The `StridingSequence` and `StridingCollection` types now conditionally conform to `LazySequenceProtocol`, allowing the `striding(by:)` method to properly propagate laziness in a lazy sequence chain.\r\n- Fixed `chunked(by:)` to always compare two consecutive elements rather than each element with the first element of the current chunk. (#162)",
    "createdAt" : "2021-09-09T02:45:35+09:00",
    "fetchedFromAPIAt" : "2022-04-18T23:56:32+09:00",
    "id" : "RE_kwDOEeO1ns4C7wY-",
    "owner" : "apple",
    "publishedAt" : "2021-09-09T02:53:49+09:00",
    "repository" : "swift-algorithms",
    "title" : "Swift Algorithms 1.0.0",
    "url" : "https://github.com/apple/swift-algorithms/releases/tag/1.0.0",
    "version" : "1.0.0"
  },
  {
    "body" : "### Additions\r\n\r\n- New nonmutating `partitioned(by:)` methods that return both the failing and passing elements of a sequence or collection in separate arrays. (#152)\r\n\r\n    ```swift\r\n    let cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\r\n    let (longNames, shortNames) = cast.partitioned(by: { $0.count < 5 })\r\n    \r\n    print(longNames)\r\n    // Prints \"[\"Vivien\", \"Marlon\"]\"\r\n    print(shortNames)\r\n    // Prints \"[\"Kim\", \"Karl\"]\"\r\n    ```\r\n    \r\n- A new `evenlyChunked(in:)` method that chunks a sequence or collection into the specified number of evenly-sized subsequences. (#96)\r\n\r\n    ```swift\r\n    let numbers = Array(0..<10) \r\n    for chunk in numbers.evenlyChunked(in: 4) {\r\n        print(chunk)\r\n    }\r\n    // Prints: \r\n    // [0, 1, 2]\r\n    // [3, 4, 5]\r\n    // [6, 7]\r\n    // [8, 9]\r\n    ```\r\n\r\n### Changes\r\n\r\n- The package now has a minimum Swift version of Swift 5.4.\r\n\r\n### Fixes\r\n\r\n- Improvements to documentation, including a new DocC-based documentation structure.\r\n\r\nThe 1.1.0 release includes contributions from @dickoff, @gwynne, @mdznr, @natecook1000, @ole, @stephentyrone, and @timvermeulen.\r\nThank you!\r\n",
    "createdAt" : "2023-10-06T04:45:17+09:00",
    "fetchedFromAPIAt" : "2023-10-18T13:22:51+09:00",
    "id" : "RE_kwDOEeO1ns4HYvr-",
    "owner" : "apple",
    "publishedAt" : "2023-10-06T05:00:02+09:00",
    "repository" : "swift-algorithms",
    "title" : "Swift Algorithms 1.1.0",
    "url" : "https://github.com/apple/swift-algorithms/releases/tag/1.1.0",
    "version" : "1.1.0"
  }
]